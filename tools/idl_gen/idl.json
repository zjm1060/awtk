[
  {
    "type": "enum",
    "desc": " 图标所在的位置。\r\n",
    "consts": [
      {
        "desc": " 自动选择位置。\r\n",
        "name": "ICON_AT_AUTO"
      },
      {
        "desc": " 水平左边，垂直居中。\r\n",
        "name": "ICON_AT_LEFT"
      },
      {
        "desc": " 水平右边，垂直居中(not used now)。\r\n",
        "name": "ICON_AT_RIGHT"
      },
      {
        "desc": " 水平居中，垂直顶部(not used now)。\r\n",
        "name": "ICON_AT_TOP"
      },
      {
        "desc": " 水平居中，垂直低部(not used now)。\r\n",
        "name": "ICON_AT_BOTTOM"
      }
    ],
    "header": "base/types_def.h",
    "name": "icon_at_type_t",
    "prefix": "ICON_AT",
    "level": 1
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "wh_t",
            "name": "w",
            "desc": "LCD宽度。"
          },
          {
            "type": "wh_t",
            "name": "h",
            "desc": "LCD高度。"
          },
          {
            "type": "app_type_t",
            "name": "app_type",
            "desc": "应用程序的类型。"
          },
          {
            "type": "const char*",
            "name": "app_name",
            "desc": "应用程序的名称(必须为常量字符串)。"
          },
          {
            "type": "const char*",
            "name": "app_root",
            "desc": "应用程序的根目录，用于定位资源文件(必须为常量字符串)。"
          }
        ],
        "annotation": {},
        "desc": " 初始化TK。\n\n\n",
        "name": "tk_init",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [],
        "annotation": {},
        "desc": " 进入TK事件主循环。\n\n\n",
        "name": "tk_run",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [],
        "annotation": {
          "static": true,
          "scriptable": true
        },
        "desc": " 退出TK事件主循环。\n\n\n",
        "name": "tk_quit",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "int",
            "name": "orientation",
            "desc": "旋转方向。"
          }
        ],
        "annotation": {},
        "desc": " 设置屏幕的旋转方向(XXX:目前仅支持0度和90度)。\n\n\n",
        "name": "tk_set_lcd_orientation",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [],
        "annotation": {
          "private": true
        },
        "desc": " 初始化资源。\n\n\n",
        "name": "tk_init_assets",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      }
    ],
    "events": [],
    "properties": [],
    "header": "src/awtk_global.h",
    "desc": " TK全局对象。\n\n",
    "name": "tk_t",
    "annotation": {
      "scriptable": true,
      "fake": true
    },
    "level": 1
  },
  {
    "type": "enum",
    "desc": " 图片资源类型定义。\n\n",
    "consts": [],
    "header": "base/assets_manager.h",
    "name": "asset_image_type_t",
    "prefix": "ASSET_IMAGE_TYPE_",
    "level": 1
  },
  {
    "type": "enum",
    "desc": " UI资源类型定义。\n\n",
    "consts": [],
    "header": "base/assets_manager.h",
    "name": "asset_ui_type_t",
    "prefix": "ASSET_UI_TYPE_",
    "level": 1
  },
  {
    "type": "class",
    "methods": [],
    "events": [],
    "properties": [],
    "header": "base/assets_manager.h",
    "desc": " 预加载资源的描述信息。\n\n",
    "name": "preload_res_t",
    "level": 1
  },
  {
    "type": "class",
    "methods": [],
    "events": [],
    "properties": [
      {
        "name": "type",
        "desc": " 类型。\n\n",
        "type": "uint16_t",
        "annotation": {
          "readable": true,
          "scriptable": true
        }
      },
      {
        "name": "subtype",
        "desc": " 子类型。\n\n",
        "type": "uint8_t",
        "annotation": {
          "readable": true,
          "scriptable": true
        }
      },
      {
        "name": "is_in_rom",
        "desc": " 资源是否在ROM中。\n\n",
        "type": "uint8_t",
        "annotation": {
          "readable": true,
          "scriptable": true
        }
      },
      {
        "name": "size",
        "desc": " 大小。\n\n",
        "type": "uint32_t",
        "annotation": {
          "readable": true,
          "scriptable": true
        }
      },
      {
        "name": "refcount",
        "desc": " 引用计数。\n is\\_in\\_rom == FALSE时才有效。\n\n",
        "type": "uint32_t",
        "annotation": {
          "readable": true,
          "scriptable": true
        }
      },
      {
        "name": "name",
        "desc": " 名称。\n\n",
        "type": "char*",
        "annotation": {
          "readable": true,
          "scriptable": true
        }
      }
    ],
    "header": "base/assets_manager.h",
    "desc": " 单个资源的描述信息。\n\n",
    "name": "asset_info_t",
    "annotation": {
      "constructor": true,
      "scriptable": true
    },
    "level": 1
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [],
        "annotation": {
          "constructor": true,
          "scriptable": true
        },
        "desc": " 获取缺省资源管理器。\n\n\n",
        "name": "assets_manager",
        "alias": "assets_manager_instance",
        "return": {
          "type": "assets_manager_t*",
          "desc": "返回asset manager对象。"
        }
      },
      {
        "params": [
          {
            "type": "assets_manager_t*",
            "name": "rm",
            "desc": "asset manager对象。"
          }
        ],
        "annotation": {},
        "desc": " 设置缺省资源管理器。\n\n\n",
        "name": "assets_manager_set",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "uint32_t",
            "name": "init_nr",
            "desc": "预先分配资源的个数。"
          }
        ],
        "annotation": {
          "constructor": true
        },
        "desc": " 创建资源管理器。\n\n\n",
        "name": "assets_manager_create",
        "return": {
          "type": "assets_manager_t*",
          "desc": "返回asset manager对象。"
        }
      },
      {
        "params": [
          {
            "type": "assets_manager_t*",
            "name": "rm",
            "desc": "asset manager对象。"
          },
          {
            "type": "uint32_t",
            "name": "init_nr",
            "desc": "预先分配资源的个数。"
          }
        ],
        "annotation": {
          "constructor": true
        },
        "desc": " 初始化资源管理器。\n\n\n",
        "name": "assets_manager_init",
        "return": {
          "type": "assets_manager_t*",
          "desc": "返回asset manager对象。"
        }
      },
      {
        "params": [
          {
            "type": "assets_manager_t*",
            "name": "rm",
            "desc": "asset manager对象。"
          },
          {
            "type": "const char*",
            "name": "res_root",
            "desc": "资源所在的目录。"
          }
        ],
        "annotation": {},
        "desc": " 设置资源所在的目录(其下目录结构请参考demos)。\n\n\n",
        "name": "assets_manager_set_res_root",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "assets_manager_t*",
            "name": "rm",
            "desc": "asset manager对象。"
          },
          {
            "type": "asset_info_t",
            "name": "info",
            "desc": "待增加的资源。"
          }
        ],
        "annotation": {},
        "desc": " 向资源管理器中增加一个资源。\n\n\n",
        "name": "assets_manager_add",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "assets_manager_t*",
            "name": "rm",
            "desc": "asset manager对象。"
          },
          {
            "type": "asset_type_t",
            "name": "type",
            "desc": "资源的类型。"
          },
          {
            "type": "char*",
            "name": "name",
            "desc": "资源的名称。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 在资源管理器的缓存中查找指定的资源并引用它，如果缓存中不存在，尝试加载该资源。\n\n\n",
        "name": "assets_manager_ref",
        "return": {
          "type": "asset_info_t*",
          "desc": "返回资源。"
        }
      },
      {
        "params": [
          {
            "type": "assets_manager_t*",
            "name": "rm",
            "desc": "asset manager对象。"
          },
          {
            "type": "asset_info_t*",
            "name": "info",
            "desc": "资源。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 释放指定的资源。\n\n\n",
        "name": "assets_manager_unref",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "assets_manager_t*",
            "name": "rm",
            "desc": "asset manager对象。"
          },
          {
            "type": "asset_type_t",
            "name": "type",
            "desc": "资源的类型。"
          },
          {
            "type": "char*",
            "name": "name",
            "desc": "资源的名称。"
          }
        ],
        "annotation": {},
        "desc": " 在资源管理器的缓存中查找指定的资源(不引用)。\n\n\n",
        "name": "assets_manager_find_in_cache",
        "return": {
          "type": "asset_info_t*",
          "desc": "返回资源。"
        }
      },
      {
        "params": [
          {
            "type": "assets_manager_t*",
            "name": "rm",
            "desc": "asset manager对象。"
          },
          {
            "type": "asset_type_t",
            "name": "type",
            "desc": "资源的类型。"
          },
          {
            "type": "char*",
            "name": "name",
            "desc": "资源的名称。"
          }
        ],
        "annotation": {},
        "desc": " 从文件系统中加载指定的资源，并缓存到内存中。在定义了宏WITH\\_FS\\_RES时才生效。\n\n\n",
        "name": "assets_manager_load",
        "return": {
          "type": "asset_info_t*",
          "desc": "返回资源。"
        }
      },
      {
        "params": [
          {
            "type": "assets_manager_t*",
            "name": "rm",
            "desc": "asset manager对象。"
          },
          {
            "type": "asset_type_t",
            "name": "type",
            "desc": "资源的类型。"
          }
        ],
        "annotation": {},
        "desc": " 清除指定类型的缓存。\n\n\n",
        "name": "assets_manager_clear_cache",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "assets_manager_t*",
            "name": "rm",
            "desc": "asset manager对象。"
          }
        ],
        "annotation": {},
        "desc": " 释放全部资源。\n\n\n",
        "name": "assets_manager_deinit",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "assets_manager_t*",
            "name": "rm",
            "desc": "asset manager对象。"
          }
        ],
        "annotation": {},
        "desc": " 释放全部资源并销毁asset manager对象。\n\n\n",
        "name": "assets_manager_destroy",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      }
    ],
    "events": [],
    "properties": [],
    "header": "base/assets_manager.h",
    "desc": " 资源管理器。\n 这里的资源管理器并非Windows下的文件浏览器，而是负责对各种资源，比如字体、主题、图片、界面数据、字符串和其它数据的进行集中管理的组件。引入资源管理器的目的有以下几个：\n\n *\n让上层不需要了解存储的方式。在没有文件系统时或者内存紧缺时，把资源转成常量数组直接编译到代码中。在有文件系统而且内存充足时，资源放在文件系统中。在有网络时，资源也可以存放在服务器上(暂未实现)。资源管理器为上层提供统一的接口，让上层而不用关心底层的存储方式。\n\n *\n让上层不需要了解资源的具体格式。比如一个名为earth的图片，没有文件系统或内存紧缺，图片直接用位图数据格式存在ROM中，而有文件系统时，则用PNG格式存放在文件系统中。资源管理器让上层不需要关心图片的格式，访问时指定图片的名称即可(不用指定扩展名)。\n\n *\n让上层不需要了解屏幕的密度。不同的屏幕密度下需要加载不同的图片，比如MacPro的Retina屏就需要用双倍解析度的图片，否则就出现界面模糊。AWTK以后会支持PC软件和手机软件的开发，所以资源管理器需要为此提供支持，让上层不需关心屏幕的密度。\n\n *\n对资源进行内存缓存。不同类型的资源使用方式是不一样的，比如字体和主题加载之后会一直使用，UI文件在生成界面之后就暂时不需要了，PNG文件解码之后就只需要保留解码的位图数据即可。资源管理器配合图片管理器等其它组件实现资源的自动缓存。\n\n当从文件系统加载资源时，目录结构要求如下：\n\n ```\n assets/raw/\n  fonts   字体\n  images  图片\n    x1   普通密度屏幕的图片。\n    x2   2倍密度屏幕的图片。\n    x3   3倍密度屏幕的图片。\n  strings 需要翻译的字符串。\n  styles  主题数据。\n  ui      UI描述数据。\n ```\n\n\n",
    "name": "assets_manager_t",
    "annotation": {
      "scriptable": true
    },
    "level": 1
  },
  {
    "type": "enum",
    "desc": " 位图格式常量定义。\n\n",
    "consts": [
      {
        "desc": " 无效格式。\n\n",
        "name": "BITMAP_FMT_NONE"
      },
      {
        "desc": " 一个像素占用4个字节，RGBA占一个字节，按内存地址递增。\n\n",
        "name": "BITMAP_FMT_RGBA8888"
      },
      {
        "desc": " 一个像素占用4个字节，ABGR占一个字节，按内存地址递增。\n\n",
        "name": "BITMAP_FMT_ABGR8888"
      },
      {
        "desc": " 一个像素占用4个字节，BGRA占一个字节，按内存地址递增。\n\n",
        "name": "BITMAP_FMT_BGRA8888"
      },
      {
        "desc": " 一个像素占用4个字节，ARGB占一个字节，按内存地址递增。\n\n",
        "name": "BITMAP_FMT_ARGB8888"
      },
      {
        "desc": " 一个像素占用2个字节，RGB分别占用5,6,5位, 按内存地址递增。\n\n",
        "name": "BITMAP_FMT_RGB565"
      },
      {
        "desc": " 一个像素占用2个字节，BGR分别占用5,6,5位, 按内存地址递增。\n\n",
        "name": "BITMAP_FMT_BGR565"
      },
      {
        "desc": " 一个像素占用3个字节，RGB占一个字节，按内存地址递增。\n\n",
        "name": "BITMAP_FMT_RGB888"
      },
      {
        "desc": " 一个像素占用3个字节，RGB占一个字节，按内存地址递增。\n\n",
        "name": "BITMAP_FMT_BGR888"
      }
    ],
    "header": "base/bitmap.h",
    "name": "bitmap_format_t",
    "prefix": "BITMAP_FMT_",
    "annotation": {
      "scriptable": true
    },
    "level": 1
  },
  {
    "type": "enum",
    "desc": " 位图标志常量定义。\n\n",
    "consts": [
      {
        "desc": " 无特殊标志。\n\n",
        "name": "BITMAP_FLAG_NONE"
      },
      {
        "desc": " 不透明图片。\n\n",
        "name": "BITMAP_FLAG_OPAQUE"
      },
      {
        "desc": " 图片内容不会变化。\n\n",
        "name": "BITMAP_FLAG_IMMUTABLE"
      },
      {
        "desc": " OpenGL Texture, bitmap的id是有效的texture id。\n\n",
        "name": "BITMAP_FLAG_TEXTURE"
      },
      {
        "desc": " 如果是MUTABLE的图片，更新时需要设置此标志，底层可能会做特殊处理，比如更新图片到GPU。\n\n",
        "name": "BITMAP_FLAG_CHANGED"
      }
    ],
    "header": "base/bitmap.h",
    "name": "bitmap_flag_t",
    "prefix": "BITMAP_FLAG_",
    "annotation": {
      "scriptable": true
    },
    "level": 1
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [],
        "annotation": {
          "constructor": true,
          "scriptable": true
        },
        "desc": " 创建图片对象(一般供脚本语言中使用)。\n\n",
        "name": "bitmap_create",
        "return": {
          "type": "bitmap_t*",
          "desc": "返回bitmap对象。"
        }
      },
      {
        "params": [
          {
            "type": "uint32_t",
            "name": "w",
            "desc": "宽度。"
          },
          {
            "type": "uint32_t",
            "name": "h",
            "desc": "高度。"
          },
          {
            "type": "uint32_t",
            "name": "line_length",
            "desc": "line_length。"
          },
          {
            "type": "bitmap_format_t",
            "name": "format",
            "desc": "格式。"
          }
        ],
        "annotation": {
          "constructor": true,
          "scriptable": true
        },
        "desc": " 创建图片对象。\n\n\n",
        "name": "bitmap_create_ex",
        "return": {
          "type": "bitmap_t*",
          "desc": "返回bitmap对象。"
        }
      },
      {
        "params": [
          {
            "type": "bitmap_t*",
            "name": "bitmap",
            "desc": "bitmap对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 获取图片一个像素占用的字节数。\n\n\n",
        "name": "bitmap_get_bpp",
        "return": {
          "type": "uint32_t",
          "desc": "返回一个像素占用的字节数。"
        }
      },
      {
        "params": [
          {
            "type": "bitmap_t*",
            "name": "bitmap",
            "desc": "bitmap对象。"
          },
          {
            "type": "uint32_t",
            "name": "x",
            "desc": "x坐标。"
          },
          {
            "type": "uint32_t",
            "name": "y",
            "desc": "y坐标。"
          },
          {
            "type": "rgba_t*",
            "name": "rgba",
            "desc": "返回颜色值。"
          }
        ],
        "annotation": {},
        "desc": " 获取图片指定像素的rgba颜色值(主要用于测试程序)。\n\n\n",
        "name": "bitmap_get_pixel",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "bitmap_t*",
            "name": "bitmap",
            "desc": "bitmap对象。"
          },
          {
            "type": "uint32_t",
            "name": "line_length",
            "desc": "line_length。"
          }
        ],
        "annotation": {},
        "desc": " 设置line_length。\n\n\n",
        "name": "bitmap_set_line_length",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "bitmap_t*",
            "name": "bitmap",
            "desc": "bitmap对象。"
          }
        ],
        "annotation": {},
        "desc": " 获取每一行占用内存的字节数。\n\n\n",
        "name": "bitmap_get_line_length",
        "return": {
          "type": "ret_t",
          "desc": "返回每一行占用内存的字节数。"
        }
      },
      {
        "params": [
          {
            "type": "bitmap_t*",
            "name": "bitmap",
            "desc": "bitmap对象。"
          },
          {
            "type": "uint32_t",
            "name": "w",
            "desc": "宽度。"
          },
          {
            "type": "uint32_t",
            "name": "h",
            "desc": "高度。"
          },
          {
            "type": "bitmap_format_t",
            "name": "format",
            "desc": "格式。"
          },
          {
            "type": "const uint8_t*",
            "name": "",
            "desc": "a"
          },
          {
            "type": "uint32_t",
            "name": "comp",
            "desc": "颜色通道数(目前支持3(rgb)和4(rgba))。"
          }
        ],
        "annotation": {},
        "desc": " 初始化图片。\n 数据。3通道时为RGB888格式，4通道时为RGBA888格式(内部拷贝该数据，不会引用，调用者自行释放)。\n\n\n",
        "name": "bitmap_init_from_rgba",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "bitmap_t*",
            "name": "bitmap",
            "desc": "bitmap对象。"
          },
          {
            "type": "uint32_t",
            "name": "w",
            "desc": "宽度。"
          },
          {
            "type": "uint32_t",
            "name": "h",
            "desc": "高度。"
          },
          {
            "type": "bitmap_format_t",
            "name": "format",
            "desc": "格式。"
          },
          {
            "type": "const uint8_t*",
            "name": "data",
            "desc": "数据，直接引用，但不负责释放。如果为空，由内部自动分配和释放。"
          }
        ],
        "annotation": {},
        "desc": " 初始化图片。\n\n\n",
        "name": "bitmap_init",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "bitmap_t*",
            "name": "bitmap",
            "desc": "bitmap对象。"
          }
        ],
        "annotation": {
          "deconstructor": true,
          "scriptable": true
        },
        "desc": " 销毁图片。\n\n",
        "name": "bitmap_destroy",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      }
    ],
    "events": [],
    "properties": [
      {
        "name": "w",
        "desc": " 宽度。\n\n",
        "type": "wh_t",
        "annotation": {
          "readable": true,
          "scriptable": true
        }
      },
      {
        "name": "h",
        "desc": " 高度。\n\n",
        "type": "wh_t",
        "annotation": {
          "readable": true,
          "scriptable": true
        }
      },
      {
        "name": "line_length",
        "desc": " 每一行实际占用的内存(也称为stride或pitch)，一般情况下为w*bpp。\n\n",
        "type": "uint32_t",
        "annotation": {
          "readable": true,
          "scriptable": true
        }
      },
      {
        "name": "flags",
        "desc": " 标志。请参考{bitmap_flag_t}。\n\n",
        "type": "uint16_t",
        "annotation": {
          "readable": true,
          "scriptable": true
        }
      },
      {
        "name": "format",
        "desc": " 格式。请参考{bitmap_format_t}。\n\n",
        "type": "uint16_t",
        "annotation": {
          "readable": true,
          "scriptable": true
        }
      },
      {
        "name": "name",
        "desc": " 名称。\n\n",
        "type": "char*",
        "annotation": {
          "readable": true,
          "scriptable": true
        }
      },
      {
        "name": "data",
        "desc": " 图片数据。\n\n",
        "type": "uint8_t*",
        "annotation": {
          "readable": true
        }
      }
    ],
    "header": "base/bitmap.h",
    "desc": " 位图。\n\n",
    "name": "bitmap_t",
    "annotation": {
      "scriptable": true
    },
    "level": 1
  },
  {
    "type": "enum",
    "desc": " 图片绘制方法常量定义。\n\n",
    "consts": [
      {
        "desc": " 缺省显示。将图片按原大小显示在目标矩形的左上角。\n\n",
        "name": "IMAGE_DRAW_DEFAULT"
      },
      {
        "desc": " 居中显示。将图片按原大小显示在目标矩形的中央。\n\n",
        "name": "IMAGE_DRAW_CENTER"
      },
      {
        "desc": " 图标显示。同居中显示，但会根据屏幕密度调整大小。\n\n",
        "name": "IMAGE_DRAW_ICON"
      },
      {
        "desc": " 缩放显示。将图片缩放至目标矩形的大小(不保证宽高成比例)。\n\n",
        "name": "IMAGE_DRAW_SCALE"
      },
      {
        "desc": " 自动缩放显示。将图片缩放至目标矩形的宽度或高度(选取最小的比例)，并居中显示。\n\n",
        "name": "IMAGE_DRAW_SCALE_AUTO"
      },
      {
        "desc": " 如果图片比目标矩形大，自动缩小显示，否则居中显示。\n\n",
        "name": "IMAGE_DRAW_SCALE_DOWN"
      },
      {
        "desc": " 宽度缩放显示。 将图片缩放至目标矩形的宽度，高度按此比例进行缩放，超出不部分不显示。\n\n",
        "name": "IMAGE_DRAW_SCALE_W"
      },
      {
        "desc": " 高度缩放显示。将图片缩放至目标矩形的高度，宽度按此比例进行缩放，超出不部分不显示。\n\n",
        "name": "IMAGE_DRAW_SCALE_H"
      },
      {
        "desc": " 平铺显示。\n\n",
        "name": "IMAGE_DRAW_REPEAT"
      },
      {
        "desc": " 水平方向平铺显示，垂直方向缩放。\n\n",
        "name": "IMAGE_DRAW_REPEAT_X"
      },
      {
        "desc": " 垂直方向平铺显示，水平方向缩放。\n\n",
        "name": "IMAGE_DRAW_REPEAT_Y"
      },
      {
        "desc": " 9宫格显示。\n 将图片分成等大小的9块，4个角按原大小显示在目标矩形的4个角，左右上下和中间5块分别缩放显示在对应的目标区域。\n\n",
        "name": "IMAGE_DRAW_PATCH9"
      },
      {
        "desc": " 水平方向3宫格显示，垂直方向居中显示。\n 将图片在水平方向上分成等大小的3块，左右两块按原大小显示在目标矩形的左右，中间一块缩放显示在目标区域中间剩余部分。\n\n",
        "name": "IMAGE_DRAW_PATCH3_X"
      },
      {
        "desc": " 垂直方向3宫格显示，水平方向居中显示。\n 将图片在垂直方向上分成等大小的3块，上下两块按原大小显示在目标矩形的上下，中间一块缩放显示在目标区域中间剩余部分。\n\n",
        "name": "IMAGE_DRAW_PATCH3_Y"
      },
      {
        "desc": " 水平方向3宫格显示，垂直方向缩放显示。\n 将图片在水平方向上分成等大小的3块，左右两块按原大小显示在目标矩形的左右，中间一块缩放显示在目标区域中间剩余部分。\n\n",
        "name": "IMAGE_DRAW_PATCH3_X_SCALE_Y"
      },
      {
        "desc": " 垂直方向3宫格显示，水平方向缩放显示。\n 将图片在垂直方向上分成等大小的3块，上下两块按原大小显示在目标矩形的上下，中间一块缩放显示在目标区域中间剩余部分。\n\n",
        "name": "IMAGE_DRAW_PATCH3_Y_SCALE_X"
      }
    ],
    "header": "base/bitmap.h",
    "name": "image_draw_type_t",
    "prefix": "IMAGE_DRAW_",
    "annotation": {
      "scriptable": true
    },
    "level": 1
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "canvas_t*",
            "name": "c",
            "desc": "canvas对象。"
          },
          {
            "type": "lcd_t*",
            "name": "lcd",
            "desc": "lcd对象。"
          },
          {
            "type": "font_manager_t*",
            "name": "font_manager",
            "desc": "字体管理器对象。"
          }
        ],
        "annotation": {},
        "desc": " 初始化，系统内部调用。\r\n\r\n\r\n",
        "name": "canvas_init",
        "return": {
          "type": "canvas_t*",
          "desc": "返回canvas对象本身。"
        }
      },
      {
        "params": [
          {
            "type": "canvas_t*",
            "name": "c",
            "desc": "canvas对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 获取画布的宽度。\r\n\r\n\r\n\r\n",
        "name": "canvas_get_width",
        "return": {
          "type": "wh_t",
          "desc": "返回画布的宽度。"
        }
      },
      {
        "params": [
          {
            "type": "canvas_t*",
            "name": "c",
            "desc": "canvas对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 获取画布的高度。\r\n\r\n\r\n\r\n",
        "name": "canvas_get_height",
        "return": {
          "type": "wh_t",
          "desc": "返回画布的高度。"
        }
      },
      {
        "params": [
          {
            "type": "canvas_t*",
            "name": "c",
            "desc": "canvas对象。"
          },
          {
            "type": "rect_t*",
            "name": "r",
            "desc": "rect对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 获取裁剪区。\r\n\r\n\r\n",
        "name": "canvas_get_clip_rect",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "canvas_t*",
            "name": "c",
            "desc": "canvas对象。"
          },
          {
            "type": "const rect_t*",
            "name": "r",
            "desc": "rect对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 设置裁剪区。\r\n\r\n\r\n",
        "name": "canvas_set_clip_rect",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "canvas_t*",
            "name": "c",
            "desc": "canvas对象。"
          },
          {
            "type": "const rect_t*",
            "name": "r",
            "desc": "rect对象。"
          },
          {
            "type": "bool_t",
            "name": "translate",
            "desc": "是否将裁剪区的位置加上canvas当前的偏移。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 设置裁剪区。\r\n\r\n\r\n",
        "name": "canvas_set_clip_rect_ex",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "canvas_t*",
            "name": "c",
            "desc": "canvas对象。"
          },
          {
            "type": "color_t",
            "name": "color",
            "desc": "颜色。"
          }
        ],
        "annotation": {},
        "desc": " 设置填充颜色。\r\n\r\n\r\n",
        "name": "canvas_set_fill_color",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "canvas_t*",
            "name": "c",
            "desc": "canvas对象。"
          },
          {
            "type": "color_t",
            "name": "color",
            "desc": "颜色。"
          }
        ],
        "annotation": {},
        "desc": " 设置文本颜色。\r\n\r\n\r\n",
        "name": "canvas_set_text_color",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "canvas_t*",
            "name": "c",
            "desc": "canvas对象。"
          },
          {
            "type": "color_t",
            "name": "color",
            "desc": "颜色。"
          }
        ],
        "annotation": {},
        "desc": " 设置线条颜色。\r\n\r\n\r\n",
        "name": "canvas_set_stroke_color",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "canvas_t*",
            "name": "c",
            "desc": "canvas对象。"
          },
          {
            "type": "const char*",
            "name": "color",
            "desc": "颜色。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 设置填充颜色。\r\n\r\n > 供脚本语言使用。\r\n\r\n\r\n",
        "name": "canvas_set_fill_color_str",
        "alias": "canvas_set_fill_color",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "canvas_t*",
            "name": "c",
            "desc": "canvas对象。"
          },
          {
            "type": "const char*",
            "name": "color",
            "desc": "颜色。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 设置文本颜色。\r\n\r\n > 供脚本语言使用。\r\n\r\n\r\n",
        "name": "canvas_set_text_color_str",
        "alias": "canvas_set_text_color",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "canvas_t*",
            "name": "c",
            "desc": "canvas对象。"
          },
          {
            "type": "const char*",
            "name": "color",
            "desc": "颜色。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 设置线条颜色。\r\n\r\n > 供脚本语言使用。\r\n\r\n\r\n",
        "name": "canvas_set_stroke_color_str",
        "alias": "canvas_set_stroke_color",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "canvas_t*",
            "name": "c",
            "desc": "canvas对象。"
          },
          {
            "type": "uint8_t",
            "name": "alpha",
            "desc": "alpha值。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 设置全局alpha值。\r\n\r\n\r\n",
        "name": "canvas_set_global_alpha",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "canvas_t*",
            "name": "c",
            "desc": "canvas对象。"
          },
          {
            "type": "xy_t",
            "name": "dx",
            "desc": "x偏移。"
          },
          {
            "type": "xy_t",
            "name": "dy",
            "desc": "y偏移。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 平移原点坐标。\r\n\r\n\r\n",
        "name": "canvas_translate",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "canvas_t*",
            "name": "c",
            "desc": "canvas对象。"
          },
          {
            "type": "xy_t",
            "name": "dx",
            "desc": "x偏移。"
          },
          {
            "type": "xy_t",
            "name": "dy",
            "desc": "y偏移。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 反向平移原点坐标。\r\n\r\n\r\n",
        "name": "canvas_untranslate",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "canvas_t*",
            "name": "c",
            "desc": "canvas对象。"
          },
          {
            "type": "xy_t",
            "name": "x",
            "desc": "x坐标。"
          },
          {
            "type": "xy_t",
            "name": "y",
            "desc": "y坐标。"
          },
          {
            "type": "wh_t",
            "name": "h",
            "desc": "高度。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 画垂直线。\r\n\r\n\r\n",
        "name": "canvas_draw_vline",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "canvas_t*",
            "name": "c",
            "desc": "canvas对象。"
          },
          {
            "type": "xy_t",
            "name": "x",
            "desc": "x坐标。"
          },
          {
            "type": "xy_t",
            "name": "y",
            "desc": "y坐标。"
          },
          {
            "type": "wh_t",
            "name": "w",
            "desc": "宽度。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 画水平线。\r\n\r\n\r\n",
        "name": "canvas_draw_hline",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "canvas_t*",
            "name": "c",
            "desc": "canvas对象。"
          },
          {
            "type": "const point_t*",
            "name": "points",
            "desc": "点数组。"
          },
          {
            "type": "uint32_t",
            "name": "nr",
            "desc": "点的个数。"
          }
        ],
        "annotation": {},
        "desc": " 画多个点。\r\n\r\n\r\n",
        "name": "canvas_draw_points",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "canvas_t*",
            "name": "c",
            "desc": "canvas对象。"
          },
          {
            "type": "xy_t",
            "name": "x",
            "desc": "x坐标。"
          },
          {
            "type": "xy_t",
            "name": "y",
            "desc": "y坐标。"
          },
          {
            "type": "wh_t",
            "name": "w",
            "desc": "宽度。"
          },
          {
            "type": "wh_t",
            "name": "h",
            "desc": "高度。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 填充矩形。\r\n\r\n\r\n",
        "name": "canvas_fill_rect",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "canvas_t*",
            "name": "c",
            "desc": "canvas对象。"
          },
          {
            "type": "xy_t",
            "name": "x",
            "desc": "x坐标。"
          },
          {
            "type": "xy_t",
            "name": "y",
            "desc": "y坐标。"
          },
          {
            "type": "wh_t",
            "name": "w",
            "desc": "宽度。"
          },
          {
            "type": "wh_t",
            "name": "h",
            "desc": "高度。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 绘制矩形。\r\n\r\n\r\n",
        "name": "canvas_stroke_rect",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "canvas_t*",
            "name": "c",
            "desc": "canvas对象。"
          },
          {
            "type": "const char*",
            "name": "name",
            "desc": "字体名称。"
          },
          {
            "type": "font_size_t",
            "name": "size",
            "desc": "字体大小。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 设置字体。\r\n\r\n\r\n",
        "name": "canvas_set_font",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "canvas_t*",
            "name": "c",
            "desc": "canvas对象。"
          },
          {
            "type": "align_h_t",
            "name": "align_h",
            "desc": "水平对齐方式。"
          },
          {
            "type": "align_v_t",
            "name": "align_v",
            "desc": "垂直对齐方式。"
          }
        ],
        "annotation": {},
        "desc": " 设置文本对齐方式。\r\n\r\n\r\n",
        "name": "canvas_set_text_align",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "canvas_t*",
            "name": "c",
            "desc": "canvas对象。"
          },
          {
            "type": "const wchar_t*",
            "name": "str",
            "desc": "字符串。"
          },
          {
            "type": "uint32_t",
            "name": "nr",
            "desc": "字符数。"
          }
        ],
        "annotation": {},
        "desc": " 计算文本所占的宽度。\r\n\r\n\r\n",
        "name": "canvas_measure_text",
        "return": {
          "type": "ret_t",
          "desc": "返回文本所占的宽度。"
        }
      },
      {
        "params": [
          {
            "type": "canvas_t*",
            "name": "c",
            "desc": "canvas对象。"
          },
          {
            "type": "const char*",
            "name": "str",
            "desc": "字符串。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 计算文本所占的宽度。\r\n\r\n > 供脚本语言使用。\r\n\r\n\r\n",
        "name": "canvas_measure_utf8",
        "alias": "canvas_measure_text",
        "return": {
          "type": "ret_t",
          "desc": "返回文本所占的宽度。"
        }
      },
      {
        "params": [
          {
            "type": "canvas_t*",
            "name": "c",
            "desc": "canvas对象。"
          },
          {
            "type": "const wchar_t*",
            "name": "str",
            "desc": "字符串。"
          },
          {
            "type": "uint32_t",
            "name": "nr",
            "desc": "字符数。"
          },
          {
            "type": "xy_t",
            "name": "x",
            "desc": "x坐标。"
          },
          {
            "type": "xy_t",
            "name": "y",
            "desc": "y坐标。"
          }
        ],
        "annotation": {},
        "desc": " 绘制文本。\r\n\r\n\r\n",
        "name": "canvas_draw_text",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "canvas_t*",
            "name": "c",
            "desc": "canvas对象。"
          },
          {
            "type": "const char*",
            "name": "str",
            "desc": "字符串。"
          },
          {
            "type": "xy_t",
            "name": "x",
            "desc": "x坐标。"
          },
          {
            "type": "xy_t",
            "name": "y",
            "desc": "y坐标。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 绘制文本。\r\n\r\n > 供脚本语言使用。\r\n\r\n\r\n",
        "name": "canvas_draw_utf8",
        "alias": "canvas_draw_text",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "canvas_t*",
            "name": "c",
            "desc": "canvas对象。"
          },
          {
            "type": "const wchar_t*",
            "name": "str",
            "desc": "字符串。"
          },
          {
            "type": "uint32_t",
            "name": "nr",
            "desc": "字符数。"
          },
          {
            "type": "const rect_t*",
            "name": "r",
            "desc": "矩形区域。"
          }
        ],
        "annotation": {},
        "desc": " 绘制文本。\r\n\r\n\r\n",
        "name": "canvas_draw_text_in_rect",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "canvas_t*",
            "name": "c",
            "desc": "canvas对象。"
          },
          {
            "type": "const char*",
            "name": "str",
            "desc": "字符串。"
          },
          {
            "type": "const rect_t*",
            "name": "r",
            "desc": "矩形区域。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 绘制文本。\r\n\r\n > 供脚本语言使用。\r\n\r\n\r\n",
        "name": "canvas_draw_utf8_in_rect",
        "alias": "canvas_draw_text_in_rect",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "canvas_t*",
            "name": "c",
            "desc": "canvas对象。"
          },
          {
            "type": "bitmap_t*",
            "name": "img",
            "desc": "图片对象。"
          },
          {
            "type": "xy_t",
            "name": "cx",
            "desc": "中心点x坐标。"
          },
          {
            "type": "xy_t",
            "name": "cy",
            "desc": "中心点y坐标。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 绘制图标。\r\n\r\n\r\n",
        "name": "canvas_draw_icon",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "canvas_t*",
            "name": "c",
            "desc": "canvas对象。"
          },
          {
            "type": "bitmap_t*",
            "name": "img",
            "desc": "图片对象。"
          },
          {
            "type": "rect_t*",
            "name": "src",
            "desc": "源区域。"
          },
          {
            "type": "rect_t*",
            "name": "dst",
            "desc": "目的区域。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 绘制图片。\r\n\r\n\r\n",
        "name": "canvas_draw_image",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "canvas_t*",
            "name": "c",
            "desc": "canvas对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 获取vgcanvas对象。\r\n\r\n\r\n",
        "name": "canvas_get_vgcanvas",
        "return": {
          "type": "vgcanvas_t*",
          "desc": "返回vgcanvas对象。"
        }
      },
      {
        "params": [
          {
            "type": "canvas_t*",
            "name": "c",
            "desc": "canvas对象。"
          }
        ],
        "annotation": {
          "cast": true,
          "scriptable": true
        },
        "desc": " 转换为canvas对象(供脚本语言使用)。\r\n\r\n",
        "name": "canvas_cast",
        "return": {
          "type": "canvas_t*",
          "desc": "canvas对象。"
        }
      }
    ],
    "events": [],
    "properties": [
      {
        "name": "ox",
        "desc": " x坐标偏移。\r\n",
        "type": "xy_t",
        "annotation": {
          "readable": true,
          "scriptable": true
        }
      },
      {
        "name": "oy",
        "desc": " y坐标偏移。\r\n",
        "type": "xy_t",
        "annotation": {
          "readable": true,
          "scriptable": true
        }
      }
    ],
    "header": "base/canvas.h",
    "desc": " canvas类。\r\n",
    "name": "canvas_t",
    "annotation": {
      "scriptable": true
    },
    "level": 1
  },
  {
    "params": [],
    "annotation": {
      "global": true
    },
    "desc": " 根据参数创建layouter对象。\n\n\n",
    "name": "children_layouter_create",
    "return": {
      "type": "children_layouter_t*",
      "desc": "返回layouter对象。"
    },
    "type": "method",
    "header": "base/children_layouter_factory.h",
    "level": 1
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "children_layouter_t*",
            "name": "layouter",
            "desc": "layouter对象。"
          }
        ],
        "annotation": {},
        "desc": " 获取全部参数。\n\n\n",
        "name": "children_layouter_to_string",
        "return": {
          "type": "ret_t",
          "desc": "返回字符串格式的参数。"
        }
      },
      {
        "params": [
          {
            "type": "children_layouter_t*",
            "name": "layouter",
            "desc": "layouter对象。"
          },
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件。"
          }
        ],
        "annotation": {},
        "desc": " 对控件的子控件进行布局。\n\n\n\n",
        "name": "children_layouter_layout",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "children_layouter_t*",
            "name": "layouter",
            "desc": "layouter对象。"
          },
          {
            "type": "const char*",
            "name": "name",
            "desc": "参数名。"
          },
          {
            "type": "value_t*",
            "name": "v",
            "desc": "返回参数的值。"
          }
        ],
        "annotation": {},
        "desc": " 获取指定的参数。\n\n\n\n",
        "name": "children_layouter_get_param",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "children_layouter_t*",
            "name": "layouter",
            "desc": "layouter对象。"
          },
          {
            "type": "const char*",
            "name": "name",
            "desc": "参数名。"
          },
          {
            "type": "const value_t*",
            "name": "v",
            "desc": "参数的值。"
          }
        ],
        "annotation": {},
        "desc": " 获取指定的参数。\n\n\n\n",
        "name": "children_layouter_set_param",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "children_layouter_t*",
            "name": "layouter",
            "desc": "layouter对象。"
          },
          {
            "type": "const char*",
            "name": "name",
            "desc": "参数名。"
          },
          {
            "type": "const char*",
            "name": "value",
            "desc": "参数值。"
          }
        ],
        "annotation": {},
        "desc": " 设置字符串格式的参数。\n\n\n\n",
        "name": "children_layouter_set_param_str",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "children_layouter_t*",
            "name": "layouter",
            "desc": "layouter对象。"
          },
          {
            "type": "const char*",
            "name": "name",
            "desc": "参数名。"
          },
          {
            "type": "float_t",
            "name": "defval",
            "desc": "缺省值。"
          }
        ],
        "annotation": {},
        "desc": " 获取指定的浮点格式的参数。\n\n\n\n",
        "name": "children_layouter_get_param_float",
        "return": {
          "type": "ret_t",
          "desc": "成功返回参数的值，失败返回缺省值。"
        }
      },
      {
        "params": [
          {
            "type": "children_layouter_t*",
            "name": "layouter",
            "desc": "layouter对象。"
          },
          {
            "type": "const char*",
            "name": "name",
            "desc": "参数名。"
          },
          {
            "type": "int32_t",
            "name": "defval",
            "desc": "缺省值。"
          }
        ],
        "annotation": {},
        "desc": " 获取指定的整数格式的参数。\n\n\n\n",
        "name": "children_layouter_get_param_int",
        "return": {
          "type": "ret_t",
          "desc": "成功返回参数的值，失败返回缺省值。"
        }
      },
      {
        "params": [
          {
            "type": "children_layouter_t*",
            "name": "layouter",
            "desc": "layouter对象。"
          }
        ],
        "annotation": {},
        "desc": " 判断layouter对象是否有效。\n\n\n\n",
        "name": "children_layouter_is_valid",
        "return": {
          "type": "bool_t",
          "desc": "返回TRUE表示有效，否则表示无效。"
        }
      },
      {
        "params": [
          {
            "type": "children_layouter_t*",
            "name": "layouter",
            "desc": "layouter对象。"
          }
        ],
        "annotation": {},
        "desc": " 销毁layouter对象。\n\n\n\n",
        "name": "children_layouter_destroy",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      }
    ],
    "events": [],
    "properties": [],
    "header": "base/children_layouter.h",
    "desc": " 子控件排版布局器的接口。\n\n 按特定算法对子控件进行排版布局，子类需要实现vtable中的函数。\n\n\n",
    "name": "children_layouter_t",
    "level": 1
  },
  {
    "type": "enum",
    "desc": " 剪切板数据类型定义。\n\n",
    "consts": [
      {
        "desc": " 无数据。\n\n",
        "name": "CLIP_BOARD_DATA_TYPE_NONE"
      },
      {
        "desc": " UTF8文本。\n\n",
        "name": "CLIP_BOARD_DATA_TYPE_TEXT"
      }
    ],
    "header": "base/clip_board.h",
    "name": "clip_board_data_type_t",
    "prefix": "CLIP_BOARD_DATA_TYPE_",
    "annotation": {
      "scriptable": true
    },
    "level": 1
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [],
        "annotation": {
          "constructor": true
        },
        "desc": " 获取缺省的剪切板对象。\n\n\n",
        "name": "clip_board",
        "alias": "clip_board_instance",
        "return": {
          "type": "ret_t",
          "desc": "返回缺省剪切板对象。"
        }
      },
      {
        "params": [
          {
            "type": "clip_board_t*",
            "name": "cl",
            "desc": "剪切板对象。"
          }
        ],
        "annotation": {},
        "desc": " 设置缺省的剪切板对象。\n\n\n",
        "name": "clip_board_set",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "clip_board_t*",
            "name": "cl",
            "desc": "剪切板对象。"
          }
        ],
        "annotation": {},
        "desc": " 清空剪切板中的数据。\n\n\n",
        "name": "clip_board_clear",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "clip_board_t*",
            "name": "cl",
            "desc": "剪切板对象。"
          },
          {
            "type": "clip_board_data_type_t",
            "name": "type",
            "desc": "数据类型。"
          },
          {
            "type": "const void* data",
            "name": "data",
            "desc": "数据。"
          },
          {
            "type": "uint32_t",
            "name": "size",
            "desc": "数据长度"
          }
        ],
        "annotation": {},
        "desc": " 设置数据到剪切板中。\n\n\n",
        "name": "clip_board_set_data",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "clip_board_t*",
            "name": "cl",
            "desc": "剪切板对象。"
          },
          {
            "type": "clip_board_data_type_t*",
            "name": "type",
            "desc": "返回数据类型(可为NULL)。"
          },
          {
            "type": "void** data",
            "name": "data",
            "desc": "返回数据(可为NULL)。"
          },
          {
            "type": "uint32_t*",
            "name": "size",
            "desc": "返回数据长度(可为NULL)。"
          }
        ],
        "annotation": {},
        "desc": " 从剪切板中获取数据。\n\n\n",
        "name": "clip_board_get_data",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "clip_board_t*",
            "name": "cl",
            "desc": "剪切板对象。"
          }
        ],
        "annotation": {},
        "desc": " 销毁剪切板对象。\n\n\n",
        "name": "clip_board_destroy",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "const char*",
            "name": "text",
            "desc": "文本。"
          }
        ],
        "annotation": {
          "static": true,
          "scriptable": true
        },
        "desc": " 设置文本(UTF8)数据到剪切板。\n\n\n",
        "name": "clip_board_set_text",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [],
        "annotation": {
          "static": true,
          "scriptable": true
        },
        "desc": " 从剪切板中获取文本(UTF8)数据。\n\n\n",
        "name": "clip_board_get_text",
        "return": {
          "type": "const char*",
          "desc": "返回文本数据。"
        }
      }
    ],
    "events": [],
    "properties": [],
    "header": "base/clip_board.h",
    "desc": " 剪切板接口。\n\n",
    "name": "clip_board_t",
    "annotation": {
      "scriptable": true
    },
    "level": 1
  },
  {
    "type": "class",
    "methods": [],
    "events": [],
    "properties": [],
    "header": "base/custom_props.h",
    "desc": " widget自定义属性。\r\n",
    "name": "custom_prop_t",
    "level": 1
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "uint32_t",
            "name": "capacity",
            "desc": "初始容量。"
          }
        ],
        "annotation": {
          "constructor": true
        },
        "desc": " 创建custom_props对象\r\n\r\n",
        "name": "custom_props_create",
        "return": {
          "type": "custom_props_t*",
          "desc": "custom_props对象。"
        }
      },
      {
        "params": [
          {
            "type": "custom_props_t",
            "name": "props",
            "desc": "属性集合对象。"
          },
          {
            "type": "char*",
            "name": "name",
            "desc": "属性的名称。"
          },
          {
            "type": "value_t*",
            "name": "v",
            "desc": "用于返回属性的值。"
          }
        ],
        "annotation": {},
        "desc": " 获取属性的值。\r\n\r\n",
        "name": "custom_props_get",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "custom_props_t",
            "name": "props",
            "desc": "属性集合对象。"
          },
          {
            "type": "char*",
            "name": "name",
            "desc": "属性的名称。"
          },
          {
            "type": "value_t*",
            "name": "v",
            "desc": "属性的值。"
          }
        ],
        "annotation": {},
        "desc": " 设置属性的值。\r\n\r\n",
        "name": "custom_props_set",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "custom_props_t",
            "name": "props",
            "desc": "属性集合对象。"
          }
        ],
        "annotation": {},
        "desc": " 销毁属性集合。\r\n\r\n",
        "name": "custom_props_destroy",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      }
    ],
    "events": [],
    "properties": [],
    "header": "base/custom_props.h",
    "desc": " widget自定义属性集合。\r\n",
    "name": "custom_props_t",
    "level": 1
  },
  {
    "type": "enum",
    "desc": " 类型常量定义。\n\n",
    "consts": [
      {
        "desc": " 无效事件名称。\n\n",
        "name": "EVT_NONE"
      },
      {
        "desc": " 指针按下事件名(pointer_event_t)。\n\n",
        "name": "EVT_POINTER_DOWN"
      },
      {
        "desc": " 取消前一个指针按下事件名(pointer_event_t)。\n\n",
        "name": "EVT_POINTER_DOWN_ABORT"
      },
      {
        "desc": " 指针移动事件名(pointer_event_t)。\n\n",
        "name": "EVT_POINTER_MOVE"
      },
      {
        "desc": " 指针抬起事件名(pointer_event_t)。\n\n",
        "name": "EVT_POINTER_UP"
      },
      {
        "desc": " 滚轮事件名(pointer_event_t)。\n\n",
        "name": "EVT_WHEEL"
      },
      {
        "desc": " 右键/长按弹出上下文菜单的事件名(pointer_event_t)。\n\n",
        "name": "EVT_CONTEXT_MENU"
      },
      {
        "desc": " 指针进入事件名(pointer_event_t)。\n\n",
        "name": "EVT_POINTER_ENTER"
      },
      {
        "desc": " 指针离开事件名(pointer_event_t)。\n\n",
        "name": "EVT_POINTER_LEAVE"
      },
      {
        "desc": " 长按事件名(pointer_event_t)。\n\n",
        "name": "EVT_LONG_PRESS"
      },
      {
        "desc": " 点击事件名(pointer_event_t)。\n\n",
        "name": "EVT_CLICK"
      },
      {
        "desc": " 得到焦点事件名(event_t)。\n\n",
        "name": "EVT_FOCUS"
      },
      {
        "desc": " 失去焦点事件名(event_t)。\n\n",
        "name": "EVT_BLUR"
      },
      {
        "desc": " 键按下事件名(key_event_t)。\n\n",
        "name": "EVT_KEY_DOWN"
      },
      {
        "desc": " 按键repeat事件名(key_event_t)。\n\n",
        "name": "EVT_KEY_REPEAT"
      },
      {
        "desc": " 键抬起事件名(key_event_t)。\n\n",
        "name": "EVT_KEY_UP"
      },
      {
        "desc": " 即将移动Widget的事件名(event_t)。\n\n",
        "name": "EVT_WILL_MOVE"
      },
      {
        "desc": " 移动Widget的事件名(event_t)。\n\n",
        "name": "EVT_MOVE"
      },
      {
        "desc": " 即将调整Widget大小的事件名(event_t)。\n\n",
        "name": "EVT_WILL_RESIZE"
      },
      {
        "desc": " 调整Widget大小的事件名(event_t)。\n\n",
        "name": "EVT_RESIZE"
      },
      {
        "desc": " 即将调整Widget大小/位置的事件名(event_t)。\n\n",
        "name": "EVT_WILL_MOVE_RESIZE"
      },
      {
        "desc": " 调整Widget大小/位置的事件名(event_t)。\n\n",
        "name": "EVT_MOVE_RESIZE"
      },
      {
        "desc": " 控件的值即将改变的事件名(event_t)。\n\n",
        "name": "EVT_VALUE_WILL_CHANGE"
      },
      {
        "desc": " 控件的值改变的事件名(event_t)。\n\n",
        "name": "EVT_VALUE_CHANGED"
      },
      {
        "desc": " 控件的值持续改变(如编辑器正在编辑)的事件名(event_t)。\n\n",
        "name": "EVT_VALUE_CHANGING"
      },
      {
        "desc": " 绘制的事件名(paint_event_t)。\n\n",
        "name": "EVT_PAINT"
      },
      {
        "desc": " 即将绘制的事件名(paint_event_t)。\n\n",
        "name": "EVT_BEFORE_PAINT"
      },
      {
        "desc": " 绘制完成的事件名(paint_event_t)。\n\n",
        "name": "EVT_AFTER_PAINT"
      },
      {
        "desc": " locale改变的事件(event_t)。\n\n",
        "name": "EVT_LOCALE_CHANGED"
      },
      {
        "desc": " 控件动画开始事件(event_t)。\n\n",
        "name": "EVT_ANIM_START"
      },
      {
        "desc": " 控件动画被主动停止的事件(event_t)。\n\n",
        "name": "EVT_ANIM_STOP"
      },
      {
        "desc": " 控件动画被暂停的事件(event_t)。\n\n",
        "name": "EVT_ANIM_PAUSE"
      },
      {
        "desc": " 控件动画yoyo/repeat时，完成一次的事件(event_t)。\n\n",
        "name": "EVT_ANIM_ONCE"
      },
      {
        "desc": " 控件动画完成事件(event_t)。\n\n",
        "name": "EVT_ANIM_END"
      },
      {
        "desc": " 窗口加载完成事件(event_t)。\n\n",
        "name": "EVT_WINDOW_LOAD"
      },
      {
        "desc": " 窗口即将打开事件(event_t)。\n 如果有窗口动画，在窗口动画开始前触发。如果没有窗口动画，在窗口被加载后的下一次循环中触发。\n\n",
        "name": "EVT_WINDOW_WILL_OPEN"
      },
      {
        "desc": " 窗口打开事件(event_t)。\n 如果有窗口动画，在窗口动画完成时触发。如果没有窗口动画，在窗口被加载后的下一次循环中触发。\n\n",
        "name": "EVT_WINDOW_OPEN"
      },
      {
        "desc": " 窗口关闭事件。\n\n",
        "name": "EVT_WINDOW_CLOSE"
      },
      {
        "desc": " 请求关闭窗口的事件(event_t)。\n\n",
        "name": "EVT_REQUEST_CLOSE_WINDOW"
      },
      {
        "desc": " 顶层窗口改变的事件(window_event_t)。\n\n",
        "name": "EVT_TOP_WINDOW_CHANGED"
      },
      {
        "desc": " 输入法提交输入的文本事件(im_commit_event_t)。\n\n",
        "name": "EVT_IM_COMMIT"
      },
      {
        "desc": " 输入法请求显示候选字事件(im_candidates_event_t)。\n\n",
        "name": "EVT_IM_SHOW_CANDIDATES"
      },
      {
        "desc": " 软键盘Action点击事件(event_t)。\n\n",
        "name": "EVT_IM_ACTION"
      },
      {
        "desc": " 请求更新软键盘上的Action按钮的信息(im_action_button_info_event_t)。\n\n",
        "name": "EVT_IM_ACTION_INFO"
      },
      {
        "desc": " 开始拖动(event_t)。\n\n",
        "name": "EVT_DRAG_START"
      },
      {
        "desc": " 拖动(event_t)。\n\n",
        "name": "EVT_DRAG"
      },
      {
        "desc": " 结束拖动(event_t)。\n\n",
        "name": "EVT_DRAG_END"
      },
      {
        "desc": " event queue其它请求编号起始值。\n\n",
        "name": "EVT_REQ_START"
      },
      {
        "desc": " 用户定义事件起始值。\n\n",
        "name": "EVT_USER_START"
      }
    ],
    "header": "base/events.h",
    "name": "event_type_t",
    "prefix": "EVT_",
    "annotation": {
      "scriptable": true
    },
    "level": 1
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "font_loader_t*",
            "name": "loader",
            "desc": "loader对象。"
          },
          {
            "type": "const char*",
            "name": "name",
            "desc": "字体名字。"
          },
          {
            "type": "uint8_t*",
            "name": "buff",
            "desc": "字体数据。"
          },
          {
            "type": "uint32_t",
            "name": "size",
            "desc": "字体数据长度。"
          }
        ],
        "annotation": {},
        "desc": " 加载字体。\n\n\n\n",
        "name": "font_loader_load",
        "return": {
          "type": "font_t*",
          "desc": "成功返回font，失败返回NULL。"
        }
      }
    ],
    "events": [],
    "properties": [],
    "header": "base/font_loader.h",
    "desc": " 字体加载接口。\n\n",
    "name": "font_loader_t",
    "level": 1
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [],
        "annotation": {
          "constructor": true
        },
        "desc": " 获取缺省的字体管理器。\n\n",
        "name": "font_manager",
        "return": {
          "type": "font_manager_t*",
          "desc": "返回字体管理器对象。"
        }
      },
      {
        "params": [
          {
            "type": "font_manager_t*",
            "name": "fm",
            "desc": "字体管理器对象。"
          }
        ],
        "annotation": {},
        "desc": " 设置缺省的字体管理器。\n\n\n",
        "name": "font_manager_set",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "font_loader_t*",
            "name": "loader",
            "desc": "字体加载器。"
          }
        ],
        "annotation": {
          "constructor": true
        },
        "desc": " 创建字体管理器。\n\n\n",
        "name": "font_manager_create",
        "return": {
          "type": "font_manager_t*",
          "desc": "返回字体管理器对象。"
        }
      },
      {
        "params": [
          {
            "type": "font_manager_t*",
            "name": "fm",
            "desc": "字体管理器对象。"
          },
          {
            "type": "font_loader_t*",
            "name": "loader",
            "desc": "字体加载器。"
          }
        ],
        "annotation": {
          "constructor": true
        },
        "desc": " 初始化字体管理器。\n\n\n",
        "name": "font_manager_init",
        "return": {
          "type": "font_manager_t*",
          "desc": "返回字体管理器对象。"
        }
      },
      {
        "params": [
          {
            "type": "font_manager_t*",
            "name": "imm",
            "desc": "字体管理器对象。"
          },
          {
            "type": "assets_manager_t*",
            "name": "assets_manager",
            "desc": "资源管理器。"
          }
        ],
        "annotation": {},
        "desc": " 设置资源管理器对象\n\n 之所以需要设置资源管理器对象，而不是使用缺省的资源管理器对象，是因为在designer中有两个字体管理器：\n\n * 一个用于designer本身加载字体。\n\n * 一个用于被设计的窗口加载字体。\n\n这两个字体管理器需要从不同的路径加载资源。\n\n\n",
        "name": "font_manager_set_assets_manager",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "font_manager_t*",
            "name": "fm",
            "desc": "字体管理器对象。"
          },
          {
            "type": "char*",
            "name": "name",
            "desc": "字体名。"
          },
          {
            "type": "font_t*",
            "name": "font",
            "desc": "字体。"
          }
        ],
        "annotation": {},
        "desc": " 向缓存中加入字体。\n\n\n",
        "name": "font_manager_add_font",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "font_manager_t*",
            "name": "fm",
            "desc": "字体管理器对象。"
          },
          {
            "type": "char*",
            "name": "name",
            "desc": "字体名，为NULL时使用TK_DEFAULT_FONT。"
          },
          {
            "type": "font_size_t",
            "name": "size",
            "desc": "字体的大小。"
          }
        ],
        "annotation": {},
        "desc": " 从缓存中查找字体，如果没找到，再加载字体，并缓存。\n\n\n",
        "name": "font_manager_get_font",
        "return": {
          "type": "font_t*",
          "desc": "返回字体对象。"
        }
      },
      {
        "params": [
          {
            "type": "font_manager_t*",
            "name": "fm",
            "desc": "字体管理器对象。"
          }
        ],
        "annotation": {},
        "desc": " 析构字体管理器。\n\n\n",
        "name": "font_manager_deinit",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "font_manager_t*",
            "name": "fm",
            "desc": "字体管理器对象。"
          }
        ],
        "annotation": {},
        "desc": " 析构并释放字体管理器。\n\n\n",
        "name": "font_manager_destroy",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      }
    ],
    "events": [],
    "properties": [
      {
        "name": "loader",
        "desc": " 字体加载器。\n\n",
        "type": "font_loader_t*",
        "annotation": {
          "private": true
        }
      },
      {
        "name": "assets_manager",
        "desc": " 资源管理器。\n\n",
        "type": "assets_manager_t*",
        "annotation": {
          "private": true
        }
      }
    ],
    "header": "base/font_manager.h",
    "desc": " 字体管理器，负责字体的加载和缓存管理。\n (如果使用nanovg，字体由nanovg内部管理)\n\n",
    "name": "font_manager_t",
    "level": 1
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [],
        "annotation": {
          "constructor": true
        },
        "desc": " 创建glyph对象。\n\n\n",
        "name": "glyph_create",
        "return": {
          "type": "glyph_t*",
          "desc": "glyph对象。"
        }
      },
      {
        "params": [],
        "annotation": {
          "constructor": true
        },
        "desc": " 克隆glyph对象。\n\n\n",
        "name": "glyph_clone",
        "return": {
          "type": "glyph_t*",
          "desc": "glyph对象。"
        }
      },
      {
        "params": [
          {
            "type": "glyph_t*",
            "name": "glyph",
            "desc": "glyph对象。"
          }
        ],
        "annotation": {
          "deconstructor": true
        },
        "desc": " 销毁glyph对象。\n\n\n",
        "name": "glyph_destroy",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      }
    ],
    "events": [],
    "properties": [
      {
        "name": "x",
        "desc": " x坐标。\n\n",
        "type": "int8_t",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "y",
        "desc": " y坐标。\n\n",
        "type": "int8_t",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "w",
        "desc": " 宽度。\n\n",
        "type": "uint8_t",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "h",
        "desc": " 高度。\n\n",
        "type": "uint8_t",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "advance",
        "desc": " 占位宽度。\n\n",
        "type": "int32_t",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "data",
        "desc": " 数据。\n\n",
        "type": "const uint8_t*",
        "annotation": {
          "readable": true
        }
      }
    ],
    "header": "base/font.h",
    "desc": " 代表一个字符的字模。\n\n\n",
    "name": "glyph_t",
    "level": 1
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "font_t*",
            "name": "font",
            "desc": "font对象。"
          },
          {
            "type": "font_size_t",
            "name": "font_size",
            "desc": "字体大小。"
          }
        ],
        "annotation": {},
        "desc": " 获取字体的基线。\n\n\n",
        "name": "font_get_baseline",
        "return": {
          "type": "int32_t",
          "desc": "返回字体的基线。"
        }
      },
      {
        "params": [
          {
            "type": "font_t*",
            "name": "font",
            "desc": "font对象。"
          },
          {
            "type": "const char*",
            "name": "font_name",
            "desc": "字体名称。"
          },
          {
            "type": "font_size_t",
            "name": "font_size",
            "desc": "字体大小。"
          }
        ],
        "annotation": {},
        "desc": " 检查当前字体是否与指定名称和大小相匹配。\n\n\n\n",
        "name": "font_match",
        "return": {
          "type": "int32_t",
          "desc": "返回TRUE表示成功，FALSE表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "font_t*",
            "name": "font",
            "desc": "font对象。"
          },
          {
            "type": "wchar_t",
            "name": "chr",
            "desc": "字符。"
          },
          {
            "type": "font_size_t",
            "name": "font_size",
            "desc": "字体大小。"
          },
          {
            "type": "glyph_t*",
            "name": "glyph",
            "desc": "返回字模数据。"
          }
        ],
        "annotation": {},
        "desc": " 获取指定字符和大小的字模。\n\n\n\n",
        "name": "font_get_glyph",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "font_t*",
            "name": "font",
            "desc": "font对象。"
          }
        ],
        "annotation": {
          "deconstructor": true
        },
        "desc": " 销毁font对象。\n\n\n",
        "name": "font_destroy",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      }
    ],
    "events": [],
    "properties": [],
    "header": "base/font.h",
    "desc": " 代表一种字体。\n\n\n",
    "name": "font_t",
    "level": 1
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "bitmap_t*",
            "name": "fb",
            "desc": "framebuffer对象。"
          },
          {
            "type": "rect_t*",
            "name": "dst",
            "desc": "要填充的目标区域。"
          },
          {
            "type": "color_t",
            "name": "c",
            "desc": "颜色。"
          }
        ],
        "annotation": {},
        "desc": " 用颜色填充指定的区域。\r\n\r\n",
        "name": "g2d_fill_rect",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败，返回失败则上层用软件实现。"
        }
      },
      {
        "params": [
          {
            "type": "bitmap_t*",
            "name": "fb",
            "desc": "framebuffer对象。"
          },
          {
            "type": "bitmap_t*",
            "name": "img",
            "desc": "图片对象。"
          },
          {
            "type": "rect_t*",
            "name": "src",
            "desc": "要拷贝的区域。"
          },
          {
            "type": "xy_t",
            "name": "dx",
            "desc": "目标位置的x坐标。"
          },
          {
            "type": "xy_t",
            "name": "dy",
            "desc": "目标位置的y坐标。"
          }
        ],
        "annotation": {},
        "desc": " 把图片指定的区域拷贝到framebuffer中。\r\n\r\n",
        "name": "g2d_copy_image",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败，返回失败则上层用软件实现。"
        }
      },
      {
        "params": [
          {
            "type": "bitmap_t*",
            "name": "fb",
            "desc": "framebuffer对象。"
          },
          {
            "type": "bitmap_t*",
            "name": "img",
            "desc": "图片对象。"
          },
          {
            "type": "rect_t*",
            "name": "src",
            "desc": "要旋转并拷贝的区域。"
          },
          {
            "type": "lcd_orientation_t",
            "name": "o",
            "desc": "旋转角度(一般支持90度即可)。"
          }
        ],
        "annotation": {},
        "desc": " 把图片指定的区域进行旋转并拷贝到framebuffer相应的区域，本函数主要用于辅助实现横屏和竖屏的切换，一般支持90度旋转即可。\r\n\r\n",
        "name": "g2d_copy_image",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败，返回失败则上层用软件实现。"
        }
      },
      {
        "params": [
          {
            "type": "bitmap_t*",
            "name": "fb",
            "desc": "framebuffer对象。"
          },
          {
            "type": "bitmap_t*",
            "name": "img",
            "desc": "图片对象。"
          },
          {
            "type": "rect_t*",
            "name": "dst",
            "desc": "目的区域。"
          },
          {
            "type": "rect_t*",
            "name": "src",
            "desc": "源区域。"
          },
          {
            "type": "uint8_t",
            "name": "global_alpha",
            "desc": "全局alpha。"
          }
        ],
        "annotation": {},
        "desc": " 把图片指定的区域渲染到framebuffer指定的区域，src的大小和dst的大小不一致则进行缩放。\r\n 1.硬件不支持缩放，则返回NOT_IMPL。\r\n 2.硬件不支持全局alpha，global_alpha!=0xff时返回NOT_IMPL。\r\n\r\n",
        "name": "g2d_blend_image",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败，返回失败则上层用软件实现。"
        }
      }
    ],
    "events": [],
    "properties": [],
    "header": "base/g2d.h",
    "desc": "\r\n 2D加速接口。\r\n\r\n",
    "name": "g2d_t",
    "level": 1
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "idle_func_t",
            "name": "on_idle",
            "desc": "idle回调函数，回调函数返回RET_REPEAT，则下次继续执行，否则自动移出。"
          },
          {
            "type": "void*",
            "name": "ctx",
            "desc": "idle回调函数的上下文。"
          }
        ],
        "annotation": {
          "scriptable": "custom",
          "static": true
        },
        "desc": " 增加一个idle。\n\n\n",
        "name": "idle_add",
        "return": {
          "type": "uint32_t",
          "desc": "返回idle的ID，0表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "idle_func_t",
            "name": "on_idle",
            "desc": "idle回调函数。"
          },
          {
            "type": "void*",
            "name": "ctx",
            "desc": "idle回调函数的上下文。"
          }
        ],
        "annotation": {
          "static": true
        },
        "desc": " 用于非GUI线程增加一个idle，本函数向主循环的事件队列中发送一个增加idle的请求。\n\n\n",
        "name": "idle_queue",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "uint32_t",
            "name": "idle_id",
            "desc": "idleID。"
          }
        ],
        "annotation": {
          "scriptable": true,
          "static": true
        },
        "desc": " 删除指定的idle。\n\n\n",
        "name": "idle_remove",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [],
        "annotation": {
          "private": true
        },
        "desc": " 查找指定ID的idle。\n\n\n",
        "name": "idle_find",
        "return": {
          "type": "idle_info_t*",
          "desc": "返回idle的信息。"
        }
      },
      {
        "params": [
          {
            "type": "uint32_t",
            "name": "idle_id",
            "desc": "idleID。"
          },
          {
            "type": "tk_destroy_t",
            "name": "on_destroy",
            "desc": "回调函数。"
          },
          {
            "type": "void*",
            "name": "on_destroy_ctx",
            "desc": "回调函数上下文。"
          }
        ],
        "annotation": {},
        "desc": " 设置一个回调函数，在idle被销毁时调用(方便脚本语言去释放回调函数)。\n\n\n",
        "name": "idle_set_on_destroy",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [],
        "annotation": {
          "private": true
        },
        "desc": " 调用全部idle的函数。\n\n\n",
        "name": "idle_dispatch",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [],
        "annotation": {
          "static": true
        },
        "desc": " 返回idle的个数。\n\n\n",
        "name": "idle_count",
        "return": {
          "type": "uint32_t",
          "desc": "返回idle的个数。"
        }
      }
    ],
    "events": [],
    "properties": [],
    "header": "base/idle.h",
    "desc": "\n idle可以看作是duration为0的定时器，不同的是idle函数在主循环中paint之后执行。\n\n > idle可以用来实现一些异步处理。\n\n 示例：\n\n ```c\n static ret_t something_on_idle(const idle_info_t* info) {\n   widget_t* widget = WIDGET(info->ctx);\n   edit_t* edit = EDIT(widget);\n   ...\n   return RET_REMOVE;\n }\n\n ...\n\n idle_add(something_on_idle, edit);\n\n ```\n\n > 在非GUI线程请用idle\\_queue。\n\n\n",
    "name": "idle_t",
    "annotation": {
      "scriptable": true,
      "fake": true
    },
    "level": 1
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "image_loader_t*",
            "name": "loader",
            "desc": "loader对象。"
          },
          {
            "type": "const asset_info_t*",
            "name": "asset",
            "desc": "资源。"
          },
          {
            "type": "bitmap_t*",
            "name": "bitmap",
            "desc": "用于返回位图对象。"
          }
        ],
        "annotation": {},
        "desc": " 加载图片。\n\n",
        "name": "image_loader_load",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      }
    ],
    "events": [],
    "properties": [],
    "header": "base/image_loader.h",
    "desc": " 图片加载接口。\n\n",
    "name": "image_loader_t",
    "level": 1
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [],
        "annotation": {
          "constructor": true,
          "scriptable": true
        },
        "desc": " 获取缺省的图片管理器。\n\n",
        "name": "image_manager",
        "alias": "image_manager_instance",
        "return": {
          "type": "image_manager_t*",
          "desc": "返回图片管理器对象。"
        }
      },
      {
        "params": [
          {
            "type": "image_manager_t*",
            "name": "imm",
            "desc": "图片管理器对象。"
          }
        ],
        "annotation": {},
        "desc": " 设置缺省的图片管理器。\n\n\n",
        "name": "image_manager_set",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "image_loader_t*",
            "name": "loader",
            "desc": "图片加载器。"
          }
        ],
        "annotation": {
          "constructor": true
        },
        "desc": " 创建图片管理器。\n\n\n",
        "name": "image_manager_create",
        "return": {
          "type": "image_manager_t*",
          "desc": "返回图片管理器对象。"
        }
      },
      {
        "params": [
          {
            "type": "image_manager_t*",
            "name": "imm",
            "desc": "图片管理器对象。"
          },
          {
            "type": "image_loader_t*",
            "name": "loader",
            "desc": "图片加载器。"
          }
        ],
        "annotation": {
          "constructor": true
        },
        "desc": " 初始化图片管理器。\n\n\n",
        "name": "image_manager_init",
        "return": {
          "type": "image_manager_t*",
          "desc": "返回图片管理器对象。"
        }
      },
      {
        "params": [
          {
            "type": "image_manager_t*",
            "name": "imm",
            "desc": "图片管理器对象。"
          },
          {
            "type": "char*",
            "name": "name",
            "desc": "图片名称。"
          },
          {
            "type": "bitmap_t*",
            "name": "image",
            "desc": "用于返回图片。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 获取指定的图片。\n 先从缓存查找，如果没找到，再加载并缓存。\n\n\n\n",
        "name": "image_manager_get_bitmap",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "image_manager_t*",
            "name": "imm",
            "desc": "图片管理器对象。"
          },
          {
            "type": "uint32_t",
            "name": "time_delta_s",
            "desc": "时间范围，单位为秒。"
          }
        ],
        "annotation": {},
        "desc": " 从图片管理器中卸载指定时间内没有使用的图片。\n\n\n",
        "name": "image_manager_unload_unused",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "image_manager_t*",
            "name": "imm",
            "desc": "图片管理器对象。"
          },
          {
            "type": "bitmap_t*",
            "name": "image",
            "desc": "返回图片信息。"
          }
        ],
        "annotation": {},
        "desc": " 更新缓存中图片的specific信息。\n\n\n",
        "name": "image_manager_update_specific",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "image_manager_t*",
            "name": "imm",
            "desc": "图片管理器对象。"
          },
          {
            "type": "assets_manager_t*",
            "name": "assets_manager",
            "desc": "资源管理器。"
          }
        ],
        "annotation": {},
        "desc": " 设置资源管理器对象。\n\n 之所以需要设置资源管理器对象，而不是使用缺省的资源管理器对象，是因为在designer中有两个图片管理器：\n\n * 一个用于designer本身加载图片。\n\n * 一个用于被设计的窗口加载图片。\n\n这两个图片管理器需要从不同的路径加载资源。\n\n\n\n",
        "name": "image_manager_set_assets_manager",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "image_manager_t*",
            "name": "imm",
            "desc": "图片管理器对象。"
          }
        ],
        "annotation": {},
        "desc": " 析构图片管理器。\n\n\n",
        "name": "image_manager_deinit",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "image_manager_t*",
            "name": "imm",
            "desc": "图片管理器对象。"
          }
        ],
        "annotation": {},
        "desc": " 析构并释放图片管理器。\n\n\n",
        "name": "image_manager_destroy",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      }
    ],
    "events": [],
    "properties": [
      {
        "name": "images",
        "desc": " 缓存的图片。\n\n",
        "type": "darray_t",
        "annotation": {
          "private": true
        }
      },
      {
        "name": "loader",
        "desc": " 图片加载器。\n\n",
        "type": "image_loader_t*",
        "annotation": {
          "private": true
        }
      },
      {
        "name": "assets_manager",
        "desc": " 资源管理器。\n\n",
        "type": "assets_manager_t*",
        "annotation": {
          "private": true
        }
      }
    ],
    "header": "base/image_manager.h",
    "desc": " 图片管理器。负责加载，解码和缓存图片。\n\n",
    "name": "image_manager_t",
    "annotation": {
      "scriptable": true
    },
    "level": 1
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "input_device_status_t*",
            "name": "ids",
            "desc": "输入设备状态管理器对象。"
          }
        ],
        "annotation": {
          "constructor": true
        },
        "desc": " 初始化输入设备状态管理器。\r\n\r\n",
        "name": "input_device_status_init",
        "return": {
          "type": "input_device_status_t*",
          "desc": "返回输入设备状态管理器对象。"
        }
      },
      {
        "params": [
          {
            "type": "input_device_status_t*",
            "name": "ids",
            "desc": "输入设备状态管理器对象。"
          },
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "窗口管理器对象。"
          },
          {
            "type": "event_t*",
            "name": "e",
            "desc": "事件对象。"
          }
        ],
        "annotation": {},
        "desc": " 对输入事件进行处理，然后分发给widget。\r\n\r\n",
        "name": "input_device_status_on_input_event",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      }
    ],
    "events": [],
    "properties": [],
    "header": "base/input_device_status.h",
    "desc": " 输入设备状态管理器。本类仅供窗口管理器内部使用。\r\n",
    "name": "input_device_status_t",
    "level": 1
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [],
        "annotation": {
          "constructor": true
        },
        "desc": " 创建输入法引擎对象。\n\n\n",
        "name": "input_engine_create",
        "return": {
          "type": "input_engine_t*",
          "desc": "返回输入法引擎对象。"
        }
      },
      {
        "params": [
          {
            "type": "input_engine_t*",
            "name": "engine",
            "desc": "输入法引擎对象。"
          }
        ],
        "annotation": {
          "deconstructor": true
        },
        "desc": " 销毁输入法引擎对象。\n\n\n",
        "name": "input_engine_destroy",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "input_engine_t*",
            "name": "engine",
            "desc": "输入法引擎对象。"
          }
        ],
        "annotation": {},
        "desc": " 清除所有输入的按键组合和候选字。\n\n\n",
        "name": "input_engine_reset_input",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "input_engine_t*",
            "name": "engine",
            "desc": "输入法引擎对象。"
          },
          {
            "type": "int",
            "name": "key",
            "desc": "键值。"
          }
        ],
        "annotation": {},
        "desc": " 输入新的按键，并更新候选字。\n\n\n",
        "name": "input_engine_input",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      }
    ],
    "events": [],
    "properties": [
      {
        "name": "keys",
        "desc": " 当前的按键组合。\n\n",
        "type": "str_t",
        "annotation": {
          "private": true
        }
      },
      {
        "name": "candidates",
        "desc": " 当前按键组合对应的候选字列表。\n\n",
        "type": "char*",
        "annotation": {
          "private": true
        }
      },
      {
        "name": "candidates_nr",
        "desc": " 当前按键组合对应的候选字/词个数。\n\n",
        "type": "uint32_t",
        "annotation": {
          "private": true
        }
      }
    ],
    "header": "base/input_engine.h",
    "desc": " 输入法引擎接口。\n\n 常见的实现方式有以下几种：\n\n * 空实现。用于不需要输入法的嵌入式平台。\n\n * 拼音输入法实现。用于需要输入法的嵌入式平台。\n\n ```graphviz\n [default_style]\n\n input_engine_pinyin_t -> input_engine_t[arrowhead=empty style=dashed]\n input_engine_null_t -> input_engine_t[arrowhead=empty style=dashed]\n\n ```\n\n",
    "name": "input_engine_t",
    "level": 1
  },
  {
    "type": "enum",
    "desc": " 输入类型常量定义。\n\n",
    "consts": [
      {
        "desc": " 文本。\n\n",
        "name": "INPUT_TEXT"
      },
      {
        "desc": " 整数。\n\n",
        "name": "INPUT_INT"
      },
      {
        "desc": " 非负整数。\n\n",
        "name": "INPUT_UINT"
      },
      {
        "desc": " 16进制整数。\n\n",
        "name": "INPUT_HEX"
      },
      {
        "desc": " 浮点数。\n\n",
        "name": "INPUT_FLOAT"
      },
      {
        "desc": " 非负浮点数。\n\n",
        "name": "INPUT_UFLOAT"
      },
      {
        "desc": " 邮件地址。\n\n",
        "name": "INPUT_EMAIL"
      },
      {
        "desc": " 密码。\n\n",
        "name": "INPUT_PASSWORD"
      },
      {
        "desc": " 电话号码。\n\n",
        "name": "INPUT_PHONE"
      },
      {
        "desc": " 使用自定义的软键盘(如计算器等应用不希望弹出系统软键盘)。\n\n",
        "name": "INPUT_CUSTOM"
      }
    ],
    "header": "base/input_method.h",
    "name": "input_type_t",
    "prefix": "INPUT_",
    "annotation": {
      "scriptable": true
    },
    "level": 1
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "input_method_t*",
            "name": "im",
            "desc": "控件对象。"
          },
          {
            "type": "event_t*",
            "name": "e",
            "desc": "事件。"
          }
        ],
        "annotation": {},
        "desc": " 分发一个事件。\n\n\n",
        "name": "input_method_dispatch",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "input_method_t*",
            "name": "im",
            "desc": "控件对象。"
          },
          {
            "type": "event_t*",
            "name": "e",
            "desc": "事件。"
          }
        ],
        "annotation": {},
        "desc": " 分发一个事件当前焦点控件。\n\n\n",
        "name": "input_method_dispatch_to_widget",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "input_method_t*",
            "name": "im",
            "desc": "输入法对象。"
          },
          {
            "type": "event_type_t",
            "name": "type",
            "desc": "事件类型。"
          },
          {
            "type": "event_func_t",
            "name": "on_event",
            "desc": "事件处理函数。"
          },
          {
            "type": "void*",
            "name": "ctx",
            "desc": "事件处理函数上下文。"
          }
        ],
        "annotation": {},
        "desc": " 注册指定事件的处理函数。\n\n\n",
        "name": "input_method_on",
        "return": {
          "type": "uint32_t",
          "desc": "返回id，用于input_method_off。"
        }
      },
      {
        "params": [
          {
            "type": "input_method_t*",
            "name": "im",
            "desc": "输入法对象。"
          },
          {
            "type": "uint32_t",
            "name": "id",
            "desc": "input_method_on返回的ID。"
          }
        ],
        "annotation": {},
        "desc": " 注销指定事件的处理函数。\n\n\n",
        "name": "input_method_off",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "input_method_t*",
            "name": "im",
            "desc": "输入法对象。"
          },
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "焦点控件，为NULL时关闭输入法，非NULL时打开输入法。"
          }
        ],
        "annotation": {},
        "desc": " 打开或关闭输入法。\n\n\n",
        "name": "input_method_request",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "input_method_t*",
            "name": "im",
            "desc": "输入法对象。"
          },
          {
            "type": "char*",
            "name": "text",
            "desc": "按钮的文本。"
          },
          {
            "type": "bool_t",
            "name": "enable",
            "desc": "按钮的是否可用。"
          }
        ],
        "annotation": {},
        "desc": " 设置软键盘上的action按钮的信息。\n\n\n",
        "name": "input_method_update_action_button_info",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "input_method_t*",
            "name": "im",
            "desc": "输入法对象。"
          }
        ],
        "annotation": {},
        "desc": " 软键盘上的action按钮被点击时，调用本函数分发EVT_IM_ACTION事件。\n\n\n",
        "name": "input_method_dispatch_action",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "input_method_t*",
            "name": "im",
            "desc": "输入法对象。"
          },
          {
            "type": "char*",
            "name": "text",
            "desc": "文本。"
          }
        ],
        "annotation": {},
        "desc": " 提交输入文本。\n\n\n",
        "name": "input_method_commit_text",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "input_method_t*",
            "name": "im",
            "desc": "输入法对象。"
          },
          {
            "type": "uint32_t",
            "name": "key",
            "desc": "键值。"
          }
        ],
        "annotation": {},
        "desc": " 提交按键。\n\n\n",
        "name": "input_method_dispatch_key",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "input_method_t*",
            "name": "im",
            "desc": "输入法对象。"
          },
          {
            "type": "char*",
            "name": "strs",
            "desc": "候选字列表。"
          },
          {
            "type": "uint32_t",
            "name": "nr",
            "desc": "候选字个数。"
          }
        ],
        "annotation": {},
        "desc": " 请求显示候选字。\n\n\n",
        "name": "input_method_dispatch_candidates",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [],
        "annotation": {},
        "desc": " 创建输入法对象。在具体实现中实现。\n\n\n",
        "name": "input_method_create",
        "return": {
          "type": "input_method_t*",
          "desc": "成功返回输入法对象，失败返回NULL。"
        }
      },
      {
        "params": [
          {
            "type": "input_method_t*",
            "name": "im",
            "desc": "输入法对象。"
          }
        ],
        "annotation": {},
        "desc": " 销毁输入法对象。在具体实现中实现。\n\n\n",
        "name": "input_method_destroy",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [],
        "annotation": {},
        "desc": " 获取全局输入法对象。\n\n\n",
        "name": "input_method",
        "return": {
          "type": "input_method_t*",
          "desc": "成功返回输入法对象，失败返回NULL。"
        }
      },
      {
        "params": [
          {
            "type": "input_method_t*",
            "name": "im",
            "desc": "输入法对象。"
          }
        ],
        "annotation": {},
        "desc": " 设置全局输入法对象。\n\n\n",
        "name": "input_method_set",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      }
    ],
    "events": [],
    "properties": [
      {
        "name": "widget",
        "desc": " 当前的焦点控件。\n\n",
        "type": "widget_t*",
        "annotation": {
          "private": true
        }
      },
      {
        "name": "keyboard",
        "desc": " 当前的软件键盘。\n\n",
        "type": "widget_t*",
        "annotation": {
          "private": true
        }
      },
      {
        "name": "win",
        "desc": " 当前的窗口。\n\n",
        "type": "widget_t*",
        "annotation": {
          "private": true
        }
      },
      {
        "name": "win_delta_y",
        "desc": " 由于软键盘的弹出，可能会将窗口向上推移，win_delta_y为推移的距离。\n\n",
        "type": "int32_t",
        "annotation": {
          "private": true
        }
      },
      {
        "name": "action_button_enable",
        "desc": " 软键盘的上的action按钮是否可用。\n\n",
        "type": "bool_t",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "action_button_enable",
        "desc": " 软键盘的上的action按钮文本。\n\n",
        "type": "bool_t",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "emitter",
        "desc": " emitter。用于实现dispatch/on/off等功能。\n\n",
        "type": "emitter_t",
        "annotation": {
          "private": true
        }
      },
      {
        "name": "input_type",
        "desc": " 当前输入的类型。\n\n",
        "type": "input_type_t",
        "annotation": {
          "readable": true
        }
      }
    ],
    "header": "base/input_method.h",
    "desc": " 输入法接口。\n\n 常见的实现方式有以下几种：\n\n * 空实现。用于不需要输入法的嵌入式平台。\n\n * 缺省实现。用于需要输入法的嵌入式平台。\n\n * 基于SDL实现的平台原生输入法。用于桌面系统和手机系统。\n\n ```graphviz\n  [default_style]\n\n  input_method_default_t -> input_method_t [arrowhead=empty style=dashed]\n  input_method_sdl_t -> input_method_t [arrowhead=empty style=dashed]\n  input_method_null_t -> input_method_t [arrowhead=empty style=dashed]\n\n ```\n\n > 输入类型请参考：[input\\_type](input_type_t.md)\n\n\n",
    "name": "input_method_t",
    "level": 1
  },
  {
    "type": "enum",
    "desc": " LCD绘制模式常量定义。\r\n",
    "consts": [
      {
        "desc": " 正常绘制。\r\n",
        "name": "LCD_DRAW_NORMAL"
      },
      {
        "desc": " 绘制窗口动画，两个窗口无重叠。\r\n 在该模式下，可以直接绘制到显存，不用绘制到framebuffer中。\r\n",
        "name": "LCD_DRAW_ANIMATION"
      },
      {
        "desc": " 绘制窗口动画，两个窗口有重叠。\r\n (目前无特殊用途)。\r\n",
        "name": "LCD_DRAW_ANIMATION_OVERLAP"
      },
      {
        "desc": " 如果lcd支持swap操作，在特殊情况下，可以使用该模式提速。\r\n",
        "name": "LCD_DRAW_SWAP"
      },
      {
        "desc": " 离线模式绘制(仅适用于framebuffer)。\r\n 在该模式下，绘制的内容不会显示出来，但可以用take_snapshot取出来，主要用于窗口动画。\r\n",
        "name": "LCD_DRAW_OFFLINE"
      }
    ],
    "header": "base/lcd.h",
    "name": "lcd_draw_mode_t",
    "prefix": "LCD_DRAW_",
    "level": 1
  },
  {
    "type": "enum",
    "desc": " LCD类型常量定义。\r\n",
    "consts": [
      {
        "desc": " 基于FrameBuffer的LCD。\r\n",
        "name": "LCD_FRAMEBUFFER"
      },
      {
        "desc": " 基于寄存器的LCD。\r\n",
        "name": "LCD_REGISTER"
      },
      {
        "desc": " 基于VGCANVS的LCD。仅在支持OpenGL时，用nanovg实现。\r\n",
        "name": "LCD_VGCANVAS"
      }
    ],
    "header": "base/lcd.h",
    "name": "lcd_type_t",
    "prefix": "LCD_",
    "level": 1
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "lcd_t*",
            "name": "lcd",
            "desc": "lcd对象。"
          },
          {
            "type": "rect_t*",
            "name": "dirty_rect",
            "desc": "需要绘制的区域。"
          },
          {
            "type": "bool_t",
            "name": "anim_mode",
            "desc": "动画模式，如果可能，直接画到显存而不是离线的framebuffer。"
          }
        ],
        "annotation": {},
        "desc": " 准备绘制。\r\n\r\n",
        "name": "lcd_begin_frame",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "lcd_t*",
            "name": "lcd",
            "desc": "lcd对象。"
          },
          {
            "type": "rect_t*",
            "name": "rect",
            "desc": "裁剪区域。"
          }
        ],
        "annotation": {},
        "desc": " 设置裁剪区域。\r\n\r\n",
        "name": "lcd_set_clip_rect",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "lcd_t*",
            "name": "lcd",
            "desc": "lcd对象。"
          },
          {
            "type": "rect_t*",
            "name": "rect",
            "desc": "裁剪区域。"
          }
        ],
        "annotation": {},
        "desc": " 获取裁剪区域。\r\n\r\n",
        "name": "lcd_get_clip_rect",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "lcd_t*",
            "name": "lcd",
            "desc": "lcd对象。"
          },
          {
            "type": "wh_t",
            "name": "w",
            "desc": "新的宽度。"
          },
          {
            "type": "wh_t",
            "name": "h",
            "desc": "新的高度。"
          },
          {
            "type": "uint32_t",
            "name": "line_length",
            "desc": "line_length。"
          }
        ],
        "annotation": {},
        "desc": " 基于SDL的PC软件，在SDL窗口resize时，需要调用本函数resize lcd。\r\n 屏幕旋转时会调用本函数，调整LCD的大小。\r\n\r\n",
        "name": "lcd_resize",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "lcd_t*",
            "name": "lcd",
            "desc": "lcd对象。"
          },
          {
            "type": "uint8_t",
            "name": "alpha",
            "desc": "全局alpha。"
          }
        ],
        "annotation": {},
        "desc": " 设置全局alpha。\r\n\r\n",
        "name": "lcd_set_global_alpha",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "lcd_t*",
            "name": "lcd",
            "desc": "lcd对象。"
          },
          {
            "type": "color_t",
            "name": "color",
            "desc": "颜色。"
          }
        ],
        "annotation": {},
        "desc": " 设置文本颜色。\r\n\r\n",
        "name": "lcd_set_text_color",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "lcd_t*",
            "name": "lcd",
            "desc": "lcd对象。"
          },
          {
            "type": "color_t",
            "name": "color",
            "desc": "颜色。"
          }
        ],
        "annotation": {},
        "desc": " 设置线条颜色。\r\n\r\n",
        "name": "lcd_set_stroke_color",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "lcd_t*",
            "name": "lcd",
            "desc": "lcd对象。"
          },
          {
            "type": "color_t",
            "name": "color",
            "desc": "颜色。"
          }
        ],
        "annotation": {},
        "desc": " 设置填充颜色。\r\n\r\n",
        "name": "lcd_set_fill_color",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "lcd_t*",
            "name": "lcd",
            "desc": "lcd对象。"
          },
          {
            "type": "const char*",
            "name": "name",
            "desc": "字体名称。"
          }
        ],
        "annotation": {},
        "desc": " 设置字体名称。\r\n\r\n",
        "name": "lcd_set_font_name",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "lcd_t*",
            "name": "lcd",
            "desc": "lcd对象。"
          },
          {
            "type": "uint32_t",
            "name": "font_size",
            "desc": "字体大小。"
          }
        ],
        "annotation": {},
        "desc": " 设置字体大小。\r\n\r\n",
        "name": "lcd_set_font_size",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "lcd_t*",
            "name": "lcd",
            "desc": "lcd对象。"
          },
          {
            "type": "xy_t*",
            "name": "x",
            "desc": "x坐标。"
          },
          {
            "type": "xy_t*",
            "name": "y",
            "desc": "y坐标。"
          },
          {
            "type": "xy_t*",
            "name": "h",
            "desc": "直线高度。"
          }
        ],
        "annotation": {},
        "desc": " 绘制一条垂直线。\r\n\r\n",
        "name": "lcd_draw_vline",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "lcd_t*",
            "name": "lcd",
            "desc": "lcd对象。"
          },
          {
            "type": "xy_t*",
            "name": "x",
            "desc": "x坐标。"
          },
          {
            "type": "xy_t*",
            "name": "y",
            "desc": "y坐标。"
          },
          {
            "type": "xy_t*",
            "name": "w",
            "desc": "直线宽度。"
          }
        ],
        "annotation": {},
        "desc": " 绘制一条水平线。\r\n\r\n",
        "name": "lcd_draw_hline",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "lcd_t*",
            "name": "lcd",
            "desc": "lcd对象。"
          },
          {
            "type": "point_t*",
            "name": "points",
            "desc": "要绘制的点集合。"
          },
          {
            "type": "uint32_t",
            "name": "nr",
            "desc": "点的个数。"
          }
        ],
        "annotation": {},
        "desc": " 绘制一组点。\r\n\r\n",
        "name": "lcd_draw_points",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "lcd_t*",
            "name": "lcd",
            "desc": "lcd对象。"
          },
          {
            "type": "xy_t",
            "name": "x",
            "desc": "x坐标。"
          },
          {
            "type": "xy_t",
            "name": "y",
            "desc": "y坐标。"
          }
        ],
        "annotation": {},
        "desc": " 获取指定点的颜色，对于基于非FrameBuffer的LCD，返回当前的fill_color。\r\n\r\n",
        "name": "lcd_get_point_color_t",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "lcd_t*",
            "name": "lcd",
            "desc": "lcd对象。"
          },
          {
            "type": "xy_t",
            "name": "x",
            "desc": "x坐标。"
          },
          {
            "type": "xy_t",
            "name": "y",
            "desc": "y坐标。"
          },
          {
            "type": "wh_t",
            "name": "w",
            "desc": "宽度。"
          },
          {
            "type": "wh_t",
            "name": "h",
            "desc": "高度。"
          }
        ],
        "annotation": {},
        "desc": " 绘制实心矩形。\r\n\r\n",
        "name": "lcd_fill_rect",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "lcd_t*",
            "name": "lcd",
            "desc": "lcd对象。"
          },
          {
            "type": "xy_t",
            "name": "x",
            "desc": "x坐标。"
          },
          {
            "type": "xy_t",
            "name": "y",
            "desc": "y坐标。"
          },
          {
            "type": "wh_t",
            "name": "w",
            "desc": "宽度。"
          },
          {
            "type": "wh_t",
            "name": "h",
            "desc": "高度。"
          }
        ],
        "annotation": {},
        "desc": " 绘制矩形。\r\n\r\n",
        "name": "lcd_stroke_rect",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "lcd_t*",
            "name": "lcd",
            "desc": "lcd对象。"
          },
          {
            "type": "glyph_t*",
            "name": "glyph",
            "desc": "字模"
          },
          {
            "type": "rect_t*",
            "name": "src",
            "desc": "只绘制指定区域的部分。"
          },
          {
            "type": "xy_t",
            "name": "x",
            "desc": "x坐标。"
          },
          {
            "type": "xy_t",
            "name": "y",
            "desc": "y坐标。"
          }
        ],
        "annotation": {},
        "desc": " 绘制字符。如果实现了measure_text/draw_text则不需要实现本函数。\r\n\r\n",
        "name": "lcd_draw_glyph",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "lcd_t*",
            "name": "lcd",
            "desc": "lcd对象。"
          },
          {
            "type": "const wchar_t*",
            "name": "str",
            "desc": "字符串。"
          },
          {
            "type": "uint32_t",
            "name": "nr",
            "desc": "字符数。"
          }
        ],
        "annotation": {},
        "desc": " 测量字符串占用的宽度。\r\n\r\n",
        "name": "lcd_measure_text",
        "return": {
          "type": "float_t",
          "desc": "返回字符串占用的宽度。"
        }
      },
      {
        "params": [
          {
            "type": "lcd_t*",
            "name": "lcd",
            "desc": "lcd对象。"
          },
          {
            "type": "const wchar_t*",
            "name": "str",
            "desc": "字符串。"
          },
          {
            "type": "uint32_t",
            "name": "nr",
            "desc": "字符数。"
          },
          {
            "type": "xy_t",
            "name": "x",
            "desc": "x坐标。"
          },
          {
            "type": "xy_t",
            "name": "y",
            "desc": "y坐标。"
          }
        ],
        "annotation": {},
        "desc": " 绘制字符。\r\n\r\n",
        "name": "lcd_draw_text",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "lcd_t*",
            "name": "lcd",
            "desc": "lcd对象。"
          },
          {
            "type": "bitmap_t*",
            "name": "img",
            "desc": "图片。"
          },
          {
            "type": "rect_t*",
            "name": "src",
            "desc": "只绘制指定区域的部分。"
          },
          {
            "type": "rect_t*",
            "name": "dst",
            "desc": "绘制到目标区域。"
          }
        ],
        "annotation": {},
        "desc": " 绘制图片。\r\n\r\n",
        "name": "lcd_draw_image",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "lcd_t*",
            "name": "lcd",
            "desc": "lcd对象。"
          },
          {
            "type": "draw_image_info_t*",
            "name": "info",
            "desc": "绘制参数。"
          }
        ],
        "annotation": {},
        "desc": " 绘制图片。\r\n\r\n",
        "name": "lcd_draw_image_matrix",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "lcd_t*",
            "name": "lcd",
            "desc": "lcd对象。"
          }
        ],
        "annotation": {},
        "desc": " 获取矢量图canvas。\r\n\r\n",
        "name": "lcd_get_vgcanvas",
        "return": {
          "type": "vgcanvas_t*",
          "desc": "返回矢量图canvas。"
        }
      },
      {
        "params": [
          {
            "type": "lcd_t*",
            "name": "lcd",
            "desc": "lcd对象。"
          },
          {
            "type": "bitmap_t*",
            "name": "img",
            "desc": "返回快照图片。"
          },
          {
            "type": "bool_t",
            "name": "auto_rotate",
            "desc": "是否根据LCD实际方向自动旋转。"
          }
        ],
        "annotation": {},
        "desc": " 拍摄快照，一般用于窗口动画，只有framebuffer模式，才支持。\r\n\r\n",
        "name": "lcd_take_snapshot",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "lcd_t*",
            "name": "lcd",
            "desc": "lcd对象。"
          }
        ],
        "annotation": {
          "private": true
        },
        "desc": " 对于double fb，如果硬件支持swap，在LCD_DRAW_SWAP模式下，该函数用于切换fb。\r\n\r\n",
        "name": "lcd_swap",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "lcd_t*",
            "name": "lcd",
            "desc": "lcd对象。"
          }
        ],
        "annotation": {
          "private": true
        },
        "desc": " flush。\r\n\r\n",
        "name": "lcd_flush",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "lcd_t*",
            "name": "lcd",
            "desc": "lcd对象。"
          }
        ],
        "annotation": {},
        "desc": " 判读lcd是否支持swap。\r\n\r\n",
        "name": "lcd_is_swappable",
        "return": {
          "type": "bool_t",
          "desc": "返回是否支持swap。"
        }
      },
      {
        "params": [
          {
            "type": "lcd_t*",
            "name": "lcd",
            "desc": "lcd对象。"
          }
        ],
        "annotation": {},
        "desc": " 完成绘制，同步到显示设备。\r\n\r\n",
        "name": "lcd_end_frame",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      }
    ],
    "events": [],
    "properties": [
      {
        "name": "w",
        "desc": " 屏幕的宽度\r\n",
        "type": "wh_t",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "height",
        "desc": " 屏幕的高度\r\n",
        "type": "wh_t",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "global_alpha",
        "desc": " 全局alpha\r\n",
        "type": "uint8_t",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "text_color",
        "desc": " 文本颜色\r\n",
        "type": "color_t",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "fill_color",
        "desc": " 填充颜色\r\n",
        "type": "color_t",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "stroke_color",
        "desc": " 线条颜色\r\n",
        "type": "color_t",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "font_name",
        "desc": " 字体名称。\r\n",
        "type": "char*",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "font_size",
        "desc": " 字体大小。\r\n",
        "type": "uint32_t",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "draw_mode",
        "desc": " 绘制模式。\r\n",
        "type": "lcd_draw_mode_t",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "type",
        "desc": " LCD的类型。\r\n",
        "type": "lcd_type_t",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "ratio",
        "desc": " 屏幕密度。\r\n",
        "type": "float_t",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "support_dirty_rect",
        "desc": " 是否支持脏矩形。\r\n",
        "type": "bool_t",
        "annotation": {
          "readable": true
        }
      }
    ],
    "header": "base/lcd.h",
    "desc": " 显示设备抽象基类。\r\n",
    "name": "lcd_t",
    "level": 1
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [],
        "annotation": {
          "constructor": true,
          "scriptable": true
        },
        "desc": " 获取缺省locale_info。\n\n\n",
        "name": "locale_info",
        "alias": "locale_info_instance",
        "return": {
          "type": "locale_info_t*",
          "desc": "返回locale_info对象。"
        }
      },
      {
        "params": [
          {
            "type": "locale_info_t*",
            "name": "locale_info",
            "desc": "locale_info对象。"
          }
        ],
        "annotation": {},
        "desc": " 设置缺省locale_info。\n\n\n",
        "name": "locale_info_set",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "char*",
            "name": "language",
            "desc": "语言。"
          },
          {
            "type": "char*",
            "name": "country",
            "desc": "国家或地区。"
          }
        ],
        "annotation": {
          "constructor": true
        },
        "desc": " 创建locale_info。\n\n\n",
        "name": "locale_info_create",
        "return": {
          "type": "locale_info_t*",
          "desc": "返回locale_info对象。"
        }
      },
      {
        "params": [
          {
            "type": "locale_info_t*",
            "name": "locale_info",
            "desc": "locale_info对象。"
          },
          {
            "type": "char*",
            "name": "language",
            "desc": "语言。"
          },
          {
            "type": "char*",
            "name": "country",
            "desc": "国家或地区。"
          }
        ],
        "annotation": {
          "constructor": true
        },
        "desc": " 初始化locale_info。\n\n\n",
        "name": "locale_info_init",
        "return": {
          "type": "locale_info_t*",
          "desc": "返回locale_info对象。"
        }
      },
      {
        "params": [
          {
            "type": "locale_info_t*",
            "name": "locale_info",
            "desc": "locale_info对象。"
          },
          {
            "type": "char*",
            "name": "text",
            "desc": "待翻译的文本。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 翻译字符串。\n\n\n",
        "name": "locale_info_tr",
        "return": {
          "type": "char*",
          "desc": "返回翻译之后的字符串。"
        }
      },
      {
        "params": [
          {
            "type": "locale_info_t*",
            "name": "locale_info",
            "desc": "locale_info对象。"
          },
          {
            "type": "char*",
            "name": "language",
            "desc": "语言。"
          },
          {
            "type": "char*",
            "name": "country",
            "desc": "国家或地区。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 设置当前的国家和语言。\n\n\n",
        "name": "locale_info_change",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "locale_info_t*",
            "name": "locale_info",
            "desc": "控件对象。"
          },
          {
            "type": "event_type_t",
            "name": "type",
            "desc": "事件类型，目前固定为EVT_LOCALE_CHANGED。"
          },
          {
            "type": "event_func_t",
            "name": "on_event",
            "desc": "事件处理函数。"
          },
          {
            "type": "void*",
            "name": "ctx",
            "desc": "事件处理函数上下文。"
          }
        ],
        "annotation": {
          "scriptable": "custom"
        },
        "desc": " 注册指定事件的处理函数。\n\n\n",
        "name": "locale_info_on",
        "return": {
          "type": "uint32_t",
          "desc": "返回id，用于locale_info_off。"
        }
      },
      {
        "params": [
          {
            "type": "locale_info_t*",
            "name": "locale_info",
            "desc": "控件对象。"
          },
          {
            "type": "uint32_t",
            "name": "id",
            "desc": "locale_info_on返回的ID。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 注销指定事件的处理函数。\n\n\n",
        "name": "locale_info_off",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "locale_info_t*",
            "name": "locale_info",
            "desc": "locale_info对象。"
          }
        ],
        "annotation": {},
        "desc": " 释放全部资源。\n\n\n",
        "name": "locale_info_deinit",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "locale_info_t*",
            "name": "locale_info",
            "desc": "locale_info对象。"
          }
        ],
        "annotation": {},
        "desc": " 释放全部资源并销毁locale_info对象。\n\n\n",
        "name": "locale_info_destroy",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      }
    ],
    "events": [],
    "properties": [
      {
        "name": "country;",
        "desc": " 国家或地区。如：CN\n\n",
        "type": "char*",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "language",
        "desc": " 语言。如：zh\n\n",
        "type": "char*",
        "annotation": {
          "readable": true
        }
      }
    ],
    "header": "base/locale_info.h",
    "desc": " 本地化信息。提供字符串翻译数据管理，当前语言改变的事件通知等等。\n\n\n",
    "name": "locale_info_t",
    "annotation": {
      "scriptable": true
    },
    "level": 1
  },
  {
    "params": [],
    "annotation": {
      "global": true
    },
    "desc": " 根据参数创建layouter对象。\n\n\n",
    "name": "self_layouter_create",
    "return": {
      "type": "self_layouter_t*",
      "desc": "返回layouter对象。"
    },
    "type": "method",
    "header": "base/self_layouter_factory.h",
    "level": 1
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "self_layouter_t*",
            "name": "layouter",
            "desc": "layouter对象。"
          }
        ],
        "annotation": {},
        "desc": " 获取全部参数。\n\n\n",
        "name": "self_layouter_to_string",
        "return": {
          "type": "ret_t",
          "desc": "返回字符串格式的参数。"
        }
      },
      {
        "params": [
          {
            "type": "self_layouter_t*",
            "name": "layouter",
            "desc": "layouter对象。"
          },
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件。"
          },
          {
            "type": "rect_t*",
            "name": "area",
            "desc": "可以使用的区域。"
          }
        ],
        "annotation": {},
        "desc": " 对控件自身进行布局。\n\n\n",
        "name": "self_layouter_layout",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "self_layouter_t*",
            "name": "layouter",
            "desc": "layouter对象。"
          },
          {
            "type": "const char*",
            "name": "name",
            "desc": "参数名。"
          },
          {
            "type": "value_t*",
            "name": "v",
            "desc": "返回参数的值。"
          }
        ],
        "annotation": {},
        "desc": " 获取指定的参数。\n\n\n",
        "name": "self_layouter_get_param",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "self_layouter_t*",
            "name": "layouter",
            "desc": "layouter对象。"
          },
          {
            "type": "const char*",
            "name": "name",
            "desc": "参数名。"
          },
          {
            "type": "const value_t*",
            "name": "v",
            "desc": "参数的值。"
          }
        ],
        "annotation": {},
        "desc": " 获取指定的参数。\n\n\n",
        "name": "self_layouter_set_param",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "self_layouter_t*",
            "name": "layouter",
            "desc": "layouter对象。"
          },
          {
            "type": "const char*",
            "name": "name",
            "desc": "参数名。"
          },
          {
            "type": "const char*",
            "name": "value",
            "desc": "参数值。"
          }
        ],
        "annotation": {},
        "desc": " 设置字符串格式的参数。\n\n\n",
        "name": "self_layouter_set_param_str",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "self_layouter_t*",
            "name": "layouter",
            "desc": "layouter对象。"
          },
          {
            "type": "const char*",
            "name": "name",
            "desc": "参数名。"
          },
          {
            "type": "float_t",
            "name": "defval",
            "desc": "缺省值。"
          }
        ],
        "annotation": {},
        "desc": " 获取指定的浮点格式的参数。\n\n\n",
        "name": "self_layouter_get_param_float",
        "return": {
          "type": "ret_t",
          "desc": "成功返回参数的值，失败返回缺省值。"
        }
      },
      {
        "params": [
          {
            "type": "self_layouter_t*",
            "name": "layouter",
            "desc": "layouter对象。"
          },
          {
            "type": "const char*",
            "name": "name",
            "desc": "参数名。"
          },
          {
            "type": "int32_t",
            "name": "defval",
            "desc": "缺省值。"
          }
        ],
        "annotation": {},
        "desc": " 获取指定的整数格式的参数。\n\n\n",
        "name": "self_layouter_get_param_int",
        "return": {
          "type": "ret_t",
          "desc": "成功返回参数的值，失败返回缺省值。"
        }
      },
      {
        "params": [
          {
            "type": "self_layouter_t*",
            "name": "layouter",
            "desc": "layouter对象。"
          }
        ],
        "annotation": {},
        "desc": " 销毁layouter对象。\n\n\n",
        "name": "self_layouter_destroy",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      }
    ],
    "events": [],
    "properties": [],
    "header": "base/self_layouter.h",
    "desc": " 控件自身排版布局器的接口。\n\n 按特定算法对控件进行排版布局，子类需要实现vtable中的函数。\n\n",
    "name": "self_layouter_t",
    "level": 1
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "style_factory_t*",
            "name": "factory",
            "desc": "factory对象。"
          },
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          }
        ],
        "annotation": {},
        "desc": " 创建style。\n\n\n",
        "name": "style_factory_create_style",
        "return": {
          "type": "style_t*",
          "desc": "返回style对象。"
        }
      },
      {
        "params": [],
        "annotation": {
          "constructor": true
        },
        "desc": " 获取缺省的style factory。\n\n",
        "name": "style_factory",
        "alias": "style_factory_instance",
        "return": {
          "type": "style_factory_t*",
          "desc": "返回style factory对象。"
        }
      },
      {
        "params": [
          {
            "type": "style_factory_t*",
            "name": "factory",
            "desc": "factory对象。"
          }
        ],
        "annotation": {},
        "desc": " 设置缺省的style factory(需要自定义的style factory才设置)。\n\n\n",
        "name": "style_factory_set",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      }
    ],
    "events": [],
    "properties": [],
    "header": "base/style_factory.h",
    "desc": " style工厂接口，主要用于创建style。\n\n> 在特殊情况下，可以实现自己的style工厂，比如支持CSS和可实时修改的style。\n\n\n",
    "name": "style_factory_t",
    "level": 1
  },
  {
    "type": "enum",
    "desc": " style常量定义。\n\n",
    "consts": [
      {
        "desc": " 背景颜色。\n\n",
        "name": "STYLE_ID_BG_COLOR"
      },
      {
        "desc": " 前景颜色。\n\n",
        "name": "STYLE_ID_FG_COLOR"
      },
      {
        "desc": " 蒙版颜色。\n\n",
        "name": "STYLE_ID_MASK_COLOR"
      },
      {
        "desc": " 字体名称。\n\n",
        "name": "STYLE_ID_FONT_NAME"
      },
      {
        "desc": " 字体大小。\n\n",
        "name": "STYLE_ID_FONT_SIZE"
      },
      {
        "desc": " 字体风格(粗体、斜体等)。\n\n",
        "name": "STYLE_ID_FONT_STYLE"
      },
      {
        "desc": " 文本颜色。\n\n",
        "name": "STYLE_ID_TEXT_COLOR"
      },
      {
        "desc": " 提示文本颜色。\n\n",
        "name": "STYLE_ID_TIPS_TEXT_COLOR"
      },
      {
        "desc": " 文本水平对齐的方式。\n\n",
        "name": "STYLE_ID_TEXT_ALIGN_H"
      },
      {
        "desc": " 文本垂直对齐的方式。\n\n",
        "name": "STYLE_ID_TEXT_ALIGN_V"
      },
      {
        "desc": " 边框颜色。\n\n",
        "name": "STYLE_ID_BORDER_COLOR"
      },
      {
        "desc": " 边框类型。\n\n",
        "name": "STYLE_ID_BORDER"
      },
      {
        "desc": " 图片的名称。\n\n",
        "name": "STYLE_ID_BG_IMAGE"
      },
      {
        "desc": " 图片的显示方式。\n\n",
        "name": "STYLE_ID_BG_IMAGE_DRAW_TYPE"
      },
      {
        "desc": " 图标的名称。\n\n",
        "name": "STYLE_ID_ICON"
      },
      {
        "desc": " 图片的名称。\n\n",
        "name": "STYLE_ID_FG_IMAGE"
      },
      {
        "desc": " 图片的显示方式。\n\n",
        "name": "STYLE_ID_FG_IMAGE_DRAW_TYPE"
      },
      {
        "desc": " 边距。\n\n",
        "name": "STYLE_ID_MARGIN"
      },
      {
        "desc": " 图标的位置。\n\n",
        "name": "STYLE_ID_ICON_AT"
      },
      {
        "desc": " Active图标的名称。\n\n",
        "name": "STYLE_ID_ACTIVE_ICON"
      },
      {
        "desc": " X方向的偏移，方便实现按下的效果。\n\n",
        "name": "STYLE_ID_X_OFFSET"
      },
      {
        "desc": " Y方向的偏移，方便实现按下的效果。\n\n",
        "name": "STYLE_ID_Y_OFFSET"
      },
      {
        "desc": " 编辑器中选中区域的背景颜色。\n\n",
        "name": "STYLE_ID_SELECTED_BG_COLOR"
      },
      {
        "desc": " 编辑器中选中区域的前景颜色。\n\n",
        "name": "STYLE_ID_SELECTED_FG_COLOR"
      },
      {
        "desc": " 编辑器中选中区域的文本颜色。\n\n",
        "name": "STYLE_ID_SELECTED_TEXT_COLOR"
      },
      {
        "desc": " 圆角半径(仅在WITH_VGCANVAS定义时生效)。\n\n",
        "name": "STYLE_ID_ROUND_RADIUS"
      }
    ],
    "header": "base/style.h",
    "name": "style_id_t",
    "prefix": "STYLE",
    "annotation": {
      "scriptable": true,
      "string": true
    },
    "level": 1
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "style_t*",
            "name": "s",
            "desc": "style对象。"
          },
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " widget状态改变时，通知style更新数据。\n\n\n",
        "name": "style_notify_widget_state_changed",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "style_t*",
            "name": "s",
            "desc": "style对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 检查style对象是否有效\n\n\n",
        "name": "style_is_valid",
        "return": {
          "type": "bool_t",
          "desc": "返回是否有效。"
        }
      },
      {
        "params": [
          {
            "type": "style_t*",
            "name": "s",
            "desc": "style对象。"
          },
          {
            "type": "const char*",
            "name": "name",
            "desc": "属性名。"
          },
          {
            "type": "int32_t",
            "name": "defval",
            "desc": "缺省值。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 获取指定name的整数格式的值。\n\n\n",
        "name": "style_get_int",
        "return": {
          "type": "int32_t",
          "desc": "返回整数格式的值。"
        }
      },
      {
        "params": [
          {
            "type": "style_t*",
            "name": "s",
            "desc": "style对象。"
          },
          {
            "type": "const char*",
            "name": "name",
            "desc": "属性名。"
          },
          {
            "type": "color_t",
            "name": "defval",
            "desc": "缺省值。"
          }
        ],
        "annotation": {},
        "desc": " 获取指定name的颜色值。\n\n\n",
        "name": "style_get_color",
        "return": {
          "type": "color_t",
          "desc": "返回颜色值。"
        }
      },
      {
        "params": [
          {
            "type": "style_t*",
            "name": "s",
            "desc": "style对象。"
          },
          {
            "type": "const char*",
            "name": "name",
            "desc": "属性名。"
          },
          {
            "type": "const char*",
            "name": "defval",
            "desc": "缺省值。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 获取指定name的字符串格式的值。\n\n\n",
        "name": "style_get_str",
        "return": {
          "type": "const char*",
          "desc": "返回字符串格式的值。"
        }
      },
      {
        "params": [
          {
            "type": "style_t*",
            "name": "s",
            "desc": "style对象。"
          }
        ],
        "annotation": {},
        "desc": " 销毁style对象\n\n\n",
        "name": "style_destroy",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      }
    ],
    "events": [],
    "properties": [],
    "header": "base/style.h",
    "desc": " 控件风格。\n\n widget从style对象中，获取诸如字体、颜色和图片相关的参数，根据这些参数来绘制界面。\n\n ```c\n style_t* style = widget->astyle;\n int32_t margin = style_get_int(style, STYLE_ID_MARGIN, 2);\n int32_t icon_at = style_get_int(style, STYLE_ID_ICON_AT, ICON_AT_AUTO);\n uint16_t font_size = style_get_int(style, STYLE_ID_FONT_SIZE, TK_DEFAULT_FONT_SIZE);\n ```\n\n 属性名称的请参考[style\\_id](style_id_t.md)\n\n\n",
    "name": "style_t",
    "annotation": {
      "scriptable": true
    },
    "level": 1
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "asset_info_t*",
            "name": "res",
            "desc": "数据资源。"
          }
        ],
        "annotation": {
          "constructor": true
        },
        "desc": " 创建联想字对象。\n\n\n",
        "name": "suggest_words_create",
        "return": {
          "type": "suggest_words_t*",
          "desc": "返回联想字对象。"
        }
      },
      {
        "params": [
          {
            "type": "suggest_words_t*",
            "name": "suggest_words",
            "desc": "联想字对象。"
          },
          {
            "type": "wchar_t",
            "name": "c",
            "desc": "字符。"
          }
        ],
        "annotation": {},
        "desc": " 查找prefix对应的联想字列表，成功后会更新words/words_nr。\n\n\n",
        "name": "suggest_words_find",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "suggest_words_t*",
            "name": "suggest_words",
            "desc": "联想字对象。"
          }
        ],
        "annotation": {},
        "desc": " @deconstructor\n 销毁联想字对象。\n\n\n",
        "name": "suggest_words_destroy",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      }
    ],
    "events": [],
    "properties": [
      {
        "name": "words",
        "desc": " 联想字列表。find函数执行成功后会更新。\n\n",
        "type": "char*",
        "annotation": {
          "private": true
        }
      },
      {
        "name": "words_nr",
        "desc": " 联想字/词个数。find函数执行成功后会更新。\n\n",
        "type": "uint32_t",
        "annotation": {
          "private": true
        }
      }
    ],
    "header": "base/suggest_words.h",
    "desc": " 输入法联想字词。\n\n",
    "name": "suggest_words_t",
    "level": 1
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [],
        "annotation": {
          "constructor": true
        },
        "desc": " 获取system_info对象。\n\n",
        "name": "system_info",
        "return": {
          "type": "system_info_t*",
          "desc": "返回system_info对象。"
        }
      },
      {
        "params": [
          {
            "type": "app_type_t",
            "name": "app_type",
            "desc": "应用程序的类型。"
          },
          {
            "type": "const char*",
            "name": "app_name",
            "desc": "应用程序的名称。"
          },
          {
            "type": "const char*",
            "name": "app_root",
            "desc": "应用程序的根目录，用于定位资源文件。"
          }
        ],
        "annotation": {},
        "desc": " 初始化system_info对象(PC软件才需调用)。\n\n\n",
        "name": "system_info_init",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      }
    ],
    "events": [],
    "properties": [
      {
        "name": "lcd_w",
        "desc": " 显示屏的宽度。\n\n",
        "type": "uint32_t",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "lcd_h",
        "desc": " 显示屏的高度。\n\n",
        "type": "uint32_t",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "lcd_type",
        "desc": " 显示屏的类型。\n\n",
        "type": "lcd_type_t",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "device_pixel_ratio",
        "desc": " 显示屏的密度。\n\n",
        "type": "float_t",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "lcd_orientation",
        "desc": " 显示屏的旋转角度。\n\n",
        "type": "lcd_orientation_t",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "app_type",
        "desc": " 应用程序的类型。\n\n",
        "type": "app_type_t",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "app_name",
        "desc": " 应用程序的名称。\n\n",
        "type": "const char*",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "app_root",
        "desc": " 应用程序的根目录，用于定位资源文件。\n\n",
        "type": "const char*",
        "annotation": {
          "readable": true
        }
      }
    ],
    "header": "base/system_info.h",
    "desc": " 当前系统的信息。\n\n",
    "name": "system_info_t",
    "level": 1
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [],
        "annotation": {
          "constructor": true,
          "scriptable": true
        },
        "desc": " 获取缺省的主题对象。\n\n",
        "name": "theme",
        "alias": "theme_instance",
        "return": {
          "type": "theme_t*",
          "desc": "返回主题对象。"
        }
      },
      {
        "params": [
          {
            "type": "theme_t*",
            "name": "theme",
            "desc": "主题对象。"
          }
        ],
        "annotation": {},
        "desc": " 设置缺省的主题对象。\n\n\n",
        "name": "theme_set",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "const uint8_t*",
            "name": "data",
            "desc": "主题数据。"
          }
        ],
        "annotation": {
          "constructor": true
        },
        "desc": " 创建主题对象。\n\n\n",
        "name": "theme_create",
        "return": {
          "type": "theme_t*",
          "desc": "返回主题对象。"
        }
      },
      {
        "params": [
          {
            "type": "theme_t*",
            "name": "theme",
            "desc": "主题对象。"
          },
          {
            "type": "const uint8_t*",
            "name": "data",
            "desc": "主题数据。"
          }
        ],
        "annotation": {
          "constructor": true
        },
        "desc": " 初始化主题对象。\n\n\n",
        "name": "theme_init",
        "return": {
          "type": "theme_t*",
          "desc": "返回主题对象。"
        }
      },
      {
        "params": [
          {
            "type": "theme_t*",
            "name": "data",
            "desc": "主题对象。"
          },
          {
            "type": "const char*",
            "name": "widget_type",
            "desc": "控件的类型名。"
          },
          {
            "type": "const char*",
            "name": "name",
            "desc": "style的名称。"
          },
          {
            "type": "const char*",
            "name": "widget_state",
            "desc": "控件的状态。"
          }
        ],
        "annotation": {},
        "desc": " 查找满足条件的style。\n\n\n",
        "name": "theme_find_style",
        "return": {
          "type": "theme_t*",
          "desc": "返回主题对象。"
        }
      },
      {
        "params": [
          {
            "type": "theme_t*",
            "name": "theme",
            "desc": "主题对象。"
          }
        ],
        "annotation": {},
        "desc": " 析构主题对象。\n\n\n",
        "name": "theme_deinit",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "theme_t*",
            "name": "theme",
            "desc": "主题对象。"
          }
        ],
        "annotation": {},
        "desc": " 析构并释放主题对象。\n\n\n",
        "name": "theme_destroy",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      }
    ],
    "events": [],
    "properties": [],
    "header": "base/theme.h",
    "desc": " 主题。\n\n 负责管理缺省的主题数据，方便实现style\\_const。\n\n\n",
    "name": "theme_t",
    "level": 1
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "timer_get_time_t",
            "name": "get_time",
            "desc": "获取当前时间的函数。"
          }
        ],
        "annotation": {
          "private": true,
          "static": true
        },
        "desc": " 初始化定时器系统。\n\n\n",
        "name": "timer_init",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "timer_func_t",
            "name": "on_timer",
            "desc": "timer回调函数。"
          },
          {
            "type": "void*",
            "name": "ctx",
            "desc": "timer回调函数的上下文。"
          },
          {
            "type": "uint32_t",
            "name": "duration",
            "desc": "时间。"
          }
        ],
        "annotation": {
          "scriptable": "custom",
          "static": true
        },
        "desc": " 增加一个timer。\n\n\n",
        "name": "timer_add",
        "return": {
          "type": "uint32_t",
          "desc": "返回timer的ID，TK_INVALID_ID表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "timer_func_t",
            "name": "",
            "desc": "r"
          },
          {
            "type": "void*",
            "name": "ctx",
            "desc": "timer回调函数的上下文。"
          },
          {
            "type": "uint32_t",
            "name": "duration",
            "desc": "时间。"
          }
        ],
        "annotation": {
          "static": true
        },
        "desc": " 用于非GUI线程增加一个timer，本函数向主循环的事件队列中发送一个增加timer的请求。\n timer回调函数，回调函数返回RET_REPEAT，则下次继续执行，否则自动移出。\n\n\n",
        "name": "timer_queue",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "uint32_t",
            "name": "timer_id",
            "desc": "timerID。"
          }
        ],
        "annotation": {
          "scriptable": true,
          "static": true
        },
        "desc": " 删除指定的timer。\n\n\n",
        "name": "timer_remove",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "uint32_t",
            "name": "timer_id",
            "desc": "timerID。"
          },
          {
            "type": "tk_destroy_t",
            "name": "on_destroy",
            "desc": "回调函数。"
          },
          {
            "type": "void*",
            "name": "on_destroy_ctx",
            "desc": "回调函数上下文。"
          }
        ],
        "annotation": {},
        "desc": " 设置一个回调函数，在timer被销毁时调用(方便脚本语言去释放回调函数)。\n\n\n",
        "name": "timer_set_on_destroy",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [],
        "annotation": {
          "private": true
        },
        "desc": " 查找指定ID的timer。\n\n\n",
        "name": "timer_find",
        "return": {
          "type": "timer_info_t*",
          "desc": "返回timer的信息。"
        }
      },
      {
        "params": [],
        "annotation": {
          "private": true
        },
        "desc": " 检查全部timer的函数，如果时间到期，调用相应的timer函数。\n\n\n",
        "name": "timer_dispatch",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [],
        "annotation": {
          "static": true
        },
        "desc": " 返回timer的个数。\n\n\n",
        "name": "timer_count",
        "return": {
          "type": "uint32_t",
          "desc": "返回timer的个数。"
        }
      },
      {
        "params": [],
        "annotation": {
          "static": true
        },
        "desc": " 返回最近的timer到期时间。\n\n\n",
        "name": "timer_next_time",
        "return": {
          "type": "uint32_t",
          "desc": "返回最近的timer到期时间。"
        }
      },
      {
        "params": [],
        "annotation": {
          "static": true
        },
        "desc": " 获取当前时间(ms)。\n\n\n",
        "name": "timer_now",
        "return": {
          "type": "uint32_t",
          "desc": "返回获取当前时间(ms)。"
        }
      }
    ],
    "events": [],
    "properties": [],
    "header": "base/timer.h",
    "desc": " 定时器系统。\n\n > 本定时器精度较低，最高精度为1000/FPS，如果需要高精度的定时器，请用OS提供的定时器。\n\n 示例：\n\n ```c\n static ret_t my_on_timer(const timer_info_t* info) {\n  widget_t* widget = WIDGET(info->ctx);\n  ...\n  return RET_REPEAT;\n }\n\n ...\n\n timer_add(my_on_timer, widget, 1000);\n ```\n > 在非GUI线程请用timer\\_queue。\n\n\n",
    "name": "timer_t",
    "annotation": {
      "scriptable": true,
      "fake": true
    },
    "level": 1
  },
  {
    "type": "enum",
    "desc": " LCD旋转角度(XXX:目前仅支持0度和90度，逆时针方向)。\r\n",
    "consts": [
      {
        "desc": " LCD没有旋转。\r\n",
        "name": "LCD_ORIENTATION_0"
      },
      {
        "desc": " LCD旋转90度。\r\n",
        "name": "LCD_ORIENTATION_90"
      },
      {
        "desc": " LCD旋转180度。\r\n",
        "name": "LCD_ORIENTATION_180"
      },
      {
        "desc": " LCD旋转270度。\r\n",
        "name": "LCD_ORIENTATION_270"
      }
    ],
    "header": "base/types_def.h",
    "name": "lcd_orientation_t",
    "prefix": "LCD_ORIENTATION_",
    "level": 1
  },
  {
    "type": "enum",
    "desc": " 垂直对齐的常量定义。\r\n",
    "consts": [
      {
        "desc": " 无效对齐方式。\r\n",
        "name": "ALIGN_V_NONE"
      },
      {
        "desc": " 居中对齐。\r\n",
        "name": "ALIGN_V_MIDDLE"
      },
      {
        "desc": " 顶部对齐。\r\n",
        "name": "ALIGN_V_TOP"
      },
      {
        "desc": " 底部对齐。\r\n",
        "name": "ALIGN_V_BOTTOM"
      }
    ],
    "header": "base/types_def.h",
    "name": "align_v_t",
    "prefix": "ALIGN_V_",
    "annotation": {
      "scriptable": true
    },
    "level": 1
  },
  {
    "type": "enum",
    "desc": " 水平对齐的常量定义。\r\n",
    "consts": [
      {
        "desc": " 无效对齐方式。\r\n",
        "name": "ALIGN_H_NONE"
      },
      {
        "desc": " 居中对齐。\r\n",
        "name": "ALIGN_H_CENTER"
      },
      {
        "desc": " 左边对齐。\r\n",
        "name": "ALIGN_H_LEFT"
      },
      {
        "desc": " 右边对齐。\r\n",
        "name": "ALIGN_H_RIGHT"
      }
    ],
    "header": "base/types_def.h",
    "name": "align_h_t",
    "prefix": "ALIGN_H_",
    "annotation": {
      "scriptable": true
    },
    "level": 1
  },
  {
    "type": "enum",
    "desc": " 控件边框类型。\r\n",
    "consts": [
      {
        "desc": " 无边框。\r\n",
        "name": "BORDER_NONE"
      },
      {
        "desc": " 左边框线。\r\n",
        "name": "BORDER_LEFT"
      },
      {
        "desc": " 右边框线。\r\n",
        "name": "BORDER_RIGHT"
      },
      {
        "desc": " 上边框线。\r\n",
        "name": "BORDER_TOP"
      },
      {
        "desc": " 下边框线。\r\n",
        "name": "BORDER_BOTTOM"
      },
      {
        "desc": " 全边框线。\r\n",
        "name": "BORDER_ALL"
      }
    ],
    "header": "base/types_def.h",
    "name": "border_type_t",
    "prefix": "BORDER_TYPE_",
    "level": 1
  },
  {
    "type": "enum",
    "desc": " 字体资源类型定义。\n\n",
    "consts": [],
    "header": "base/assets_manager.h",
    "name": "asset_font_type_t",
    "prefix": "ASSET_FONT_TYPE_",
    "level": 1
  },
  {
    "type": "enum",
    "desc": " 应用程序类型。\r\n",
    "consts": [
      {
        "desc": " 嵌入式或移动APP\r\n",
        "name": "APP_MOBILE"
      },
      {
        "desc": " 模拟器。\r\n",
        "name": "APP_SIMULATOR"
      },
      {
        "desc": " 桌面应用程序。\r\n",
        "name": "APP_DESKTOP"
      }
    ],
    "header": "base/types_def.h",
    "name": "app_type_t",
    "prefix": "APP_",
    "level": 1
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "ui_builder_t*",
            "name": "builder",
            "desc": "builder对象。"
          },
          {
            "type": "const widget_desc_t*",
            "name": "desc",
            "desc": "widget描述信息。"
          }
        ],
        "annotation": {},
        "desc": " ui\\_loader在解析到widget时，调用本函数进一步处理。\n\n\n\n\n",
        "name": "ui_builder_on_widget_start",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "ui_builder_t*",
            "name": "builder",
            "desc": "builder对象。"
          },
          {
            "type": "const char*",
            "name": "name",
            "desc": "属性名。"
          },
          {
            "type": "const char*",
            "name": "value",
            "desc": "属性值。"
          }
        ],
        "annotation": {},
        "desc": " ui\\_loader在解析到widget的属性时，调用本函数进一步处理。\n\n\n\n\n",
        "name": "ui_builder_on_widget_prop",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "ui_builder_t*",
            "name": "builder",
            "desc": "builder对象。"
          }
        ],
        "annotation": {},
        "desc": " ui\\_loader在解析到widget全部属性结束时，调用本函数进一步处理。\n\n\n\n\n",
        "name": "ui_builder_on_widget_prop",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "ui_builder_t*",
            "name": "builder",
            "desc": "builder对象。"
          }
        ],
        "annotation": {},
        "desc": " ui\\_loader在解析到widget结束时，调用本函数进一步处理。\n\n\n\n\n",
        "name": "ui_builder_on_widget_end",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "ui_builder_t*",
            "name": "builder",
            "desc": "builder对象。"
          }
        ],
        "annotation": {},
        "desc": " ui\\_loader在解析开始时，调用本函数做些准备工作。\n\n\n\n\n",
        "name": "ui_builder_on_start",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "ui_builder_t*",
            "name": "builder",
            "desc": "builder对象。"
          }
        ],
        "annotation": {},
        "desc": " ui\\_loader在解析结束时，调用本函数做些收尾工作。\n\n\n\n\n",
        "name": "ui_builder_on_end",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      }
    ],
    "events": [],
    "properties": [],
    "header": "base/ui_builder.h",
    "desc": "\n 界面构造器接口。\n\n 负责把ui\\_loader解析的数据进一步处理，至于具体做什么，由具体实现决定。常见的实现有：\n\n * 构建widget对象树。\n\n * 生成二进制的UI描述数据。\n\n * 生成XML格式的UI描述数据。\n\n ```graphviz\n   [default_style]\n\n   ui_builder_defualt_t -> ui_builder_t[arrowhead = \"empty\"]\n   ui_xml_writer_t -> ui_builder_t[arrowhead = \"empty\"]\n   ui_binary_writer_t -> ui_builder_t[arrowhead = \"empty\"]\n ```\n\n",
    "name": "ui_builder_t",
    "level": 1
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "ui_loader_t*",
            "name": "loader",
            "desc": "loader对象。"
          },
          {
            "type": "const uint8_t*",
            "name": "data",
            "desc": "数据。"
          },
          {
            "type": "uint32_t",
            "name": "size",
            "desc": "数据长度。"
          },
          {
            "type": "ui_builder_t*",
            "name": "builder",
            "desc": "负责进一步处理，比如构建UI界面。"
          }
        ],
        "annotation": {},
        "desc": " 加载界面描述数据，然后分发给ui\\_builder，由ui\\_builder进一步处理。\n\n\n\n\n",
        "name": "ui_loader_load",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      }
    ],
    "events": [],
    "properties": [],
    "header": "base/ui_loader.h",
    "desc": "\n UI加载器。\n\n 负责从资源加载界面描述数据，然后分发给ui\\_builder，由ui\\_builder进一步处理。\n\n 常见的实现有两种：\n\n * XML格式的加载器。\n\n * 二进制格式的加载器。\n\n ```graphviz\n   [default_style]\n\n   ui_loader_defualt_t -> ui_loader_t[arrowhead = \"empty\"]\n   ui_loader_xml_t -> ui_loader_t[arrowhead = \"empty\"]\n\n ```\n\n\n",
    "name": "ui_loader_t",
    "level": 1
  },
  {
    "type": "class",
    "methods": [],
    "events": [],
    "properties": [],
    "header": "base/velocity.h",
    "desc": " velocity。\r\n",
    "name": "velocity_t",
    "level": 1
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "uint32_t",
            "name": "w",
            "desc": "宽度"
          },
          {
            "type": "uint32_t",
            "name": "h",
            "desc": "高度"
          },
          {
            "type": "uint32_t",
            "name": "stride",
            "desc": "一行占用的字节数。"
          },
          {
            "type": "bitmap_format_t",
            "name": "format",
            "desc": "如果data是framebuffer，format指定data的格式。"
          },
          {
            "type": "void*",
            "name": "data",
            "desc": "framebuffer或其它ctx。"
          }
        ],
        "annotation": {
          "constructor": true
        },
        "desc": " 创建vgcanvas。\n\n\n",
        "name": "vgcanvas_create",
        "return": {
          "type": "vgcanvas_t",
          "desc": "返回vgcanvas"
        }
      },
      {
        "params": [
          {
            "type": "vgcanvas_t*",
            "name": "vg",
            "desc": "vgcanvas对象。"
          }
        ],
        "annotation": {
          "cast": true,
          "scriptable": true
        },
        "desc": " 转换为vgcanvas对象(供脚本语言使用)。\n\n\n",
        "name": "vgcanvas_cast",
        "return": {
          "type": "vgcanvas_t*",
          "desc": "vgcanvas对象。"
        }
      },
      {
        "params": [
          {
            "type": "vgcanvas_t*",
            "name": "vg",
            "desc": "vgcanvas对象。"
          },
          {
            "type": "uint32_t",
            "name": "w",
            "desc": "宽度"
          },
          {
            "type": "uint32_t",
            "name": "h",
            "desc": "高度"
          },
          {
            "type": "uint32_t",
            "name": "stride",
            "desc": "一行占用的字节数。"
          },
          {
            "type": "bitmap_format_t",
            "name": "format",
            "desc": "如果data是framebuffer，format指定data的格式。"
          },
          {
            "type": "void*",
            "name": "data",
            "desc": "framebuffer或其它ctx。"
          }
        ],
        "annotation": {},
        "desc": " 重新初始化，系统内部调用。\n\n\n\n",
        "name": "vgcanvas_reinit",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "vgcanvas_t*",
            "name": "vg",
            "desc": "vgcanvas对象。"
          }
        ],
        "annotation": {},
        "desc": " 重置状态。\n\n\n\n",
        "name": "vgcanvas_reset",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "vgcanvas_t*",
            "name": "vg",
            "desc": "vgcanvas对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " flush\n\n\n\n",
        "name": "vgcanvas_flush",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "vgcanvas_t*",
            "name": "vg",
            "desc": "vgcanvas对象。"
          },
          {
            "type": "rect_t*",
            "name": "dirty_rect",
            "desc": "需要绘制的区域。"
          }
        ],
        "annotation": {},
        "desc": " 开始绘制，系统内部调用。\n\n\n\n",
        "name": "vgcanvas_begin_frame",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "vgcanvas_t*",
            "name": "vg",
            "desc": "vgcanvas对象。"
          },
          {
            "type": "float_t",
            "name": "x",
            "desc": "x坐标。"
          },
          {
            "type": "float_t",
            "name": "y",
            "desc": "y坐标。"
          },
          {
            "type": "float_t",
            "name": "w",
            "desc": "宽度。"
          },
          {
            "type": "float_t",
            "name": "h",
            "desc": "高度。"
          },
          {
            "type": "color_t",
            "name": "c",
            "desc": "颜色。"
          }
        ],
        "annotation": {},
        "desc": " 用颜色清除指定矩形区域。\n\n\n\n",
        "name": "vgcanvas_clear_rect",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "vgcanvas_t*",
            "name": "vg",
            "desc": "vgcanvas对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 清除之前的路径，并重新开始一条路径。\n\n\n\n",
        "name": "vgcanvas_begin_path",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "vgcanvas_t*",
            "name": "vg",
            "desc": "vgcanvas对象。"
          },
          {
            "type": "float_t",
            "name": "x",
            "desc": "x坐标。"
          },
          {
            "type": "float_t",
            "name": "y",
            "desc": "y坐标。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 移动当前点到指定点。\n\n\n\n",
        "name": "vgcanvas_move_to",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "vgcanvas_t*",
            "name": "vg",
            "desc": "vgcanvas对象。"
          },
          {
            "type": "float_t",
            "name": "x",
            "desc": "x坐标。"
          },
          {
            "type": "float_t",
            "name": "y",
            "desc": "y坐标。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 生成一条线段(从当前点到目标点)。\n\n\n\n",
        "name": "vgcanvas_line_to",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "vgcanvas_t*",
            "name": "vg",
            "desc": "vgcanvas对象。"
          },
          {
            "type": "float_t",
            "name": "cpx",
            "desc": "控制点x坐标。"
          },
          {
            "type": "float_t",
            "name": "cpy",
            "desc": "控制点y坐标。"
          },
          {
            "type": "float_t",
            "name": "x",
            "desc": "x坐标。"
          },
          {
            "type": "float_t",
            "name": "y",
            "desc": "y坐标。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 生成一条二次贝塞尔曲线。\n\n\n\n",
        "name": "vgcanvas_quad_to",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "vgcanvas_t*",
            "name": "vg",
            "desc": "vgcanvas对象。"
          },
          {
            "type": "float_t",
            "name": "cp1x",
            "desc": "控制点1x坐标。"
          },
          {
            "type": "float_t",
            "name": "cp1y",
            "desc": "控制点1y坐标。"
          },
          {
            "type": "float_t",
            "name": "cp2x",
            "desc": "控制点2x坐标。"
          },
          {
            "type": "float_t",
            "name": "cp2y",
            "desc": "控制点3y坐标。"
          },
          {
            "type": "float_t",
            "name": "x",
            "desc": "x坐标。"
          },
          {
            "type": "float_t",
            "name": "y",
            "desc": "y坐标。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 生成一条三次贝塞尔曲线。\n\n\n\n",
        "name": "vgcanvas_bezier_to",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "vgcanvas_t*",
            "name": "vg",
            "desc": "vgcanvas对象。"
          },
          {
            "type": "float_t",
            "name": "x1",
            "desc": "起始点x坐标。"
          },
          {
            "type": "float_t",
            "name": "y1",
            "desc": "起始点y坐标。"
          },
          {
            "type": "float_t",
            "name": "x2",
            "desc": "结束点x坐标。"
          },
          {
            "type": "float_t",
            "name": "y2",
            "desc": "结束点y坐标。"
          },
          {
            "type": "float_t",
            "name": "r",
            "desc": "半径。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 生成一条圆弧路径到指定点。\n\n\n\n",
        "name": "vgcanvas_arc_to",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "vgcanvas_t*",
            "name": "vg",
            "desc": "vgcanvas对象。"
          },
          {
            "type": "float_t",
            "name": "x",
            "desc": "原点x坐标。"
          },
          {
            "type": "float_t",
            "name": "y",
            "desc": "原点y坐标。"
          },
          {
            "type": "float_t",
            "name": "r",
            "desc": "半径。"
          },
          {
            "type": "float_t",
            "name": "start_angle",
            "desc": "起始角度。"
          },
          {
            "type": "float_t",
            "name": "end_angle",
            "desc": "结束角度。"
          },
          {
            "type": "bool_t",
            "name": "ccw",
            "desc": "是否逆时针。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 生成一条圆弧。\n\n\n\n",
        "name": "vgcanvas_arc",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "vgcanvas_t*",
            "name": "vg",
            "desc": "vgcanvas对象。"
          },
          {
            "type": "float_t",
            "name": "x",
            "desc": "x坐标。"
          },
          {
            "type": "float_t",
            "name": "y",
            "desc": "y坐标。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 检查点是否在当前路径中。\n\n\n\n",
        "name": "vgcanvas_is_point_in_path",
        "return": {
          "type": "bool_t",
          "desc": "返回TRUE表示在，否则表示不在。"
        }
      },
      {
        "params": [
          {
            "type": "vgcanvas_t*",
            "name": "vg",
            "desc": "vgcanvas对象。"
          },
          {
            "type": "float_t",
            "name": "x",
            "desc": "x坐标。"
          },
          {
            "type": "float_t",
            "name": "y",
            "desc": "y坐标。"
          },
          {
            "type": "float_t",
            "name": "w",
            "desc": "宽度。"
          },
          {
            "type": "float_t",
            "name": "h",
            "desc": "高度。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 生成一个矩形路径。\n\n\n\n",
        "name": "vgcanvas_rect",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "vgcanvas_t*",
            "name": "vg",
            "desc": "vgcanvas对象。"
          },
          {
            "type": "float_t",
            "name": "x",
            "desc": "x坐标。"
          },
          {
            "type": "float_t",
            "name": "y",
            "desc": "y坐标。"
          },
          {
            "type": "float_t",
            "name": "w",
            "desc": "宽度。"
          },
          {
            "type": "float_t",
            "name": "h",
            "desc": "高度。"
          },
          {
            "type": "float_t",
            "name": "r",
            "desc": "圆角半径。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 生成一个圆角矩形路径。\n\n\n\n",
        "name": "vgcanvas_rounded_rect",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "vgcanvas_t*",
            "name": "vg",
            "desc": "vgcanvas对象。"
          },
          {
            "type": "float_t",
            "name": "x",
            "desc": "x坐标。"
          },
          {
            "type": "float_t",
            "name": "y",
            "desc": "y坐标。"
          },
          {
            "type": "float_t",
            "name": "rx",
            "desc": "圆角半径。"
          },
          {
            "type": "float_t",
            "name": "ry",
            "desc": "圆角半径。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 生成一个椭圆路径。\n\n\n\n",
        "name": "vgcanvas_ellipse",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "vgcanvas_t*",
            "name": "vg",
            "desc": "vgcanvas对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 闭合路径。\n\n >闭合路径是指把起点和终点连接起来，形成一个封闭的多边形。\n\n\n\n",
        "name": "vgcanvas_close_path",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "vgcanvas_t*",
            "name": "vg",
            "desc": "vgcanvas对象。"
          },
          {
            "type": "float_t",
            "name": "rad",
            "desc": "角度"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 旋转。\n\n\n\n",
        "name": "vgcanvas_rotate",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "vgcanvas_t*",
            "name": "vg",
            "desc": "vgcanvas对象。"
          },
          {
            "type": "float_t",
            "name": "x",
            "desc": "x方向缩放比例。"
          },
          {
            "type": "float_t",
            "name": "y",
            "desc": "y方向缩放比例。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 缩放。\n\n\n\n",
        "name": "vgcanvas_scale",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "vgcanvas_t*",
            "name": "vg",
            "desc": "vgcanvas对象。"
          },
          {
            "type": "float_t",
            "name": "x",
            "desc": "x方向偏移。"
          },
          {
            "type": "float_t",
            "name": "y",
            "desc": "y方向偏移。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 平移。\n\n\n\n",
        "name": "vgcanvas_translate",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "vgcanvas_t*",
            "name": "vg",
            "desc": "vgcanvas对象。"
          },
          {
            "type": "float_t",
            "name": "a",
            "desc": "a"
          },
          {
            "type": "float_t",
            "name": "b",
            "desc": "b"
          },
          {
            "type": "float_t",
            "name": "c",
            "desc": "c"
          },
          {
            "type": "float_t",
            "name": "d",
            "desc": "d"
          },
          {
            "type": "float_t",
            "name": "e",
            "desc": "e"
          },
          {
            "type": "float_t",
            "name": "f",
            "desc": "f"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 变换矩阵。\n\n\n\n",
        "name": "vgcanvas_transform",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "vgcanvas_t*",
            "name": "vg",
            "desc": "vgcanvas对象。"
          },
          {
            "type": "float_t",
            "name": "a",
            "desc": "a"
          },
          {
            "type": "float_t",
            "name": "b",
            "desc": "b"
          },
          {
            "type": "float_t",
            "name": "c",
            "desc": "c"
          },
          {
            "type": "float_t",
            "name": "d",
            "desc": "d"
          },
          {
            "type": "float_t",
            "name": "e",
            "desc": "e"
          },
          {
            "type": "float_t",
            "name": "f",
            "desc": "f"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 设置变换矩阵。\n\n\n\n",
        "name": "vgcanvas_set_transform",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "vgcanvas_t*",
            "name": "vg",
            "desc": "vgcanvas对象。"
          },
          {
            "type": "float_t",
            "name": "x",
            "desc": "x坐标。"
          },
          {
            "type": "float_t",
            "name": "y",
            "desc": "y坐标。"
          },
          {
            "type": "float_t",
            "name": "w",
            "desc": "宽度。"
          },
          {
            "type": "float_t",
            "name": "h",
            "desc": "高度。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 矩形裁剪。\n\n\n\n",
        "name": "vgcanvas_clip_rect",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "vgcanvas_t*",
            "name": "vg",
            "desc": "vgcanvas对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 填充多边形。\n\n\n\n",
        "name": "vgcanvas_fill",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "vgcanvas_t*",
            "name": "vg",
            "desc": "vgcanvas对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 画线。\n\n\n\n",
        "name": "vgcanvas_stroke",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "vgcanvas_t*",
            "name": "vg",
            "desc": "vgcanvas对象。"
          },
          {
            "type": "bool_t",
            "name": "stroke",
            "desc": "TRUE表示画线FALSE表示填充。"
          },
          {
            "type": "bitmap_t*",
            "name": "img",
            "desc": "图片。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 用图片填充/画多边形(可能存在可移植性问题，除非必要请勿使用)。\n 多边形的顶点必须在图片范围内，可以通过矩阵变化画到不同的位置。\n\n\n\n",
        "name": "vgcanvas_paint",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "vgcanvas_t*",
            "name": "vg",
            "desc": "vgcanvas对象。"
          },
          {
            "type": "char*",
            "name": "font",
            "desc": "字体名称。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 设置字体的名称。\n\n\n\n",
        "name": "vgcanvas_set_font",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "vgcanvas_t*",
            "name": "vg",
            "desc": "vgcanvas对象。"
          },
          {
            "type": "float_t",
            "name": "font",
            "desc": "字体大小。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 设置字体的大小。\n\n\n\n",
        "name": "vgcanvas_set_font_size",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "vgcanvas_t*",
            "name": "vg",
            "desc": "vgcanvas对象。"
          },
          {
            "type": "char*",
            "name": "value",
            "desc": "取值：left|center|right，必须为常量字符串。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 设置文本水平对齐的方式。\n\n\n\n",
        "name": "vgcanvas_set_text_align",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "vgcanvas_t*",
            "name": "vg",
            "desc": "vgcanvas对象。"
          },
          {
            "type": "char*",
            "name": "value",
            "desc": "取值：top|middle|bottom，必须为常量字符串。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 设置文本垂直对齐的方式。\n\n\n\n",
        "name": "vgcanvas_set_text_baseline",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "vgcanvas_t*",
            "name": "vg",
            "desc": "vgcanvas对象。"
          },
          {
            "type": "char*",
            "name": "text",
            "desc": "text"
          },
          {
            "type": "float_t",
            "name": "x",
            "desc": "x坐标。"
          },
          {
            "type": "float_t",
            "name": "y",
            "desc": "y坐标。"
          },
          {
            "type": "float_t",
            "name": "max_width",
            "desc": "最大宽度。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 绘制文本。\n\n\n\n",
        "name": "vgcanvas_fill_text",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "vgcanvas_t*",
            "name": "vg",
            "desc": "vgcanvas对象。"
          },
          {
            "type": "char*",
            "name": "text",
            "desc": "text"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 测量文本的宽度。\n\n\n\n",
        "name": "vgcanvas_measure_text",
        "return": {
          "type": "float_t",
          "desc": "返回text的宽度。"
        }
      },
      {
        "params": [
          {
            "type": "vgcanvas_t*",
            "name": "vg",
            "desc": "vgcanvas对象。"
          },
          {
            "type": "bitmap_t*",
            "name": "img",
            "desc": "图片。"
          },
          {
            "type": "float_t",
            "name": "sx",
            "desc": "sx"
          },
          {
            "type": "float_t",
            "name": "sy",
            "desc": "sy"
          },
          {
            "type": "float_t",
            "name": "sw",
            "desc": "sw"
          },
          {
            "type": "float_t",
            "name": "sh",
            "desc": "sh"
          },
          {
            "type": "float_t",
            "name": "dx",
            "desc": "dx"
          },
          {
            "type": "float_t",
            "name": "dy",
            "desc": "dy"
          },
          {
            "type": "float_t",
            "name": "dw",
            "desc": "dw"
          },
          {
            "type": "float_t",
            "name": "dh",
            "desc": "dh"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 绘制图片。\n\n\n\n",
        "name": "vgcanvas_draw_image",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "vgcanvas_t*",
            "name": "vg",
            "desc": "vgcanvas对象。"
          },
          {
            "type": "bitmap_t*",
            "name": "img",
            "desc": "图片。"
          },
          {
            "type": "float_t",
            "name": "sx",
            "desc": "sx"
          },
          {
            "type": "float_t",
            "name": "sy",
            "desc": "sy"
          },
          {
            "type": "float_t",
            "name": "sw",
            "desc": "sw"
          },
          {
            "type": "float_t",
            "name": "sh",
            "desc": "sh"
          },
          {
            "type": "float_t",
            "name": "dx",
            "desc": "dx"
          },
          {
            "type": "float_t",
            "name": "dy",
            "desc": "dy"
          },
          {
            "type": "float_t",
            "name": "dw",
            "desc": "dw"
          },
          {
            "type": "float_t",
            "name": "dh",
            "desc": "dh"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 绘制图标。\n\n 绘制图标时会根据屏幕密度进行自动缩放，而绘制普通图片时不会。\n\n\n\n",
        "name": "vgcanvas_draw_icon",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "vgcanvas_t*",
            "name": "vg",
            "desc": "vgcanvas对象。"
          },
          {
            "type": "bool_t",
            "name": "value",
            "desc": "是否启用反走样。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 设置是否启用反走样。\n\n\n\n",
        "name": "vgcanvas_set_antialias",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "vgcanvas_t*",
            "name": "vg",
            "desc": "vgcanvas对象。"
          },
          {
            "type": "float_t",
            "name": "alpha",
            "desc": "global alpha。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 设置全局透明度。\n\n\n\n",
        "name": "vgcanvas_set_global_alpha",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "vgcanvas_t*",
            "name": "vg",
            "desc": "vgcanvas对象。"
          },
          {
            "type": "float_t",
            "name": "value",
            "desc": "线宽。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 设置线条的宽度。\n\n\n\n",
        "name": "vgcanvas_set_line_width",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "vgcanvas_t*",
            "name": "vg",
            "desc": "vgcanvas对象。"
          },
          {
            "type": "color_t",
            "name": "color",
            "desc": "颜色。"
          }
        ],
        "annotation": {},
        "desc": " 设置填充颜色。\n\n\n\n",
        "name": "vgcanvas_set_fill_color",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "vgcanvas_t*",
            "name": "vg",
            "desc": "vgcanvas对象。"
          },
          {
            "type": "const char*",
            "name": "color",
            "desc": "颜色。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 设置填充颜色。\n\n\n\n",
        "name": "vgcanvas_set_fill_color_str",
        "alias": "vgcanvas_set_fill_color",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "vgcanvas_t*",
            "name": "vg",
            "desc": "vgcanvas对象。"
          },
          {
            "type": "float_t",
            "name": "sx",
            "desc": "start x"
          },
          {
            "type": "float_t",
            "name": "sy",
            "desc": "start y"
          },
          {
            "type": "float_t",
            "name": "ex",
            "desc": "end x"
          },
          {
            "type": "float_t",
            "name": "ey",
            "desc": "end y"
          },
          {
            "type": "color_t",
            "name": "icolor",
            "desc": "开始颜色。"
          },
          {
            "type": "color_t",
            "name": "ocolor",
            "desc": "结束颜色。"
          }
        ],
        "annotation": {},
        "desc": " 设置填充颜色为线性渐变色。\n\n\n\n",
        "name": "vgcanvas_set_fill_linear_gradient",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "vgcanvas_t*",
            "name": "vg",
            "desc": "vgcanvas对象。"
          },
          {
            "type": "float_t",
            "name": "cx",
            "desc": "center x"
          },
          {
            "type": "float_t",
            "name": "cy",
            "desc": "center y"
          },
          {
            "type": "float_t",
            "name": "inr",
            "desc": "内环半径"
          },
          {
            "type": "float_t",
            "name": "outr",
            "desc": "外环半径。"
          },
          {
            "type": "color_t",
            "name": "icolor",
            "desc": "开始颜色。"
          },
          {
            "type": "color_t",
            "name": "ocolor",
            "desc": "结束颜色。"
          }
        ],
        "annotation": {},
        "desc": " 设置填充颜色为径向渐变色。\n\n\n\n",
        "name": "vgcanvas_set_fill_radial_gradient",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "vgcanvas_t*",
            "name": "vg",
            "desc": "vgcanvas对象。"
          },
          {
            "type": "color_t",
            "name": "color",
            "desc": "颜色。"
          }
        ],
        "annotation": {},
        "desc": " 设置线条颜色。\n\n\n\n",
        "name": "vgcanvas_set_stroke_color",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "vgcanvas_t*",
            "name": "vg",
            "desc": "vgcanvas对象。"
          },
          {
            "type": "const char*",
            "name": "color",
            "desc": "颜色。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 设置线条颜色。\n\n\n\n",
        "name": "vgcanvas_set_stroke_color_str",
        "alias": "vgcanvas_set_stroke_color",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "vgcanvas_t*",
            "name": "vg",
            "desc": "vgcanvas对象。"
          },
          {
            "type": "float_t",
            "name": "sx",
            "desc": "start x"
          },
          {
            "type": "float_t",
            "name": "sy",
            "desc": "start y"
          },
          {
            "type": "float_t",
            "name": "ex",
            "desc": "end x"
          },
          {
            "type": "float_t",
            "name": "ey",
            "desc": "end y"
          },
          {
            "type": "color_t",
            "name": "icolor",
            "desc": "开始颜色。"
          },
          {
            "type": "color_t",
            "name": "ocolor",
            "desc": "结束颜色。"
          }
        ],
        "annotation": {},
        "desc": " 设置线条颜色为线性渐变色。\n\n\n\n",
        "name": "vgcanvas_set_stroke_linear_gradient",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "vgcanvas_t*",
            "name": "vg",
            "desc": "vgcanvas对象。"
          },
          {
            "type": "float_t",
            "name": "cx",
            "desc": "center x"
          },
          {
            "type": "float_t",
            "name": "cy",
            "desc": "center y"
          },
          {
            "type": "float_t",
            "name": "inr",
            "desc": "内环半径"
          },
          {
            "type": "float_t",
            "name": "outr",
            "desc": "外环半径。"
          },
          {
            "type": "color_t",
            "name": "icolor",
            "desc": "开始颜色。"
          },
          {
            "type": "color_t",
            "name": "ocolor",
            "desc": "结束颜色。"
          }
        ],
        "annotation": {},
        "desc": " 设置线条颜色为径向渐变色。\n\n\n\n",
        "name": "vgcanvas_set_stroke_radial_gradient",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "vgcanvas_t*",
            "name": "vg",
            "desc": "vgcanvas对象。"
          },
          {
            "type": "char*",
            "name": "value",
            "desc": "取值：butt|round|square，必须为常量字符串。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 设置line cap。\n\n\n\n",
        "name": "vgcanvas_set_line_cap",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "vgcanvas_t*",
            "name": "vg",
            "desc": "vgcanvas对象。"
          },
          {
            "type": "char*",
            "name": "value",
            "desc": "取值：bevel|round|miter，必须为常量字符串。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 设置line join。\n\n\n\n",
        "name": "vgcanvas_set_line_join",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "vgcanvas_t*",
            "name": "vg",
            "desc": "vgcanvas对象。"
          },
          {
            "type": "float_t",
            "name": "value",
            "desc": "miter limit"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 设置miter limit。\n\n\n\n",
        "name": "vgcanvas_set_miter_limit",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "vgcanvas_t*",
            "name": "vg",
            "desc": "vgcanvas对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 保存当前的状态。如颜色和矩阵等信息。\n\n > save/restore必须配套使用，否则可能导致状态混乱。\n\n\n\n",
        "name": "vgcanvas_save",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "vgcanvas_t*",
            "name": "vg",
            "desc": "vgcanvas对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 恢复上次save的状态。\n\n> save/restore必须配套使用，否则可能导致状态混乱。\n\n\n\n",
        "name": "vgcanvas_restore",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "vgcanvas_t*",
            "name": "vg",
            "desc": "vgcanvas对象。"
          }
        ],
        "annotation": {},
        "desc": " 结束绘制。系统内部调用。\n\n\n",
        "name": "vgcanvas_end_frame",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "vgcanvas_t*",
            "name": "vg",
            "desc": "vgcanvas对象。"
          }
        ],
        "annotation": {},
        "desc": " 销毁vgcanvas对象。\n\n\n",
        "name": "vgcanvas_destroy",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      }
    ],
    "events": [],
    "properties": [
      {
        "name": "w",
        "desc": " canvas的宽度\n\n",
        "type": "wh_t",
        "annotation": {
          "readable": true,
          "scriptable": true
        }
      },
      {
        "name": "h",
        "desc": " canvas的高度\n\n",
        "type": "wh_t",
        "annotation": {
          "readable": true,
          "scriptable": true
        }
      },
      {
        "name": "ratio",
        "desc": " 显示比例。\n\n",
        "type": "float_t",
        "annotation": {
          "readable": true,
          "scriptable": true
        }
      },
      {
        "name": "anti_alias",
        "desc": " 是否启用反走样功能。\n\n",
        "type": "bool_t",
        "annotation": {
          "readable": true,
          "scriptable": true
        }
      },
      {
        "name": "line_width",
        "desc": " 线宽。\n\n",
        "type": "float_t",
        "annotation": {
          "readable": true,
          "scriptable": true
        }
      },
      {
        "name": "global_alpha",
        "desc": " 全局alpha。\n\n",
        "type": "float_t",
        "annotation": {
          "readable": true,
          "scriptable": true
        }
      },
      {
        "name": "miter_limit",
        "desc": " miter\\_limit。\n @see http://www.w3school.com.cn/tags/canvas_miterlimit.asp\n\n",
        "type": "float_t",
        "annotation": {
          "readable": true,
          "scriptable": true
        }
      },
      {
        "name": "line_cap",
        "desc": " line\\_cap。\n @see http://www.w3school.com.cn/tags/canvas_linecap.asp\n\n",
        "type": "char*",
        "annotation": {
          "readable": true,
          "scriptable": true
        }
      },
      {
        "name": "line_join",
        "desc": " line\\_join。\n @see http://www.w3school.com.cn/tags/canvas_linejoin.asp\n\n",
        "type": "char*",
        "annotation": {
          "readable": true,
          "scriptable": true
        }
      },
      {
        "name": "font",
        "desc": " 字体。\n\n",
        "type": "char*",
        "annotation": {
          "readable": true,
          "scriptable": true
        }
      },
      {
        "name": "font_size",
        "desc": " 字体大小。\n\n",
        "type": "float_t",
        "annotation": {
          "readable": true,
          "scriptable": true
        }
      },
      {
        "name": "text_align",
        "desc": " 文本对齐方式。\n\n @see http://www.w3school.com.cn/tags/canvas_textalign.asp\n\n",
        "type": "char*",
        "annotation": {
          "readable": true,
          "scriptable": true
        }
      },
      {
        "name": "text_baseline",
        "desc": " 文本基线。\n\n @see http://www.w3school.com.cn/tags/canvas_textbaseline.asp\n\n",
        "type": "char*",
        "annotation": {
          "readable": true,
          "scriptable": true
        }
      },
      {
        "name": "fill_color",
        "desc": " 填充颜色\n\n",
        "type": "color_t",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "stroke_color",
        "desc": " 线条颜色\n\n",
        "type": "color_t",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "buff;",
        "desc": " frame buffer\n\n",
        "type": "uint32_t*",
        "annotation": {
          "private": true
        }
      }
    ],
    "header": "base/vgcanvas.h",
    "desc": " 矢量图画布抽象基类。\n\n 具体实现时可以使用agg，nanovg, cairo和skia等方式。\n\n cairo和skia体积太大，不适合嵌入式平台，但在PC平台也是一种选择。\n\n 目前我们只提供了基于nanovg的实现，支持软件渲染和硬件渲染。\n\n 我们对nanovg进行了一些改进:\n\n * 可以用agg/agge实现软件渲染(暂时不支持文本绘制)。\n\n * 可以用bgfx使用DirectX(Windows平台)和Metal(iOS)平台硬件加速。\n\n ```graphviz\n   [default_style]\n\n   vgcanvas_cairo_t -> vgcanvas_t[arrowhead = \"empty\"]\n   vgcanvas_nanovg_t -> vgcanvas_t[arrowhead = \"empty\"]\n   opengl -> vgcanvas_nanovg_t[arrowhead = \"none\"]\n   bgfx -> vgcanvas_nanovg_t[arrowhead = \"none\"]\n   agg -> vgcanvas_nanovg_t[arrowhead = \"none\"]\n   agge -> vgcanvas_nanovg_t[arrowhead = \"none\"]\n   vgcanvas_skia_t -> vgcanvas_t[arrowhead = \"empty\"]\n   vgcanvas_agge_t -> vgcanvas_t[arrowhead = \"empty\"]\n ```\n\n 示例：\n\n ```c\n   vgcanvas_t* vg = canvas_get_vgcanvas(c);\n   vgcanvas_save(vg);\n   vgcanvas_translate(vg, 0, 100);\n\n   vgcanvas_set_line_width(vg, 1);\n   vgcanvas_set_fill_color(vg, color_init(0xff, 0, 0, 0xff));\n   vgcanvas_rect(vg, 5, 5, 100, 100);\n   vgcanvas_fill(vg);\n   vgcanvas_restore(vg);\n ```\n\n >请参考：https://www.w3schools.com/tags/ref_canvas.asp\n\n\n",
    "name": "vgcanvas_t",
    "annotation": {
      "scriptable": true
    },
    "level": 1
  },
  {
    "params": [
      {
        "type": "widget_t*",
        "name": "widget",
        "desc": "动画应用的控件。"
      },
      {
        "type": "const char*",
        "name": "params",
        "desc": "参数。"
      }
    ],
    "annotation": {
      "global": true
    },
    "desc": " 创建animator对象。\n\n\n",
    "name": "widget_animator_create",
    "return": {
      "type": "widget_animator_t*",
      "desc": "动画对象。"
    },
    "type": "method",
    "header": "base/widget_animator_factory.h",
    "level": 1
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [],
        "annotation": {
          "constructor": true
        },
        "desc": " 获取缺省的控件动画管理器。\n\n",
        "name": "widget_animator_manager",
        "alias": "widget_animator_manager_instance",
        "return": {
          "type": "widget_animator_manager_t*",
          "desc": "返回控件动画管理器。"
        }
      },
      {
        "params": [
          {
            "type": "widget_animator_manager_t*",
            "name": "am",
            "desc": "控件动画管理器。"
          }
        ],
        "annotation": {},
        "desc": " 设置缺省的控件动画管理器。\n\n\n",
        "name": "widget_animator_manager_set",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [],
        "annotation": {
          "constructor": true
        },
        "desc": " 创建控件动画管理器。\n\n\n",
        "name": "widget_animator_manager_create",
        "return": {
          "type": "widget_animator_manager_t*",
          "desc": "返回控件动画管理器。"
        }
      },
      {
        "params": [
          {
            "type": "widget_animator_manager_t*",
            "name": "am",
            "desc": "控件动画管理器。"
          }
        ],
        "annotation": {
          "constructor": true
        },
        "desc": " 初始化控件动画管理器。\n\n\n",
        "name": "widget_animator_manager_init",
        "return": {
          "type": "widget_animator_manager_t*",
          "desc": "返回控件动画管理器。"
        }
      },
      {
        "params": [
          {
            "type": "widget_animator_manager_t*",
            "name": "am",
            "desc": "控件动画管理器。"
          }
        ],
        "annotation": {},
        "desc": " 析构控件动画管理器。\n\n\n",
        "name": "widget_animator_manager_deinit",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_animator_manager_t*",
            "name": "am",
            "desc": "控件动画管理器。"
          }
        ],
        "annotation": {},
        "desc": " 析构并释放控件动画管理器。\n\n\n",
        "name": "widget_animator_manager_destroy",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_animator_manager_t*",
            "name": "am",
            "desc": "控件动画管理器。"
          },
          {
            "type": "widget_animator_t*",
            "name": "animator",
            "desc": "动画对象。"
          }
        ],
        "annotation": {},
        "desc": " 添加指定的动画，动画在创建时调用本函数。\n\n\n",
        "name": "widget_animator_manager_add",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_animator_manager_t*",
            "name": "am",
            "desc": "控件动画管理器。"
          },
          {
            "type": "widget_animator_t*",
            "name": "animator",
            "desc": "动画对象。"
          }
        ],
        "annotation": {},
        "desc": " 移出指定的动画，动画在销毁时调用本函数。。\n\n\n",
        "name": "widget_animator_manager_remove",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_animator_manager_t*",
            "name": "am",
            "desc": "控件动画管理器。"
          }
        ],
        "annotation": {},
        "desc": " 获取动画个数。\n\n\n",
        "name": "widget_animator_manager_count",
        "return": {
          "type": "ret_t",
          "desc": "返回动画个数。"
        }
      },
      {
        "params": [
          {
            "type": "widget_animator_manager_t*",
            "name": "am",
            "desc": "控件动画管理器。"
          },
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "const char*",
            "name": "name",
            "desc": "动画名称。"
          }
        ],
        "annotation": {},
        "desc": " 播放满足条件的动画。\n 1.widget为NULL时，播放所有名称为name的动画。\n 2.name为NULL时，播放所有widget相关的动画。\n 3.widget和name均为NULL，播放所有动画。\n\n\n",
        "name": "widget_animator_manager_start",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_animator_manager_t*",
            "name": "am",
            "desc": "控件动画管理器。"
          },
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "const char*",
            "name": "name",
            "desc": "动画名称。"
          }
        ],
        "annotation": {},
        "desc": " 停止满足条件的动画。\n 1.widget为NULL时，停止所有名称为name的动画。\n 2.name为NULL时，停止所有widget相关的动画。\n 3.widget和name均为NULL，停止所有动画。\n\n\n",
        "name": "widget_animator_manager_stop",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_animator_manager_t*",
            "name": "am",
            "desc": "控件动画管理器。"
          },
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "const char*",
            "name": "name",
            "desc": "动画名称。"
          }
        ],
        "annotation": {},
        "desc": " 暂停满足条件的动画。\n 1.widget为NULL时，暂停所有名称为name的动画。\n 2.name为NULL时，暂停所有widget相关的动画。\n 3.widget和name均为NULL，暂停所有动画。\n\n\n",
        "name": "widget_animator_manager_pause",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_animator_manager_t*",
            "name": "am",
            "desc": "控件动画管理器。"
          },
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "const char*",
            "name": "name",
            "desc": "动画名称。"
          }
        ],
        "annotation": {},
        "desc": " 销毁满足条件的动画。\n\n\n",
        "name": "widget_animator_manager_remove_all",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_animator_manager_t*",
            "name": "am",
            "desc": "控件动画管理器。"
          },
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "const char*",
            "name": "name",
            "desc": "动画名称。"
          },
          {
            "type": "float_t",
            "name": "time_scale",
            "desc": "时间倍率。"
          }
        ],
        "annotation": {},
        "desc": " 设置时间倍率。\n 设置动画的时间倍率，<0: 时间倒退，<1: 时间变慢，>1 时间变快。\n\n\n",
        "name": "widget_animator_manager_set_time_scale",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_animator_manager_t*",
            "name": "am",
            "desc": "控件动画管理器。"
          },
          {
            "type": "uint32_t",
            "name": "delta_time",
            "desc": "流失的时间(毫秒)。"
          }
        ],
        "annotation": {},
        "desc": " 时间流失，调用本函数更新动画(public for test)。\n\n\n\n",
        "name": "widget_animator_manager_time_elapse",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      }
    ],
    "events": [],
    "properties": [
      {
        "name": "time_scale",
        "desc": " 时间倍率，可以让时间变快或变慢。\n\n",
        "type": "float_t"
      }
    ],
    "header": "base/widget_animator_manager.h",
    "desc": " 控件动画管理器。\n\n",
    "name": "widget_animator_t",
    "level": 1
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "widget_animator_t*",
            "name": "animator",
            "desc": "动画对象。"
          },
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "uint32_t",
            "name": "duration",
            "desc": "动画持续时间。"
          },
          {
            "type": "uint32_t",
            "name": "delay",
            "desc": "动画执行时间。"
          },
          {
            "type": "easing_func_t",
            "name": "",
            "desc": "。"
          }
        ],
        "annotation": {},
        "desc": " 初始化。仅供子类内部使用。\n\n\n",
        "name": "widget_animator_init",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_animator_t*",
            "name": "animator",
            "desc": "动画对象。"
          },
          {
            "type": "const char*",
            "name": "name",
            "desc": "名称。"
          }
        ],
        "annotation": {},
        "desc": " 设置名称。\n\n\n",
        "name": "widget_animator_set_name",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_animator_t*",
            "name": "animator",
            "desc": "动画对象。"
          },
          {
            "type": "uint32_t",
            "name": "yoyo_times",
            "desc": "yoyo的次数，往返视为两次。"
          }
        ],
        "annotation": {},
        "desc": " 设置为yoyo模式。\n\n\n",
        "name": "widget_animator_set_yoyo",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_animator_t*",
            "name": "animator",
            "desc": "动画对象。"
          },
          {
            "type": "uint32_t",
            "name": "repeat_times",
            "desc": "重复的次数。"
          }
        ],
        "annotation": {},
        "desc": " 设置为重复模式。\n\n\n",
        "name": "widget_animator_set_repeat",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_animator_t*",
            "name": "animator",
            "desc": "动画对象。"
          },
          {
            "type": "bool_t",
            "name": "value",
            "desc": "是否为逆向模式。"
          }
        ],
        "annotation": {},
        "desc": " 设置为逆向模式。\n\n\n",
        "name": "widget_animator_set_reversed",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_animator_t*",
            "name": "animator",
            "desc": "动画对象。"
          },
          {
            "type": "float_t",
            "name": "time_scale",
            "desc": "时间倍率。"
          }
        ],
        "annotation": {},
        "desc": " 设置时间倍率，用于实现时间加速减速和停滞的功能。\n\n\n",
        "name": "widget_animator_set_time_scale",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_animator_t*",
            "name": "animator",
            "desc": "动画对象。"
          },
          {
            "type": "event_type_t",
            "name": "",
            "desc": "e"
          },
          {
            "type": "event_func_t",
            "name": "on_event",
            "desc": "事件处理函数。"
          },
          {
            "type": "void*",
            "name": "ctx",
            "desc": "事件处理函数上下文。"
          }
        ],
        "annotation": {
          "scriptable": "custom"
        },
        "desc": " 注册指定事件的处理函数。\n 事件类型。目前支持：EVT_ANIM_START,EVT_ANIM_STOP,EVT_ANIM_PAUSE,EVT_ANIM_ONCE和EVT_ANIM_END。\n\n\n",
        "name": "widget_animator_on",
        "return": {
          "type": "uint32_t",
          "desc": "返回id，用于widget_animator_off。"
        }
      },
      {
        "params": [
          {
            "type": "widget_animator_t*",
            "name": "animator",
            "desc": "动画对象。"
          },
          {
            "type": "uint32_t",
            "name": "id",
            "desc": "widget_animator_on返回的ID。"
          }
        ],
        "annotation": {
          "scriptable": "custom"
        },
        "desc": " 注销指定事件的处理函数。\n\n\n",
        "name": "widget_animator_off",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_animator_t*",
            "name": "animator",
            "desc": "动画对象。"
          }
        ],
        "annotation": {},
        "desc": " 启动动画。\n\n\n",
        "name": "widget_animator_start",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_animator_t*",
            "name": "animator",
            "desc": "动画对象。"
          }
        ],
        "annotation": {},
        "desc": " 停止动画。\n\n\n",
        "name": "widget_animator_stop",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_animator_t*",
            "name": "animator",
            "desc": "动画对象。"
          }
        ],
        "annotation": {},
        "desc": " 暂停动画。\n\n\n",
        "name": "widget_animator_pause",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_animator_t*",
            "name": "animator",
            "desc": "动画对象。"
          },
          {
            "type": "bool_t",
            "name": "destroy_when_done",
            "desc": "完成时是否自动销毁动画对象。"
          }
        ],
        "annotation": {},
        "desc": " 设置完成时是否自动销毁动画对象(缺省销毁)。\n\n\n",
        "name": "widget_animator_set_destroy_when_done",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_animator_t*",
            "name": "animator",
            "desc": "动画对象。"
          },
          {
            "type": "uint32_t",
            "name": "delta_time",
            "desc": "时间增量。"
          }
        ],
        "annotation": {
          "private": true
        },
        "desc": " 时间流失，更新动画(由动画管理器调用)。\n\n\n",
        "name": "widget_animator_time_elapse",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_animator_t*",
            "name": "animator",
            "desc": "动画对象。"
          }
        ],
        "annotation": {},
        "desc": " 销毁animator对象。\n\n\n",
        "name": "widget_animator_destroy",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      }
    ],
    "events": [],
    "properties": [
      {
        "name": "name",
        "desc": " 名称。\n\n",
        "type": "char*"
      },
      {
        "name": "widget",
        "desc": " 控件对象。\n\n",
        "type": "widget_t*",
        "annotation": {
          "private": true
        }
      },
      {
        "name": "reversed",
        "desc": " 逆向运行，在yoyo模式下自动设置。\n\n",
        "type": "bool_t",
        "annotation": {
          "private": true
        }
      },
      {
        "name": "yoyo_times",
        "desc": " yoyo剩余次数。\n\n",
        "type": "uint32_t",
        "annotation": {
          "private": true
        }
      },
      {
        "name": "repeat_times",
        "desc": " 重复剩余次数。\n\n",
        "type": "uint32_t",
        "annotation": {
          "private": true
        }
      },
      {
        "name": "now",
        "desc": " 当前时间(毫秒)。\n\n",
        "type": "uint32_t",
        "annotation": {
          "private": true
        }
      },
      {
        "name": "time_scale",
        "desc": " 时间倍率。\n\n",
        "type": "float_t",
        "annotation": {
          "private": true
        }
      },
      {
        "name": "start_time",
        "desc": " 起始时间(毫秒)。\n\n",
        "type": "uint32_t",
        "annotation": {
          "private": true
        }
      },
      {
        "name": "delay",
        "desc": " 延迟执行时间(毫秒)。\n\n",
        "type": "uint32_t",
        "annotation": {
          "private": true
        }
      },
      {
        "name": "duration",
        "desc": " 单次动画执行时间(毫秒)。\n\n",
        "type": "uint32_t",
        "annotation": {
          "private": true
        }
      },
      {
        "name": "state",
        "desc": " 动画的状态。\n\n",
        "type": "animator_state_t",
        "annotation": {
          "private": true
        }
      },
      {
        "name": "emitter",
        "desc": " emitter\n\n",
        "type": "uint32_t",
        "annotation": {
          "private": true
        }
      },
      {
        "name": "destroy_when_done;",
        "desc": " 播放完成时是否自动销毁(缺省销毁)。\n\n",
        "type": "bool_t",
        "annotation": {
          "private": true
        }
      },
      {
        "name": "forever",
        "desc": " 是否永远播放(yoyo_times/repeat_times为0时，自动设置此标志)。\n\n",
        "type": "bool_t",
        "annotation": {
          "private": true
        }
      },
      {
        "name": "widget_destroy_id",
        "desc": " widget_destroy_id。\n\n",
        "type": "uint32_t",
        "annotation": {
          "private": true
        }
      },
      {
        "name": "easing",
        "desc": " 插值函数。\n\n",
        "type": "easing_func_t",
        "annotation": {
          "private": true
        }
      },
      {
        "name": "update",
        "desc": " update函数，子类需要实现。\n\n",
        "type": "widget_animator_update_t",
        "annotation": {
          "private": true
        }
      },
      {
        "name": "destroy",
        "desc": " destroy函数，子类需要实现。\n\n",
        "type": "widget_animator_destroy_t",
        "annotation": {
          "private": true
        }
      }
    ],
    "header": "base/widget_animator.h",
    "desc": " 控件动画接口。\n\n",
    "name": "widget_animator_t",
    "level": 1
  },
  {
    "type": "enum",
    "desc": " 控件的属性。\n\n",
    "consts": [
      {
        "desc": " X坐标。\n\n",
        "name": "WIDGET_PROP_X"
      },
      {
        "desc": " Y坐标。\n\n",
        "name": "WIDGET_PROP_Y"
      },
      {
        "desc": " 宽度。\n\n",
        "name": "WIDGET_PROP_W"
      },
      {
        "desc": " 高度。\n\n",
        "name": "WIDGET_PROP_H"
      },
      {
        "desc": " 不透明度。\n\n",
        "name": "WIDGET_PROP_OPACITY"
      },
      {
        "desc": " 最小宽度。\n\n",
        "name": "WIDGET_PROP_MIN_W"
      },
      {
        "desc": " 最大宽度。\n\n",
        "name": "WIDGET_PROP_MAX_W"
      },
      {
        "desc": " 子控件布局参数。\n\n",
        "name": "WIDGET_PROP_CHILDREN_LAYOUT"
      },
      {
        "desc": " 子控件布局参数(过时)。\n\n",
        "name": "WIDGET_PROP_LAYOUT"
      },
      {
        "desc": " 控件布局参数。\n\n",
        "name": "WIDGET_PROP_SELF_LAYOUT"
      },
      {
        "desc": " layout宽度。\n\n",
        "name": "WIDGET_PROP_LAYOUT_W"
      },
      {
        "desc": " layout高度。\n\n",
        "name": "WIDGET_PROP_LAYOUT_H"
      },
      {
        "desc": " 虚拟宽度。\n\n",
        "name": "WIDGET_PROP_VIRTUAL_W"
      },
      {
        "desc": " 虚拟高度。\n\n",
        "name": "WIDGET_PROP_VIRTUAL_H"
      },
      {
        "desc": " 名称。\n\n",
        "name": "WIDGET_PROP_NAME"
      },
      {
        "desc": " 是否可以关闭。\n\n",
        "name": "WIDGET_PROP_CLOSABLE"
      },
      {
        "desc": " 鼠标指针。\n\n",
        "name": "WIDGET_PROP_CURSOR"
      },
      {
        "desc": " 值。\n\n",
        "name": "WIDGET_PROP_VALUE"
      },
      {
        "desc": " 长度。\n\n",
        "name": "WIDGET_PROP_LENGTH"
      },
      {
        "desc": " 文本。\n\n",
        "name": "WIDGET_PROP_TEXT"
      },
      {
        "desc": " 待翻译文本。\n\n",
        "name": "WIDGET_PROP_TR_TEXT"
      },
      {
        "desc": " style。\n\n",
        "name": "WIDGET_PROP_STYLE"
      },
      {
        "desc": " 是否启用。\n\n",
        "name": "WIDGET_PROP_ENABLE"
      },
      {
        "desc": " 是否启用floating布局。\n\n",
        "name": "WIDGET_PROP_FLOATING"
      },
      {
        "desc": " 边距。\n\n",
        "name": "WIDGET_PROP_MARGIN"
      },
      {
        "desc": " 间距。\n\n",
        "name": "WIDGET_PROP_SPACING"
      },
      {
        "desc": " 左边距。\n\n",
        "name": "WIDGET_PROP_LEFT_MARGIN"
      },
      {
        "desc": " 右边距。\n\n",
        "name": "WIDGET_PROP_RIGHT_MARGIN"
      },
      {
        "desc": " 顶边距。\n\n",
        "name": "WIDGET_PROP_TOP_MARGIN"
      },
      {
        "desc": " 底边距。\n\n",
        "name": "WIDGET_PROP_BOTTOM_MARGIN"
      },
      {
        "desc": " 步长。\n\n",
        "name": "WIDGET_PROP_STEP"
      },
      {
        "desc": " 是否可见。\n\n",
        "name": "WIDGET_PROP_VISIBLE"
      },
      {
        "desc": " 是否接受用户事件。\n\n",
        "name": "WIDGET_PROP_SENSITIVE"
      },
      {
        "desc": " 控件动画。\n\n",
        "name": "WIDGET_PROP_ANIMATION"
      },
      {
        "desc": " 窗口动画。\n\n",
        "name": "WIDGET_PROP_ANIM_HINT"
      },
      {
        "desc": " 打开窗口动画。\n\n",
        "name": "WIDGET_PROP_OPEN_ANIM_HINT"
      },
      {
        "desc": " 关闭窗口动画。\n\n",
        "name": "WIDGET_PROP_CLOSE_ANIM_HINT"
      },
      {
        "desc": "\n\n",
        "name": "WIDGET_PROP_MIN"
      },
      {
        "desc": "\n\n",
        "name": "WIDGET_PROP_TIPS"
      },
      {
        "desc": "\n\n",
        "name": "WIDGET_PROP_INPUT_TYPE"
      },
      {
        "desc": "\n\n",
        "name": "WIDGET_PROP_READONLY"
      },
      {
        "desc": "\n\n",
        "name": "WIDGET_PROP_PASSWORD_VISIBLE"
      },
      {
        "desc": "\n\n",
        "name": "WIDGET_PROP_ACTIVE"
      },
      {
        "desc": "\n\n",
        "name": "WIDGET_PROP_VERTICAL"
      },
      {
        "desc": "\n\n",
        "name": "WIDGET_PROP_SHOW_TEXT"
      },
      {
        "desc": "\n\n",
        "name": "WIDGET_PROP_XOFFSET"
      },
      {
        "desc": "\n\n",
        "name": "WIDGET_PROP_YOFFSET"
      },
      {
        "desc": "\n\n",
        "name": "WIDGET_PROP_ALIGN_V"
      },
      {
        "desc": "\n\n",
        "name": "WIDGET_PROP_ALIGN_H"
      },
      {
        "desc": "\n\n",
        "name": "WIDGET_PROP_AUTO_PLAY"
      },
      {
        "desc": "\n\n",
        "name": "WIDGET_PROP_AUTO_FIX"
      },
      {
        "desc": "\n\n",
        "name": "WIDGET_PROP_X_MIN"
      },
      {
        "desc": "\n\n",
        "name": "WIDGET_PROP_X_MAX"
      },
      {
        "desc": "\n\n",
        "name": "WIDGET_PROP_Y_MIN"
      },
      {
        "desc": "\n\n",
        "name": "WIDGET_PROP_Y_MAX"
      },
      {
        "desc": "\n\n",
        "name": "WIDGET_PROP_MAX"
      },
      {
        "desc": "\n\n",
        "name": "WIDGET_PROP_ROW"
      },
      {
        "desc": " 控件状态。\n\n",
        "name": "WIDGET_PROP_STATE_FOR_STYLE"
      },
      {
        "desc": " 窗口主题名称。\n\n",
        "name": "WIDGET_PROP_THEME"
      },
      {
        "desc": " window stage\n\n",
        "name": "WIDGET_PROP_STAGE"
      },
      {
        "desc": " 图片管理器。\n\n",
        "name": "WIDGET_PROP_IMAGE_MANAGER"
      },
      {
        "desc": " 资源管理器。\n\n",
        "name": "WIDGET_PROP_ASSETS_MANAGER"
      },
      {
        "desc": " 字体管理器。\n\n",
        "name": "WIDGET_PROP_FONT_MANAGER"
      },
      {
        "desc": " 窗口的主题对象。\n\n",
        "name": "WIDGET_PROP_THEME_OBJ"
      },
      {
        "desc": " 缺省的主题对象。\n\n",
        "name": "WIDGET_PROP_DEFAULT_THEME_OBJ"
      },
      {
        "desc": "\n\n",
        "name": "WIDGET_PROP_SCRIPT"
      },
      {
        "desc": "\n\n",
        "name": "WIDGET_PROP_ITEM_WIDTH"
      },
      {
        "desc": "\n\n",
        "name": "WIDGET_PROP_ITEM_HEIGHT"
      },
      {
        "desc": "\n\n",
        "name": "WIDGET_PROP_DEFAULT_ITEM_HEIGHT"
      },
      {
        "desc": "\n\n",
        "name": "WIDGET_PROP_XSLIDABLE"
      },
      {
        "desc": "\n\n",
        "name": "WIDGET_PROP_YSLIDABLE"
      },
      {
        "desc": "\n\n",
        "name": "WIDGET_PROP_REPEAT"
      },
      {
        "desc": "\n\n",
        "name": "WIDGET_PROP_ANIMATABLE"
      },
      {
        "desc": "\n\n",
        "name": "WIDGET_PROP_AUTO_HIDE_SCROLL_BAR"
      },
      {
        "desc": "\n\n",
        "name": "WIDGET_PROP_IMAGE"
      },
      {
        "desc": "\n\n",
        "name": "WIDGET_PROP_FORMAT"
      },
      {
        "desc": "\n\n",
        "name": "WIDGET_PROP_DRAW_TYPE"
      },
      {
        "desc": "\n\n",
        "name": "WIDGET_PROP_SELECTABLE"
      },
      {
        "desc": "\n\n",
        "name": "WIDGET_PROP_CLICKABLE"
      },
      {
        "desc": "\n\n",
        "name": "WIDGET_PROP_SCALE_X"
      },
      {
        "desc": "\n\n",
        "name": "WIDGET_PROP_SCALE_Y"
      },
      {
        "desc": " x锚点。\n\n",
        "name": "WIDGET_PROP_ANCHOR_X"
      },
      {
        "desc": " y锚点。\n\n",
        "name": "WIDGET_PROP_ANCHOR_Y"
      },
      {
        "desc": " 选中角度(幅度)\n\n",
        "name": "WIDGET_PROP_ROTATION"
      },
      {
        "desc": " 紧凑模式。\n\n",
        "name": "WIDGET_PROP_COMPACT"
      },
      {
        "desc": " 图标名称。\n\n",
        "name": "WIDGET_PROP_ICON"
      },
      {
        "desc": " 选项集合。\n\n",
        "name": "WIDGET_PROP_OPTIONS"
      },
      {
        "desc": " 是否被选中。\n\n",
        "name": "WIDGET_PROP_SELECTED"
      },
      {
        "desc": " 是否被勾选。\n\n",
        "name": "WIDGET_PROP_CHECKED"
      },
      {
        "desc": " active状态下的图标。\n\n",
        "name": "WIDGET_PROP_ACTIVE_ICON"
      },
      {
        "desc": " 要打开窗口的名称。\n\n",
        "name": "WIDGET_PROP_OPEN_WINDOW"
      },
      {
        "desc": " 被选中项的索引。\n\n",
        "name": "WIDGET_PROP_SELECTED_INDEX"
      },
      {
        "desc": " 点击窗口时关闭窗口。\n\n",
        "name": "WIDGET_PROP_CLOSE_WHEN_CLICK"
      },
      {
        "desc": " 点击窗口外部时关闭窗口。\n\n",
        "name": "WIDGET_PROP_CLOSE_WHEN_CLICK_OUTSIDE"
      },
      {
        "desc": " 行间距。\n\n",
        "name": "WIDGET_PROP_LINE_GAP"
      },
      {
        "desc": " 背景颜色(仅仅使用于color tile)。\n\n",
        "name": "WIDGET_PROP_BG_COLOR"
      },
      {
        "desc": " 边框颜色(仅仅使用于color tile)。\n\n",
        "name": "WIDGET_PROP_BORDER_COLOR"
      },
      {
        "desc": " 延迟时间(毫秒)\n\n",
        "name": "WIDGET_PROP_DELAY"
      }
    ],
    "header": "base/widget_consts.h",
    "name": "widget_prop_t",
    "prefix": "WIDGET_PROP_",
    "annotation": {
      "scriptable": true,
      "string": true
    },
    "level": 1
  },
  {
    "type": "enum",
    "desc": " 控件的类型。\n\n",
    "consts": [
      {
        "desc": "\n\n",
        "name": "WIDGET_TYPE_NONE"
      },
      {
        "desc": "\n\n",
        "name": "WIDGET_TYPE_WINDOW_MANAGER"
      },
      {
        "desc": "\n\n",
        "name": "WIDGET_TYPE_NORMAL_WINDOW"
      },
      {
        "desc": "\n\n",
        "name": "WIDGET_TYPE_TOOL_BAR"
      },
      {
        "desc": "\n\n",
        "name": "WIDGET_TYPE_DIALOG"
      },
      {
        "desc": " popup window\n\n",
        "name": "WIDGET_TYPE_POPUP"
      },
      {
        "desc": " system bar window\n\n",
        "name": "WIDGET_TYPE_SYSTEM_BAR"
      },
      {
        "desc": "\n\n",
        "name": "WIDGET_TYPE_SPRITE"
      },
      {
        "desc": "\n\n",
        "name": "WIDGET_TYPE_KEYBOARD"
      },
      {
        "desc": "\n\n",
        "name": "WIDGET_TYPE_DND"
      },
      {
        "desc": "\n\n",
        "name": "WIDGET_TYPE_LABEL"
      },
      {
        "desc": "\n\n",
        "name": "WIDGET_TYPE_BUTTON"
      },
      {
        "desc": "\n\n",
        "name": "WIDGET_TYPE_IMAGE"
      },
      {
        "desc": "\n\n",
        "name": "WIDGET_TYPE_EDIT"
      },
      {
        "desc": "\n\n",
        "name": "WIDGET_TYPE_PROGRESS_BAR"
      },
      {
        "desc": "\n\n",
        "name": "WIDGET_TYPE_GROUP_BOX"
      },
      {
        "desc": "\n\n",
        "name": "WIDGET_TYPE_CHECK_BUTTON"
      },
      {
        "desc": "\n\n",
        "name": "WIDGET_TYPE_RADIO_BUTTON"
      },
      {
        "desc": "\n\n",
        "name": "WIDGET_TYPE_DIALOG_TITLE"
      },
      {
        "desc": "\n\n",
        "name": "WIDGET_TYPE_DIALOG_CLIENT"
      },
      {
        "desc": "\n\n",
        "name": "WIDGET_TYPE_SLIDER"
      },
      {
        "desc": "\n\n",
        "name": "WIDGET_TYPE_VIEW"
      },
      {
        "desc": "\n\n",
        "name": "WIDGET_TYPE_COMBO_BOX"
      },
      {
        "desc": "\n\n",
        "name": "WIDGET_TYPE_COMBO_BOX_ITEM"
      },
      {
        "desc": "\n\n",
        "name": "WIDGET_TYPE_SLIDE_VIEW"
      },
      {
        "desc": "\n\n",
        "name": "WIDGET_TYPE_PAGES"
      },
      {
        "desc": "\n\n",
        "name": "WIDGET_TYPE_TAB_BUTTON"
      },
      {
        "desc": "\n\n",
        "name": "WIDGET_TYPE_TAB_CONTROL"
      },
      {
        "desc": "\n\n",
        "name": "WIDGET_TYPE_TAB_BUTTON_GROUP"
      },
      {
        "desc": "\n\n",
        "name": "WIDGET_TYPE_BUTTON_GROUP"
      },
      {
        "desc": "\n\n",
        "name": "WIDGET_TYPE_CANDIDATES"
      },
      {
        "desc": "\n\n",
        "name": "WIDGET_TYPE_SPIN_BOX"
      },
      {
        "desc": "\n\n",
        "name": "WIDGET_TYPE_DRAGGER"
      },
      {
        "desc": "\n\n",
        "name": "WIDGET_TYPE_SCROLL_BAR"
      },
      {
        "desc": "\n\n",
        "name": "WIDGET_TYPE_SCROLL_BAR_DESKTOP"
      },
      {
        "desc": "\n\n",
        "name": "WIDGET_TYPE_SCROLL_BAR_MOBILE"
      },
      {
        "desc": "\n\n",
        "name": "WIDGET_TYPE_SCROLL_VIEW"
      },
      {
        "desc": "\n\n",
        "name": "WIDGET_TYPE_LIST_VIEW"
      },
      {
        "desc": "\n\n",
        "name": "WIDGET_TYPE_LIST_VIEW_H"
      },
      {
        "desc": "\n\n",
        "name": "WIDGET_TYPE_LIST_ITEM"
      },
      {
        "desc": "\n\n",
        "name": "WIDGET_TYPE_COLOR_PICKER"
      },
      {
        "desc": "\n\n",
        "name": "WIDGET_TYPE_COLOR_COMPONENT"
      },
      {
        "desc": "\n\n",
        "name": "WIDGET_TYPE_COLOR_TILE"
      },
      {
        "desc": "\n\n",
        "name": "WIDGET_TYPE_RICH_TEXT"
      },
      {
        "desc": "\n\n",
        "name": "WIDGET_TYPE_APP_BAR"
      },
      {
        "desc": "\n\n",
        "name": "WIDGET_TYPE_GRID"
      },
      {
        "desc": "\n\n",
        "name": "WIDGET_TYPE_GRID_ITEM"
      },
      {
        "desc": "\n\n",
        "name": "WIDGET_TYPE_ROW"
      },
      {
        "desc": "\n\n",
        "name": "WIDGET_TYPE_COLUMN"
      },
      {
        "desc": "\n\n",
        "name": "WIDGET_TYPE_CALIBRATION_WIN"
      }
    ],
    "header": "base/widget_consts.h",
    "name": "widget_type_t",
    "prefix": "WIDGET_TYPE_",
    "annotation": {
      "scriptable": true,
      "string": true
    },
    "level": 1
  },
  {
    "type": "enum",
    "desc": " 窗口的生命周期常量定义。\n\n",
    "consts": [
      {
        "desc": " 初始状态。\n\n",
        "name": "WINDOW_STAGE_NONE"
      },
      {
        "desc": " 创建完成。\n\n",
        "name": "WINDOW_STAGE_CREATED"
      },
      {
        "desc": " 窗口已经打开(窗口打开动画完成后，处于该状态，直到窗口被关闭)\n\n",
        "name": "WINDOW_STAGE_OPENED"
      },
      {
        "desc": " 窗口已关闭。\n\n",
        "name": "WINDOW_STAGE_CLOSED"
      }
    ],
    "header": "base/widget_consts.h",
    "name": "window_stage_t",
    "prefix": "WINDOW_STAGE_",
    "annotation": {
      "scriptable": true
    },
    "level": 1
  },
  {
    "type": "enum",
    "desc": " 窗口的closable常量定义。\n\n",
    "consts": [
      {
        "desc": " 窗口可关闭。\n\n",
        "name": "WINDOW_CLOSABLE_YES"
      },
      {
        "desc": " 窗口不可关闭。\n\n",
        "name": "WINDOW_CLOSABLE_NO"
      },
      {
        "desc": " 窗口需要确认后才能关闭。\n\n",
        "name": "WINDOW_CLOSABLE_CONFIRM"
      }
    ],
    "header": "base/widget_consts.h",
    "name": "window_closable_t",
    "prefix": "WINDOW_CLOSABLE_",
    "annotation": {
      "scriptable": true
    },
    "level": 1
  },
  {
    "type": "enum",
    "desc": " 控件状态常量定义。\n\n 这里指定常用的状态值，扩展控件可以在自己的头文件中定义私有的状态。\n\n",
    "consts": [
      {
        "desc": " 无效状态。\n\n",
        "name": "WIDGET_STATE_NONE"
      },
      {
        "desc": " 正常状态。\n\n",
        "name": "WIDGET_STATE_NORMAL"
      },
      {
        "desc": " 指针按下状态。\n\n",
        "name": "WIDGET_STATE_PRESSED"
      },
      {
        "desc": " 指针悬浮状态。\n\n",
        "name": "WIDGET_STATE_OVER"
      },
      {
        "desc": " 禁用状态。\n\n",
        "name": "WIDGET_STATE_DISABLE"
      },
      {
        "desc": " 聚焦状态。\n\n",
        "name": "WIDGET_STATE_FOCUSED"
      },
      {
        "desc": " 勾选状态。\n\n",
        "name": "WIDGET_STATE_CHECKED"
      },
      {
        "desc": " 没勾选状态。\n\n",
        "name": "WIDGET_STATE_UNCHECKED"
      },
      {
        "desc": " 编辑器无内容状态。\n\n",
        "name": "WIDGET_STATE_EMPTY"
      },
      {
        "desc": " 输入错误状态。\n\n",
        "name": "WIDGET_STATE_ERROR"
      },
      {
        "desc": " 选中状态。\n\n",
        "name": "WIDGET_STATE_SELECTED"
      },
      {
        "desc": " 正常状态(选中项)。\n\n",
        "name": "WIDGET_STATE_NORMAL_OF_CHECKED"
      },
      {
        "desc": " 指针按下状态(选中项)。\n\n",
        "name": "WIDGET_STATE_PRESSED_OF_CHECKED"
      },
      {
        "desc": " 指针悬浮状态(选中项)。\n\n",
        "name": "WIDGET_STATE_OVER_OF_CHECKED"
      },
      {
        "desc": " 正常状态(当前项)。\n\n",
        "name": "WIDGET_STATE_NORMAL_OF_ACTIVE"
      },
      {
        "desc": " 指针按下状态(当前项)。\n\n",
        "name": "WIDGET_STATE_PRESSED_OF_ACTIVE"
      },
      {
        "desc": " 指针悬浮状态(当前项)。\n\n",
        "name": "WIDGET_STATE_OVER_OF_ACTIVE"
      }
    ],
    "header": "base/widget_consts.h",
    "name": "widget_state_t",
    "prefix": "WIDGET_",
    "annotation": {
      "scriptable": true,
      "string": true
    },
    "level": 1
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [],
        "annotation": {
          "constructor": true
        },
        "desc": " 获取缺省widget pool对象。\n\n\n",
        "name": "widget_pool",
        "return": {
          "type": "widget_pool_t*",
          "desc": "返回widget pool对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_pool_t*",
            "name": "pool",
            "desc": "widget pool对象。"
          }
        ],
        "annotation": {},
        "desc": " 设置缺省widget pool对象。\n\n\n\n",
        "name": "widget_pool_set",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "uint32_t",
            "name": "max_cache_nr",
            "desc": "最大缓存对象个数。"
          }
        ],
        "annotation": {
          "constructor": true
        },
        "desc": " 创建widget pool对象。\n\n\n\n",
        "name": "widget_pool_create",
        "return": {
          "type": "widget_pool_t*",
          "desc": "返回widget pool对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_pool_t*",
            "name": "pool",
            "desc": "widget pool对象。"
          },
          {
            "type": "const widget_vtable_t*",
            "name": "vt",
            "desc": "控件虚表。"
          }
        ],
        "annotation": {},
        "desc": " 创建widget对象。\n\n\n\n",
        "name": "widget_pool_create_widget",
        "return": {
          "type": "widget_t",
          "desc": "返回控件对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_pool_t*",
            "name": "pool",
            "desc": "widget pool对象。"
          },
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          }
        ],
        "annotation": {},
        "desc": " 销毁或回收widget对象。\n\n\n\n",
        "name": "widget_pool_destroy_widget",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_pool_t*",
            "name": "pool",
            "desc": "widget pool对象。"
          }
        ],
        "annotation": {},
        "desc": " 清除全部缓存控件。\n\n\n",
        "name": "widget_pool_clear_cache",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_pool_t*",
            "name": "pool",
            "desc": "widget pool对象。"
          }
        ],
        "annotation": {},
        "desc": " 计算缓存控件个数。\n\n\n",
        "name": "widget_pool_count",
        "return": {
          "type": "int32_t",
          "desc": "返回缓存控件个数。"
        }
      },
      {
        "params": [
          {
            "type": "widget_pool_t*",
            "name": "pool",
            "desc": "widget pool对象。"
          }
        ],
        "annotation": {},
        "desc": " 清除全部缓存控件并销毁widget pool对象。\n\n\n\n",
        "name": "widget_pool_destroy",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      }
    ],
    "events": [],
    "properties": [],
    "header": "base/widget_pool.h",
    "desc": "\n 有时需要频繁创建和销毁控件，widget pool把销毁的控件缓存起来，再次使用时直接拿回来用。\n\n * 优点：速度快，内存碎片少。\n * 缺点：占用一点内存空间。\n\n 通过宏WITH\\_WIDGET\\_POOL来指定最大缓存控件的数量。\n\n 控件可以通过vt->enable\\_pool参数决定该类控件是否启用缓存。\n\n\n",
    "name": "widget_pool_t",
    "level": 1
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 获取子控件的个数。\n\n\n",
        "name": "widget_count_children",
        "return": {
          "type": "int32_t",
          "desc": "子控件的个数。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "int32_t",
            "name": "index",
            "desc": "索引。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 获取指定索引的子控件。\n\n\n",
        "name": "widget_get_child",
        "return": {
          "type": "widget_t*",
          "desc": "子控件。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 获取控件在父控件中的索引编号。\n\n\n",
        "name": "widget_index_of",
        "return": {
          "type": "int32_t",
          "desc": "在父控件中的索引编号。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "xy_t",
            "name": "x",
            "desc": "x坐标"
          },
          {
            "type": "xy_t",
            "name": "y",
            "desc": "y坐标"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 移动控件。\n\n\n",
        "name": "widget_move",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "wh_t",
            "name": "w",
            "desc": "宽度"
          },
          {
            "type": "wh_t",
            "name": "h",
            "desc": "高度"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 调整控件的大小。\n\n\n",
        "name": "widget_resize",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "xy_t",
            "name": "x",
            "desc": "x坐标"
          },
          {
            "type": "xy_t",
            "name": "y",
            "desc": "y坐标"
          },
          {
            "type": "wh_t",
            "name": "w",
            "desc": "宽度"
          },
          {
            "type": "wh_t",
            "name": "h",
            "desc": "高度"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 移动控件并调整控件的大小。\n\n\n",
        "name": "widget_move_resize",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "int32_t",
            "name": "value",
            "desc": "值。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 设置控件的值。\n 只是对widget\\_set\\_prop的包装，值的意义由子类控件决定。\n\n\n",
        "name": "widget_set_value",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "int32_t",
            "name": "value",
            "desc": "值。"
          },
          {
            "type": "uint32_t",
            "name": "duration",
            "desc": "动画持续时间(毫秒)。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 设置控件的值(以动画形式变化到指定的值)。\n 只是对widget\\_set\\_prop的包装，值的意义由子类控件决定。\n\n\n",
        "name": "widget_animate_value_to",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "int32_t",
            "name": "delta",
            "desc": "增量。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 增加控件的值。\n 只是对widget\\_set\\_prop的包装，值的意义由子类控件决定。\n\n\n",
        "name": "widget_add_value",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "wchar_t*",
            "name": "text",
            "desc": "文本。"
          }
        ],
        "annotation": {},
        "desc": " 设置控件的文本。\n 只是对widget\\_set\\_prop的包装，文本的意义由子类控件决定。\n\n\n",
        "name": "widget_set_text",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "char*",
            "name": "style",
            "desc": "style的名称。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 启用指定的主题。\n\n\n",
        "name": "widget_use_style",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "char*",
            "name": "text",
            "desc": "文本。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 设置控件的文本。\n 只是对widget\\_set\\_prop的包装，文本的意义由子类控件决定。\n\n\n",
        "name": "widget_set_text_utf8",
        "alias": "set_text",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "char*",
            "name": "text",
            "desc": "文本。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 获取翻译之后的文本，然后调用widget_set_text。\n\n\n",
        "name": "widget_set_tr_text",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 获取控件的值。只是对widget\\_get\\_prop的包装，值的意义由子类控件决定。\n\n\n",
        "name": "widget_get_value",
        "return": {
          "type": "int32_t",
          "desc": "返回值。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 获取控件的文本。\n 只是对widget\\_get\\_prop的包装，文本的意义由子类控件决定。\n\n\n",
        "name": "widget_get_text",
        "return": {
          "type": "wchar_t*",
          "desc": "返回文本。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "point_t*",
            "name": "p",
            "desc": "坐标点。"
          }
        ],
        "annotation": {},
        "desc": " 将屏幕坐标转换成控件内的本地坐标，即相对于控件左上角的坐标。\n\n\n",
        "name": "widget_to_local",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "point_t*",
            "name": "p",
            "desc": "坐标点。"
          }
        ],
        "annotation": {},
        "desc": " 将控件内的本地坐标转换成全局坐标。\n\n\n",
        "name": "widget_to_global",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "point_t*",
            "name": "p",
            "desc": "坐标点。"
          }
        ],
        "annotation": {},
        "desc": " 将控件内的本地坐标转换成屏幕上的坐标。\n\n\n",
        "name": "widget_to_screen",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "char*",
            "name": "name",
            "desc": "名称。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 设置控件的名称。\n\n\n",
        "name": "widget_set_name",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "char*",
            "name": "cursor",
            "desc": "图片名称(无扩展名)。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 设置鼠标指针的图片名。\n\n\n",
        "name": "widget_set_cursor",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "const char*",
            "name": "animation",
            "desc": "动画参数。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 设置控件的动画参数(仅用于在UI文件使用)。\n 请参考[控件动画](https://github.com/zlgopen/awtk/blob/master/docs/widget_animator.md)\n\n\n\n",
        "name": "widget_set_animation",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "const char*",
            "name": "animation",
            "desc": "动画参数。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 创建动画。\n 请参考[控件动画](https://github.com/zlgopen/awtk/blob/master/docs/widget_animator.md)\n\n * 除非指定auto_start=false，动画创建后自动启动。\n * 除非指定auto_destroy=false，动画播放完成后自动销毁。\n\n\n\n",
        "name": "widget_create_animator",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "const char*",
            "name": "name",
            "desc": "动画名称。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 播放动画。\n 请参考[控件动画](https://github.com/zlgopen/awtk/blob/master/docs/widget_animator.md)\n\n * 1.widget为NULL时，播放所有名称为name的动画。\n * 2.name为NULL时，播放所有widget相关的动画。\n * 3.widget和name均为NULL，播放所有动画。\n\n\n\n",
        "name": "widget_start_animator",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "const char*",
            "name": "name",
            "desc": "动画名称。"
          },
          {
            "type": "float_t",
            "name": "time_scale",
            "desc": "时间倍率。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 设置动画的时间倍率，<0: 时间倒退，<1: 时间变慢，>1 时间变快。\n 请参考[控件动画](https://github.com/zlgopen/awtk/blob/master/docs/widget_animator.md)\n\n * 1.widget为NULL时，设置所有名称为name的动画的时间倍率。\n * 2.name为NULL时，设置所有widget相关的动画的时间倍率。\n * 3.widget和name均为NULL，设置所有动画的时间倍率。\n\n\n\n",
        "name": "widget_set_animator_time_scale",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "char*",
            "name": "name",
            "desc": "动画名称。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 暂停动画。\n 请参考[控件动画](https://github.com/zlgopen/awtk/blob/master/docs/widget_animator.md)\n\n * 1.widget为NULL时，暂停所有名称为name的动画。\n * 2.name为NULL时，暂停所有widget相关的动画。\n * 3.widget和name均为NULL，暂停所有动画。\n\n\n\n",
        "name": "widget_pause_animator",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "char*",
            "name": "name",
            "desc": "动画名称。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 停止动画(控件的相应属性回归原位)。\n 请参考[控件动画](https://github.com/zlgopen/awtk/blob/master/docs/widget_animator.md)\n\n * 1.widget为NULL时，停止所有名称为name的动画。\n * 2.name为NULL时，停止所有widget相关的动画。\n * 3.widget和name均为NULL，停止所有动画。\n\n\n\n",
        "name": "widget_stop_animator",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "char*",
            "name": "name",
            "desc": "动画名称。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 销毁动画。\n 请参考[控件动画](https://github.com/zlgopen/awtk/blob/master/docs/widget_animator.md)\n\n * 1.widget为NULL时，销毁所有名称为name的动画。\n * 2.name为NULL时，销毁所有widget相关的动画。\n * 3.widget和name均为NULL，销毁所有动画。\n\n\n\n",
        "name": "widget_destroy_animator",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "bool_t",
            "name": "enable",
            "desc": "是否可用性。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 设置控件的可用性。\n\n\n",
        "name": "widget_set_enable",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "bool_t",
            "name": "floating",
            "desc": "是否启用floating布局。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 设置控件的floating标志。\n\n\n",
        "name": "widget_set_floating",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "bool_t",
            "name": "focused",
            "desc": "是否聚焦。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 设置控件的是否聚焦。\n\n\n",
        "name": "widget_set_focused",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "const char*",
            "name": "state",
            "desc": "状态(必须为真正的常量字符串，在widget的整个生命周期有效)。"
          }
        ],
        "annotation": {},
        "desc": " 设置控件的状态。\n\n\n",
        "name": "widget_set_state",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "uint8_t",
            "name": "opacity",
            "desc": "不透明度。"
          }
        ],
        "annotation": {},
        "desc": " 设置控件的不透明度。\n\n\n",
        "name": "widget_set_opacity",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          }
        ],
        "annotation": {},
        "desc": " 销毁全部子控件。\n\n\n",
        "name": "widget_destroy_children",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "widget_t*",
            "name": "child",
            "desc": "子控件对象。"
          }
        ],
        "annotation": {},
        "desc": " 加入一个子控件。\n\n\n",
        "name": "widget_add_child",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "widget_t*",
            "name": "child",
            "desc": "子控件对象。"
          }
        ],
        "annotation": {},
        "desc": " 移出指定的子控件(并不销毁)。\n\n\n",
        "name": "widget_remove_child",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "uint32_t",
            "name": "index",
            "desc": "位置序数(大于等于总个数，则放到最后)。"
          },
          {
            "type": "widget_t*",
            "name": "child",
            "desc": "子控件对象。"
          }
        ],
        "annotation": {},
        "desc": " 插入子控件到指定的位置。\n\n\n",
        "name": "widget_insert_child",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "uint32_t",
            "name": "index",
            "desc": "位置序数(大于等于总个数，则放到最后)。"
          }
        ],
        "annotation": {},
        "desc": " 调整控件在父控件中的位置序数。\n\n\n",
        "name": "widget_restack",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "char*",
            "name": "name",
            "desc": "子控件的名称。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 查找指定名称的子控件(同widget_lookup(widget, name, FALSE))。\n\n\n",
        "name": "widget_child",
        "return": {
          "type": "widget_t*",
          "desc": "子控件或NULL。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "char*",
            "name": "name",
            "desc": "子控件的名称。"
          },
          {
            "type": "bool_t",
            "name": "recursive",
            "desc": "是否递归查找全部子控件。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 查找指定名称的子控件(返回第一个)。\n\n\n",
        "name": "widget_lookup",
        "return": {
          "type": "widget_t*",
          "desc": "子控件或NULL。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "char*",
            "name": "type",
            "desc": "子控件的名称。"
          },
          {
            "type": "bool_t",
            "name": "recursive",
            "desc": "是否递归查找全部子控件。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 查找指定类型的子控件(返回第一个)。\n\n\n",
        "name": "widget_lookup_by_type",
        "return": {
          "type": "widget_t*",
          "desc": "子控件或NULL。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "bool_t",
            "name": "visible",
            "desc": "是否可见。"
          },
          {
            "type": "bool_t",
            "name": "recursive",
            "desc": "是否递归设置全部子控件。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 设置控件的可见性。\n\n\n",
        "name": "widget_set_visible",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "bool_t",
            "name": "sensitive",
            "desc": "是否接受用户事件。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 设置控件是否接受用户事件。\n\n\n",
        "name": "widget_set_sensitive",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "uint32_t",
            "name": "type",
            "desc": "事件类型。"
          },
          {
            "type": "event_func_t",
            "name": "on_event",
            "desc": "事件处理函数。"
          },
          {
            "type": "void*",
            "name": "ctx",
            "desc": "事件处理函数上下文。"
          }
        ],
        "annotation": {
          "scriptable": "custom"
        },
        "desc": " 注册指定事件的处理函数。\n 使用示例：\n\n ```c\n widget_t* ok = button_create(win, 10, 10, 80, 30);\n widget_on(ok, EVT_CLICK, on_click, NULL);\n\n ```\n\n\n",
        "name": "widget_on",
        "return": {
          "type": "int32_t",
          "desc": "返回id，用于widget_off。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "int32_t",
            "name": "id",
            "desc": "widget_on返回的ID。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 注销指定事件的处理函数。\n\n\n",
        "name": "widget_off",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "char*",
            "name": "name",
            "desc": "子控件的名称。"
          },
          {
            "type": "uint32_t",
            "name": "type",
            "desc": "事件类型。"
          },
          {
            "type": "event_func_t",
            "name": "on_event",
            "desc": "事件处理函数。"
          },
          {
            "type": "void*",
            "name": "ctx",
            "desc": "事件处理函数上下文。"
          }
        ],
        "annotation": {},
        "desc": " 为指定名称的子控件注册指定事件的处理函数。\n 递归查找指定名称的子控件，然后为其注册指定事件的处理函数。\n\n\n",
        "name": "widget_child_on",
        "return": {
          "type": "int32_t",
          "desc": "返回id，用于widget_off。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "uint32_t",
            "name": "type",
            "desc": "事件类型。"
          },
          {
            "type": "event_func_t",
            "name": "on_event",
            "desc": "事件处理函数。"
          },
          {
            "type": "void*",
            "name": "ctx",
            "desc": "事件处理函数上下文。"
          }
        ],
        "annotation": {},
        "desc": " 注销指定事件的处理函数。\n 仅用于辅助实现脚本绑定。\n\n\n",
        "name": "widget_off_by_func",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "rect_t*",
            "name": "r",
            "desc": "矩形对象(widget本地坐标)。"
          }
        ],
        "annotation": {},
        "desc": " 请求重绘指定的区域，如果widget->dirty已经为TRUE，直接返回。\n\n\n",
        "name": "widget_invalidate",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "rect_t*",
            "name": "r",
            "desc": "矩形对象(widget本地坐标)。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 请求强制重绘控件。\n\n\n",
        "name": "widget_invalidate_force",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "canvas_t*",
            "name": "c",
            "desc": "画布对象。"
          }
        ],
        "annotation": {
          "private": true
        },
        "desc": " 绘制控件到一个canvas上。\n\n\n",
        "name": "widget_paint",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "event_t*",
            "name": "e",
            "desc": "事件。"
          }
        ],
        "annotation": {},
        "desc": " 分发一个事件。\n\n\n",
        "name": "widget_dispatch",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "const char*",
            "name": "name",
            "desc": "属性的名称。"
          },
          {
            "type": "value_t*",
            "name": "v",
            "desc": "返回属性的值。"
          }
        ],
        "annotation": {},
        "desc": " 获取控件指定属性的值。\n\n\n",
        "name": "widget_get_prop",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "const char*",
            "name": "name",
            "desc": "属性的名称。"
          },
          {
            "type": "value_t*",
            "name": "v",
            "desc": "返回属性的缺省值。"
          }
        ],
        "annotation": {},
        "desc": " 获取控件指定属性的缺省值(在持久化控件时，无需保存缺省值)。\n\n\n",
        "name": "widget_get_prop_default_value",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "const char*",
            "name": "name",
            "desc": "属性的名称。"
          },
          {
            "type": "value_t*",
            "name": "v",
            "desc": "属性的值。"
          }
        ],
        "annotation": {},
        "desc": " 设置控件指定属性的值。\n\n\n",
        "name": "widget_set_prop",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "const char*",
            "name": "name",
            "desc": "属性的名称。"
          },
          {
            "type": "const char*",
            "name": "v",
            "desc": "属性的值。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 设置字符串格式的属性。\n\n\n",
        "name": "widget_set_prop_str",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "const char*",
            "name": "name",
            "desc": "属性的名称。"
          },
          {
            "type": "const char*",
            "name": "defval",
            "desc": "缺省值。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 获取字符串格式的属性。\n\n\n",
        "name": "widget_get_prop_str",
        "return": {
          "type": "const char*",
          "desc": "返回属性的值。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "const char*",
            "name": "name",
            "desc": "属性的名称。"
          },
          {
            "type": "int32_t",
            "name": "v",
            "desc": "属性的值。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 设置整数格式的属性。\n\n\n",
        "name": "widget_set_prop_int",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "const char*",
            "name": "name",
            "desc": "属性的名称。"
          },
          {
            "type": "int32_t",
            "name": "defval",
            "desc": "缺省值。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 获取整数格式的属性。\n\n\n",
        "name": "widget_get_prop_int",
        "return": {
          "type": "int32_t",
          "desc": "返回属性的值。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "const char*",
            "name": "name",
            "desc": "属性的名称。"
          },
          {
            "type": "bool_t",
            "name": "v",
            "desc": "属性的值。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 设置布尔格式的属性。\n\n\n",
        "name": "widget_set_prop_bool",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "const char*",
            "name": "name",
            "desc": "属性的名称。"
          },
          {
            "type": "bool_t",
            "name": "defval",
            "desc": "缺省值。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 获取布尔格式的属性。\n\n\n",
        "name": "widget_get_prop_bool",
        "return": {
          "type": "bool_t",
          "desc": "返回属性的值。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 判断当前控件所在的窗口是否已经打开。\n\n\n",
        "name": "widget_is_window_opened",
        "return": {
          "type": "bool_t",
          "desc": "返回当前控件所在的窗口是否已经打开。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "widget_t*",
            "name": "child",
            "desc": "子控件对象。"
          }
        ],
        "annotation": {},
        "desc": " 让指定子控件抓住事件。\n 控件抓住之后，事件直接分发给该控件。\n\n\n",
        "name": "widget_grab",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "widget_t*",
            "name": "child",
            "desc": "子控件对象。"
          }
        ],
        "annotation": {},
        "desc": " 让指定子控件放弃抓住事件。\n\n\n",
        "name": "widget_ungrab",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "tk_visit_t",
            "name": "visit",
            "desc": "遍历的回调函数。"
          },
          {
            "type": "void*",
            "name": "ctx",
            "desc": "回调函数的上下文。"
          }
        ],
        "annotation": {
          "scriptable": "custom"
        },
        "desc": " 遍历当前控件及子控件。\n\n\n",
        "name": "widget_foreach",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 获取当前控件所在的窗口。\n\n\n",
        "name": "widget_get_window",
        "return": {
          "type": "widget_t*",
          "desc": "窗口对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 获取当前的窗口管理器。\n\n\n",
        "name": "widget_get_window_manager",
        "return": {
          "type": "widget_t*",
          "desc": "窗口管理器对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 获取当前控件的类型名称。\n\n\n",
        "name": "widget_get_type",
        "return": {
          "type": "char*",
          "desc": "返回类型名。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "widget_t*",
            "name": "parent",
            "desc": "clone新控件的parent对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " clone。\n\n\n",
        "name": "widget_clone",
        "return": {
          "type": "widget_t*",
          "desc": "返回clone的对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "widget_t*",
            "name": "other",
            "desc": "要比较的控件对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 判断两个widget是否相同。\n\n\n",
        "name": "widget_equal",
        "return": {
          "type": "bool_t",
          "desc": "返回TRUE表示相同，否则表示不同。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "timer_func_t",
            "name": "on_timer",
            "desc": "timer回调函数。"
          },
          {
            "type": "uint32_t",
            "name": "duration_ms",
            "desc": "时间。"
          }
        ],
        "annotation": {},
        "desc": " 创建定时器。\n 该定时器在控件销毁时自动销毁，**timer\\_info\\_t**的ctx为widget。\n 如果定时器的生命周期与控件无关，请直接调用**timer_add**，以避免不必要的内存开销。\n\n 使用示例：\n\n ```c\n static ret_t digit_clock_on_timer(const timer_info_t* info) {\n  widget_t* widget = WIDGET(info->ctx);\n\n  return RET_REPEAT;\n }\n ...\n widget_add_timer(widget, digit_clock_on_timer, 1000);\n\n ```\n\n\n",
        "name": "widget_add_timer",
        "return": {
          "type": "uint32_t",
          "desc": "返回timer的ID，TK_INVALID_ID表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "const char*",
            "name": "name",
            "desc": "图片名(不带扩展名)。"
          },
          {
            "type": "bitmap_t*",
            "name": "bitmap",
            "desc": "返回图片对象。"
          }
        ],
        "annotation": {},
        "desc": " 加载图片。\n 返回的bitmap对象只在当前调用有效，请不保存对bitmap对象的引用。\n\n\n 使用示例：\n\n ```c\n bitmap_t bitmap;\n widget_load_image(widget, \"myimage\", &bitmap);\n\n ```\n\n\n",
        "name": "widget_load_image",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "asset_type_t",
            "name": "type",
            "desc": "资源类型。"
          },
          {
            "type": "const char*",
            "name": "name",
            "desc": "资源名。"
          }
        ],
        "annotation": {},
        "desc": " 加载资源。\n\n 使用示例：\n\n ```c\n const asset_info_t* asset = widget_load_asset(widget, ASSET_TYPE_IMAGE, \"mysvg\");\n ...\n widget_unload_asset(widget, asset);\n ```\n\n\n",
        "name": "widget_load_asset",
        "return": {
          "type": "const asset_info_t*",
          "desc": "返回资源句柄。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "const asset_info_t*",
            "name": "asset",
            "desc": "资源句柄。"
          }
        ],
        "annotation": {},
        "desc": " 卸载资源。\n\n 使用示例：\n\n ```c\n const asset_info_t* asset = widget_load_asset(widget, ASSET_TYPE_IMAGE, \"mysvg\");\n ...\n widget_unload_asset(widget, asset);\n ```\n\n\n",
        "name": "widget_unload_asset",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "widget对象。"
          }
        ],
        "annotation": {
          "cast": true,
          "scriptable": true
        },
        "desc": " 转换为widget对象(供脚本语言使用)。\n\n\n",
        "name": "widget_cast",
        "return": {
          "type": "widget_t*",
          "desc": "widget对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 销毁控件。\n 一般无需直接调用，关闭窗口时，自动销毁相关控件。\n\n\n",
        "name": "widget_destroy",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "canvas_t*",
            "name": "c",
            "desc": "画布对象。"
          },
          {
            "type": "char*",
            "name": "icon",
            "desc": "图标的名称。"
          },
          {
            "type": "wstr_t*",
            "name": "text",
            "desc": "文字。"
          }
        ],
        "annotation": {
          "private": true
        },
        "desc": " 帮助子控件实现自己的绘制函数。\n\n\n",
        "name": "widget_paint_helper",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "canvas_t*",
            "name": "c",
            "desc": "画布对象。"
          }
        ],
        "annotation": {
          "private": true
        },
        "desc": " 从widget的style中取出字体名称、大小和颜色数据，设置到canvas中。\n\n\n\n",
        "name": "widget_prepare_text_style",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "wchar_t*",
            "name": "text",
            "desc": "文本。"
          }
        ],
        "annotation": {
          "private": true
        },
        "desc": " 计算文本的宽度。\n 字体由控件当前的状态和style决定。\n\n\n",
        "name": "widget_measure_text",
        "return": {
          "type": "float_t",
          "desc": "返回文本的宽度。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "event_t*",
            "name": "e",
            "desc": "事件对象。"
          }
        ],
        "annotation": {
          "private": true
        },
        "desc": " 递归分发事件到targe控件。\n\n\n",
        "name": "widget_dispatch_event_to_target_recursive",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "xy_t",
            "name": "x",
            "desc": "x坐标"
          },
          {
            "type": "xy_t",
            "name": "y",
            "desc": "y坐标"
          },
          {
            "type": "bool_t",
            "name": "is_local",
            "desc": "TRUE表示是相对与控件左上角的坐标，否则表示全局坐标。"
          }
        ],
        "annotation": {
          "private": true
        },
        "desc": " 判断一个点是否在控件内。\n\n\n",
        "name": "widget_is_point_in",
        "return": {
          "type": "bool_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "event_t*",
            "name": "e",
            "desc": "事件。"
          }
        ],
        "annotation": {
          "private": true
        },
        "desc": " 递归的分发一个事件到所有target子控件。\n\n\n",
        "name": "widget_dispatch_to_target",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "event_t*",
            "name": "e",
            "desc": "事件。"
          }
        ],
        "annotation": {
          "private": true
        },
        "desc": " 递归的分发一个事件到所有key_target子控件。\n\n\n",
        "name": "widget_dispatch_to_key_target",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "xy_t",
            "name": "x",
            "desc": "x坐标。"
          },
          {
            "type": "xy_t",
            "name": "y",
            "desc": "y坐标。"
          }
        ],
        "annotation": {
          "private": true
        },
        "desc": " 查找x/y坐标对应的子控件。\n\n\n",
        "name": "widget_find_target",
        "return": {
          "type": "widget*",
          "desc": "子控件或NULL。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          }
        ],
        "annotation": {
          "private": true
        },
        "desc": " 语言改变后，重新翻译控件上的文本(包括子控件)。\n\n\n",
        "name": "widget_re_translate_text",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "widget对象。"
          },
          {
            "type": "widget_t*",
            "name": "parent",
            "desc": "widget的父控件。"
          },
          {
            "type": "widget_vtable_t*",
            "name": "vt",
            "desc": "虚表。"
          },
          {
            "type": "xy_t",
            "name": "x",
            "desc": "x坐标"
          },
          {
            "type": "xy_t",
            "name": "y",
            "desc": "y坐标"
          },
          {
            "type": "wh_t",
            "name": "w",
            "desc": "宽度"
          },
          {
            "type": "wh_t",
            "name": "h",
            "desc": "高度"
          }
        ],
        "annotation": {
          "private": true
        },
        "desc": " 初始化控件。仅在子类控件构造函数中使用。\n\n > 请用widget\\_create代替本函数。\n\n @depreated\n\n\n",
        "name": "widget_init",
        "return": {
          "type": "widget_t*",
          "desc": "widget对象本身。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "parent",
            "desc": "widget的父控件。"
          },
          {
            "type": "widget_vtable_t*",
            "name": "vt",
            "desc": "虚表。"
          },
          {
            "type": "xy_t",
            "name": "x",
            "desc": "x坐标"
          },
          {
            "type": "xy_t",
            "name": "y",
            "desc": "y坐标"
          },
          {
            "type": "wh_t",
            "name": "w",
            "desc": "宽度"
          },
          {
            "type": "wh_t",
            "name": "h",
            "desc": "高度"
          }
        ],
        "annotation": {
          "private": true
        },
        "desc": " 创建控件。仅在子类控件构造函数中使用。\n\n\n",
        "name": "widget_create",
        "return": {
          "type": "widget_t*",
          "desc": "widget对象本身。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "widget对象。"
          }
        ],
        "annotation": {
          "private": true
        },
        "desc": " 让控件根据自己当前状态更新style。\n\n\n",
        "name": "widget_update_style",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "widget对象。"
          },
          {
            "type": "bool_t",
            "name": "active",
            "desc": "控件是否为当前项。"
          },
          {
            "type": "bool_t",
            "name": "checked",
            "desc": "控件是否为选中项。"
          }
        ],
        "annotation": {
          "private": true
        },
        "desc": " 把控件的状态转成获取style选要的状态，一般只在子类中使用。\n\n\n",
        "name": "widget_get_state_for_style",
        "return": {
          "type": "const char*",
          "desc": "返回状态值。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "widget对象。"
          }
        ],
        "annotation": {
          "private": true
        },
        "desc": " 让控件及其全部子控件根据自己当前状态更新style。\n\n\n",
        "name": "widget_update_style_recursive",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "widget对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 布局当前控件及子控件。\n\n\n",
        "name": "widget_layout",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          }
        ],
        "annotation": {},
        "desc": " layout子控件。\n\n\n",
        "name": "widget_layout_children",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "const char*",
            "name": "params",
            "desc": "布局参数。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 设置控件自己的布局参数。\n\n\n",
        "name": "widget_set_self_layout",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "const char*",
            "name": "params",
            "desc": "布局参数。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 设置子控件的布局参数。\n\n\n",
        "name": "widget_set_children_layout",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "const char*",
            "name": "x",
            "desc": "x参数。"
          },
          {
            "type": "const char*",
            "name": "y",
            "desc": "y参数。"
          },
          {
            "type": "const char*",
            "name": "w",
            "desc": "w参数。"
          },
          {
            "type": "const char*",
            "name": "h",
            "desc": "h参数。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 设置控件自己的布局(缺省布局器)参数(过时，请用widget\\_set\\_self\\_layout)。\n\n\n",
        "name": "widget_set_self_layout_params",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      }
    ],
    "events": [
      {
        "name": "EVT_WILL_MOVE",
        "desc": " 控件移动前触发。\n\n",
        "type": "event_t"
      },
      {
        "name": "EVT_MOVE",
        "desc": " 控件移动后触发。\n\n",
        "type": "event_t"
      },
      {
        "name": "EVT_WILL_RESIZE",
        "desc": " 控件调整大小前触发。\n\n",
        "type": "event_t"
      },
      {
        "name": "EVT_RESIZE",
        "desc": " 控件调整大小后触发。\n\n",
        "type": "event_t"
      },
      {
        "name": "EVT_WILL_MOVE_RESIZE",
        "desc": " 控件移动并调整大小前触发。\n\n",
        "type": "event_t"
      },
      {
        "name": "EVT_MOVE_RESIZE",
        "desc": " 控件移动并调整大小后触发。\n\n",
        "type": "event_t"
      },
      {
        "name": "EVT_PROP_WILL_CHANGE",
        "desc": " 控件属性改变前触发(通过set_prop设置属性，才会触发)。\n\n",
        "type": "prop_change_event_t"
      },
      {
        "name": "EVT_PROP_CHANGED",
        "desc": " 控件属性改变后触发(通过set_prop设置属性，才会触发)。\n\n",
        "type": "prop_change_event_t"
      },
      {
        "name": "EVT_BEFORE_PAINT",
        "desc": " 控件绘制前触发。\n\n",
        "type": "paint_event_t"
      },
      {
        "name": "EVT_AFTER_PAINT",
        "desc": " 控件绘制完成时触发。\n\n",
        "type": "paint_event_t"
      },
      {
        "name": "EVT_FOCUS",
        "desc": " 控件得到焦点时触发。\n\n",
        "type": "event_t"
      },
      {
        "name": "EVT_BLUR",
        "desc": " 控件失去焦点时触发。\n\n",
        "type": "event_t"
      },
      {
        "name": "EVT_WHEEL",
        "desc": " 鼠标滚轮事件。\n\n",
        "type": "wheel_event_t"
      },
      {
        "name": "EVT_POINTER_LEAVE",
        "desc": " 鼠标指针离开控件时触发。\n\n",
        "type": "pointer_event_t"
      },
      {
        "name": "EVT_POINTER_ENTER",
        "desc": " 鼠标指针进入控件时触发。\n\n",
        "type": "pointer_event_t"
      },
      {
        "name": "EVT_KEY_DOWN",
        "desc": " 键按下事件。\n\n",
        "type": "pointer_event_t"
      },
      {
        "name": "EVT_KEY_UP",
        "desc": " 键释放事件。\n\n",
        "type": "pointer_event_t"
      },
      {
        "name": "EVT_POINTER_DOWN",
        "desc": " 指针设备按下事件。\n\n",
        "type": "pointer_event_t"
      },
      {
        "name": "EVT_POINTER_DOWN_ABORT",
        "desc": " 取消指针设备按下事件。\n\n",
        "type": "pointer_event_t"
      },
      {
        "name": "EVT_POINTER_MOVE",
        "desc": " 指针设备移动事件。\n\n",
        "type": "pointer_event_t"
      },
      {
        "name": "EVT_POINTER_UP",
        "desc": " 指针设备释放事件。\n\n",
        "type": "pointer_event_t"
      },
      {
        "name": "EVT_DESTROY",
        "desc": " 控件销毁时触发。\n\n",
        "type": "event_t"
      }
    ],
    "properties": [
      {
        "name": "x",
        "desc": " x坐标(相对于父控件的x坐标)。\n\n",
        "type": "xy_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "y",
        "desc": " y坐标(相对于父控件的y坐标)。\n\n",
        "type": "xy_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "w",
        "desc": " 宽度。\n\n",
        "type": "wh_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "h",
        "desc": " 高度。\n\n",
        "type": "wh_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "name",
        "desc": " 控件名字。\n\n",
        "type": "char*",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "tr_text",
        "desc": " 保存用于翻译的字符串。\n\n",
        "type": "char*",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "style",
        "desc": " style的名称。\n\n",
        "type": "char*",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "animation",
        "desc": " 动画参数。请参考[控件动画](https://github.com/zlgopen/awtk/blob/master/docs/widget_animator.md)\n\n",
        "type": "char*",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "enable",
        "desc": " 启用/禁用状态。\n\n",
        "type": "bool_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "visible",
        "desc": " 是否可见。\n\n",
        "type": "bool_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "writable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "sensitive",
        "desc": " 是否接受用户事件。\n\n",
        "type": "bool_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "writable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "focused",
        "desc": " 是否得到焦点。\n\n",
        "type": "bool_t",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "auto_created",
        "desc": " 是否由父控件自动创建。\n\n",
        "type": "bool_t",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "dirty",
        "desc": " 标识控件是否需要重绘。\n\n",
        "type": "bool_t",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "floating",
        "desc": " 标识控件是否启用浮动布局，不受父控件的children_layout的控制。\n\n",
        "type": "bool_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "need_relayout_children",
        "desc": " 标识控件是否需要重新layout子控件。\n\n",
        "type": "bool_t",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "can_not_destroy",
        "desc": " 标识控件目前不能被销毁(比如正在分发事件)，如果此时调用widget\\_destroy，自动异步处理。\n\n",
        "type": "uint16_t",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "destroying",
        "desc": " 标识控件正在被销毁。\n\n",
        "type": "bool_t",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "state",
        "desc": " 控件的状态(取值参考widget_state_t)。\n\n",
        "type": "uint8_t",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "opacity",
        "desc": " 不透明度(0-255)，0完全透明，255完全不透明。\n\n",
        "type": "uint8_t",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "text",
        "desc": " 文本。用途视具体情况而定。\n\n",
        "type": "wstr_t",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "parent",
        "desc": " 父控件\n\n",
        "type": "widget_t*",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "target",
        "desc": " 接收事件的子控件。\n\n",
        "type": "widget_t*",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "grab_widget",
        "desc": " grab事件的子控件。\n\n",
        "type": "widget_t*",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "key_target",
        "desc": " 接收按键事件的子控件。\n\n",
        "type": "widget_t*",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "children",
        "desc": " 全部子控件。\n\n",
        "type": "darray_t*",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "emitter",
        "desc": " 事件发射器。\n\n",
        "type": "emitter_t*",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "astyle",
        "desc": " Style对象。\n\n",
        "type": "style_t*",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "children_layout",
        "desc": " 子控件布局器。请参考[控件布局参数](https://github.com/zlgopen/awtk/blob/master/docs/layout.md)\n\n",
        "type": "children_layouter_t*",
        "annotation": {
          "readable": true,
          "set_prop": true,
          "get_prop": true
        }
      },
      {
        "name": "self_layout",
        "desc": " 控件布局器。请参考[控件布局参数](https://github.com/zlgopen/awtk/blob/master/docs/layout.md)\n\n",
        "type": "self_layouter_t*",
        "annotation": {
          "readable": true,
          "set_prop": true,
          "get_prop": true
        }
      },
      {
        "name": "custom_props",
        "desc": " 自定义属性。\n\n",
        "type": "custom_props_t*",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "vt",
        "desc": " 虚函数表。\n\n",
        "type": "widget_vtable_t",
        "annotation": {
          "readable": true
        }
      }
    ],
    "header": "base/widget.h",
    "desc": " **widget_t** 是所有控件、窗口和窗口管理器的基类。\n **widget_t**也是一个容器，可放其它**widget_t**到它的内部，形成一个树形结构。\n\n ```graphviz\n   [default_style]\n\n   widget_t -> widget_t[arrowhead = \"diamond\"]\n   window_t -> widget_t[arrowhead = \"empty\"]\n   window_manager_t -> widget_t[arrowhead = \"empty\"]\n   button_t -> widget_t[arrowhead = \"empty\"]\n   label_t -> widget_t[arrowhead = \"empty\"]\n   xxx_widget_t -> widget_t[arrowhead = \"empty\"]\n ```\n\n 通常**widget_t**通过一个矩形区域向用户呈现一些信息，接受用户的输入，并据此做出适当的反应。\n 它负责控件的生命周期、通用状态、事件分发和Style的管理。\n 本类提供的接口(函数和属性)除非特别说明，一般都适用于子类控件。\n\n 为了便于解释，这里特别说明一下几个术语：\n\n * **父控件与子控件**：父控件与子控件指的两个控件的组合关系(这是在运行时决定的)。\n 比如：在窗口中放一个按钮，此时，我们称按钮是窗口的子控件，窗口是按钮的父控件。\n\n ```graphviz\n   [default_style]\n\n   子控件 -> 父控件[arrowhead = \"ediamond\"]\n ```\n\n * **子类控件与父类控件**：子类控件与父类控件指的两类控件的继承关系(这是在设计时决定的)。\n 比如：我们称**button_t**是**widget_t**的子类控件，**widget_t**是**button_t**的父类控件。\n\n ```graphviz\n   [default_style]\n\n   子类控件 -> 父类控件[arrowhead = \"empty\"]\n\n ```\n\n widget相关的函数都只能在GUI线程中执行，如果需在非GUI线程中想调用widget相关函数，\n 请用idle\\_queue或timer\\_queue进行串行化。\n 请参考[demo thread](https://github.com/zlgopen/awtk/blob/master/demos/demo_thread_app.c)\n\n **widget\\_t**是抽象类，不要直接创建**widget\\_t**的实例。控件支持两种创建方式：\n\n * 通过XML创建。如：\n\n ```xml\n <button x=\"c\" y=\"m\" w=\"80\" h=\"30\" text=\"OK\"/>\n ```\n\n * 通过代码创建。如：\n\n ```c\n  widget_t* button = button_create(win, 10, 10, 128, 30);\n  widget_set_text(button, L\"OK\");\n  widget_on(button, EVT_CLICK, on_click, NULL);\n ```\n\n\n",
    "name": "widget_t",
    "annotation": {
      "scriptable": true
    },
    "level": 1
  },
  {
    "type": "enum",
    "desc": " @type string\n 窗口动画常量定义。\n\n",
    "consts": [
      {
        "desc": " 中心缩放。适用于居中的对话框。\n\n",
        "name": "WINDOW_ANIMATOR_CENTER_SCALE"
      },
      {
        "desc": " 淡入淡出。适用于toast之类的提示。\n\n",
        "name": "WINDOW_ANIMATOR_FADE,"
      },
      {
        "desc": " 顶部部弹出。适用于对话框。\n\n",
        "name": "WINDOW_ANIMATOR_TOP_TOP_BOTTOM"
      },
      {
        "desc": " 底部弹出。适用于对话框。\n\n",
        "name": "WINDOW_ANIMATOR_BOTTOM_TO_TOP"
      },
      {
        "desc": " 水平平移。适用于窗口。\n\n",
        "name": "WINDOW_ANIMATOR_HTRANSLATE"
      },
      {
        "desc": " 垂直平移。适用于窗口。\n\n",
        "name": "WINDOW_ANIMATOR_VTRANSLATE"
      }
    ],
    "header": "base/window_animator.h",
    "name": "window_animator_type_t",
    "prefix": "WINDOW_ANIMATOR_",
    "level": 1
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "char*",
            "name": "type",
            "desc": "动画类型。"
          },
          {
            "type": "canvas_t*",
            "name": "c",
            "desc": "canvas。"
          },
          {
            "type": "widget_t*",
            "name": "prev_win",
            "desc": "前一窗口。"
          },
          {
            "type": "widget_t*",
            "name": "curr_win",
            "desc": "当前窗口。"
          }
        ],
        "annotation": {
          "constructor": true
        },
        "desc": " 为打开窗口创建动画。\n\n\n",
        "name": "window_animator_create_for_open",
        "return": {
          "type": "window_animator_t*",
          "desc": "窗口动画对象。"
        }
      },
      {
        "params": [
          {
            "type": "char*",
            "name": "type",
            "desc": "动画类型。"
          },
          {
            "type": "canvas_t*",
            "name": "c",
            "desc": "canvas。"
          },
          {
            "type": "widget_t*",
            "name": "prev_win",
            "desc": "前一窗口。"
          },
          {
            "type": "widget_t*",
            "name": "curr_win",
            "desc": "当前窗口。"
          }
        ],
        "annotation": {
          "constructor": true
        },
        "desc": " 为关闭窗口创建动画。\n\n\n",
        "name": "window_animator_create_for_close",
        "return": {
          "type": "window_animator_t*",
          "desc": "窗口动画对象。"
        }
      },
      {
        "params": [
          {
            "type": "window_animator_t*",
            "name": "wa",
            "desc": "窗口动画对象。"
          },
          {
            "type": "canvas_t*",
            "name": "canvas",
            "desc": "画布对象。"
          },
          {
            "type": "uint32_t",
            "name": "time_ms",
            "desc": "当前时间(毫秒)。"
          }
        ],
        "annotation": {},
        "desc": " 更新动画。\n\n\n",
        "name": "window_animator_update",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "window_animator_t*",
            "name": "wa",
            "desc": "窗口动画对象。"
          }
        ],
        "annotation": {},
        "desc": " 销毁窗口动画对象。\n\n\n",
        "name": "window_animator_destroy",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      }
    ],
    "events": [],
    "properties": [],
    "header": "base/window_animator.h",
    "desc": " 窗口动画。\n\n",
    "name": "window_animator_t",
    "level": 1
  },
  {
    "params": [],
    "annotation": {
      "global": true,
      "scriptable": true
    },
    "desc": " 初始化AWTK扩展控件。\n\n\n",
    "name": "tk_ext_widgets_init",
    "return": {
      "type": "ret_t",
      "desc": "返回RET_OK表示成功，否则表示失败。"
    },
    "type": "method",
    "header": "ext_widgets/ext_widgets.h",
    "level": 1
  },
  {
    "type": "enum",
    "desc": " 资源类型常量定义。\n\n",
    "consts": [
      {
        "desc": " 无效资源。\n\n",
        "name": "ASSET_TYPE_NONE"
      },
      {
        "desc": " 字体资源。\n\n",
        "name": "ASSET_TYPE_FONT"
      },
      {
        "desc": " 图片资源。\n\n",
        "name": "ASSET_TYPE_IMAGE"
      },
      {
        "desc": " 主题资源。\n\n",
        "name": "ASSET_TYPE_STYLE"
      },
      {
        "desc": " UI数据资源。\n\n",
        "name": "ASSET_TYPE_UI"
      },
      {
        "desc": " XML数据资源。\n\n",
        "name": "ASSET_TYPE_XML"
      },
      {
        "desc": " 字符串数据资源。\n\n",
        "name": "ASSET_TYPE_STRINGS"
      },
      {
        "desc": " 其它数据资源。\n\n",
        "name": "ASSET_TYPE_DATA"
      }
    ],
    "header": "base/assets_manager.h",
    "name": "asset_type_t",
    "prefix": "ASSET_TYPE_",
    "annotation": {
      "scriptable": true
    },
    "level": 1
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "wbuffer_t*",
            "name": "wbuffer",
            "desc": "wbuffer对象。"
          },
          {
            "type": "uint8_t*",
            "name": "data",
            "desc": "缓冲区。"
          },
          {
            "type": "uint16_t",
            "name": "capacity",
            "desc": "缓冲区的容量。"
          }
        ],
        "annotation": {
          "constructor": true
        },
        "desc": " 初始wbuffer对象。\n\n\n",
        "name": "wbuffer_init",
        "return": {
          "type": "wbuffer_t*",
          "desc": "wbuffer对象本身。"
        }
      },
      {
        "params": [
          {
            "type": "wbuffer_t*",
            "name": "wbuffer",
            "desc": "wbuffer对象。"
          }
        ],
        "annotation": {
          "constructor": true
        },
        "desc": " 初始wbuffer对象，自动扩展buffer，使用完成后需要调用wbuffer\\_deinit释放资源。\n\n\n\n",
        "name": "wbuffer_init_extendable",
        "return": {
          "type": "wbuffer_t*",
          "desc": "wbuffer对象本身。"
        }
      },
      {
        "params": [
          {
            "type": "wbuffer_t*",
            "name": "wbuffer",
            "desc": "wbuffer对象。"
          }
        ],
        "annotation": {},
        "desc": " 释放资源。\n\n\n",
        "name": "wbuffer_deinit",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "wbuffer_t*",
            "name": "wbuffer",
            "desc": "wbuffer对象。"
          },
          {
            "type": "int32_t",
            "name": "delta",
            "desc": "跳过的偏移量，正数往前负数往回跳。"
          }
        ],
        "annotation": {},
        "desc": " 跳过指定的长度。\n\n\n",
        "name": "wbuffer_skip",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "wbuffer_t*",
            "name": "wbuffer",
            "desc": "wbuffer对象。"
          },
          {
            "type": "uint8_t",
            "name": "value",
            "desc": "写入的数据。"
          }
        ],
        "annotation": {},
        "desc": " 写入uint8数据。\n\n\n",
        "name": "wbuffer_write_uint8",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "wbuffer_t*",
            "name": "wbuffer",
            "desc": "wbuffer对象。"
          },
          {
            "type": "uint16_t",
            "name": "value",
            "desc": "写入的数据。"
          }
        ],
        "annotation": {},
        "desc": " 写入uint16数据。\n\n\n",
        "name": "wbuffer_write_uint16",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "wbuffer_t*",
            "name": "wbuffer",
            "desc": "wbuffer对象。"
          },
          {
            "type": "uint32_t",
            "name": "value",
            "desc": "写入的数据。"
          }
        ],
        "annotation": {},
        "desc": " 写入uint32数据。\n\n\n",
        "name": "wbuffer_write_uint32",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "wbuffer_t*",
            "name": "wbuffer",
            "desc": "wbuffer对象。"
          },
          {
            "type": "float_t",
            "name": "value",
            "desc": "写入的数据。"
          }
        ],
        "annotation": {},
        "desc": " 写入float数据。\n\n\n",
        "name": "wbuffer_write_float",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "wbuffer_t*",
            "name": "wbuffer",
            "desc": "wbuffer对象。"
          },
          {
            "type": "void*",
            "name": "data",
            "desc": "写入的数据。"
          },
          {
            "type": "uint32_t",
            "name": "size",
            "desc": "写入的数据长度。"
          }
        ],
        "annotation": {},
        "desc": " 写入指定长度的二进制数据。\n\n\n",
        "name": "wbuffer_write_binary",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "wbuffer_t*",
            "name": "wbuffer",
            "desc": "wbuffer对象。"
          },
          {
            "type": "char*",
            "name": "data",
            "desc": "写入的字符串。"
          }
        ],
        "annotation": {},
        "desc": " 写入字符串。\n\n\n",
        "name": "wbuffer_write_string",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      }
    ],
    "events": [],
    "properties": [
      {
        "name": "data",
        "desc": " 缓存区。\n\n",
        "type": "uint8_t*",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "cursor",
        "desc": " 当前写入位置。\n\n",
        "type": "uint32_t",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "capacity",
        "desc": " 缓存区最大容量。\n\n",
        "type": "uint32_t",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "extendable",
        "desc": " 容量是否可扩展。\n\n",
        "type": "bool_t",
        "annotation": {
          "readable": true
        }
      }
    ],
    "header": "tkc/buffer.h",
    "desc": " Write Buffer。用于数据打包。\n\n 示例：\n\n ```c\n  uint8_t buff[128];\n  wbuffer_t wbuffer;\n  rbuffer_t rbuffer;\n  const char* str = NULL;\n  wbuffer_init(&wbuffer, buff, sizeof(buff));\n\n  wbuffer_write_string(&wbuffer, \"hello awtk\");\n\n  rbuffer_init(&rbuffer, wbuffer.data, wbuffer.cursor);\n  rbuffer_read_string(&rbuffer, &str);\n ```\n\n ```c\n  wbuffer_t wbuffer;\n  wbuffer_init_extendable(&wbuffer);\n\n  wbuffer_write_string(&wbuffer, \"hello awtk\");\n\n  wbuffer_deinit(&wbuffer);\n ```\n > 如果初始化为extendable，则最后需要调用wbuffer\\_deinit释放资源。\n\n\n\n",
    "name": "wbuffer_t",
    "level": 1
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "rbuffer_t*",
            "name": "rbuffer",
            "desc": "rbuffer对象。"
          },
          {
            "type": "uint8_t*",
            "name": "data",
            "desc": "缓冲区。"
          },
          {
            "type": "uint16_t",
            "name": "capacity",
            "desc": "缓冲区的容量。"
          }
        ],
        "annotation": {
          "constructor": true
        },
        "desc": " 初始rbuffer对象。\n\n\n",
        "name": "rbuffer_init",
        "return": {
          "type": "rbuffer_t*",
          "desc": "rbuffer对象本身。"
        }
      },
      {
        "params": [
          {
            "type": "rbuffer_t*",
            "name": "rbuffer",
            "desc": "rbuffer对象。"
          }
        ],
        "annotation": {},
        "desc": " 判断是否还有数据可读。\n\n\n",
        "name": "rbuffer_has_more",
        "return": {
          "type": "bool_t",
          "desc": "返回TRUE表示还有数据可读，否则表示无数据可读。"
        }
      },
      {
        "params": [
          {
            "type": "rbuffer_t*",
            "name": "rbuffer",
            "desc": "rbuffer对象。"
          },
          {
            "type": "int32_t",
            "name": "offset",
            "desc": "跳过的偏移量，正数往前负数往回跳。"
          }
        ],
        "annotation": {},
        "desc": " 跳过指定的长度。\n\n\n",
        "name": "rbuffer_skip",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "rbuffer_t*",
            "name": "rbuffer",
            "desc": "rbuffer对象。"
          },
          {
            "type": "uint8_t*",
            "name": "value",
            "desc": "读取的数据。"
          }
        ],
        "annotation": {},
        "desc": " 读取uint8数据。\n\n\n",
        "name": "rbuffer_read_uint8",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "rbuffer_t*",
            "name": "rbuffer",
            "desc": "rbuffer对象。"
          },
          {
            "type": "uint16_t*",
            "name": "value",
            "desc": "读取的数据。"
          }
        ],
        "annotation": {},
        "desc": " 读取uint16数据。\n\n\n",
        "name": "rbuffer_read_uint16",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "rbuffer_t*",
            "name": "rbuffer",
            "desc": "rbuffer对象。"
          },
          {
            "type": "uint32_t*",
            "name": "value",
            "desc": "读取的数据。"
          }
        ],
        "annotation": {},
        "desc": " 读取uint32数据。\n\n\n",
        "name": "rbuffer_read_uint32",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "rbuffer_t*",
            "name": "rbuffer",
            "desc": "rbuffer对象。"
          },
          {
            "type": "float_t*",
            "name": "value",
            "desc": "读取的数据。"
          }
        ],
        "annotation": {},
        "desc": " 读取float数据。\n\n\n",
        "name": "rbuffer_read_float",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "rbuffer_t*",
            "name": "rbuffer",
            "desc": "rbuffer对象。"
          },
          {
            "type": "void*",
            "name": "data",
            "desc": "读取的数据。"
          },
          {
            "type": "uint32_t",
            "name": "size",
            "desc": "读取的数据长度。"
          }
        ],
        "annotation": {},
        "desc": " 读取指定长度的二进制数据。\n\n\n",
        "name": "rbuffer_read_binary",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "rbuffer_t*",
            "name": "rbuffer",
            "desc": "rbuffer对象。"
          },
          {
            "type": "char**",
            "name": "str",
            "desc": "用于返回字符串。"
          }
        ],
        "annotation": {},
        "desc": " 读取字符串。\n\n\n",
        "name": "rbuffer_read_string",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "rbuffer_t*",
            "name": "rbuffer",
            "desc": "rbuffer对象。"
          },
          {
            "type": "uint8_t*",
            "name": "value",
            "desc": "读取的数据。"
          }
        ],
        "annotation": {},
        "desc": " 读取uint8数据，但不改变cursor的位置。\n\n\n",
        "name": "rbuffer_peek_uint8",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "rbuffer_t*",
            "name": "rbuffer",
            "desc": "rbuffer对象。"
          },
          {
            "type": "uint16_t*",
            "name": "value",
            "desc": "读取的数据。"
          }
        ],
        "annotation": {},
        "desc": " 读取uint16数据，但不改变cursor的位置。\n\n\n",
        "name": "rbuffer_peek_uint16",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "rbuffer_t*",
            "name": "rbuffer",
            "desc": "rbuffer对象。"
          },
          {
            "type": "uint32_t*",
            "name": "value",
            "desc": "读取的数据。"
          }
        ],
        "annotation": {},
        "desc": " 读取uint32数据，但不改变cursor的位置。\n\n\n",
        "name": "rbuffer_peek_uint32",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      }
    ],
    "events": [],
    "properties": [
      {
        "name": "data",
        "desc": " 缓存区。\n\n",
        "type": "uint8_t*",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "cursor",
        "desc": " 当前读取位置。\n\n",
        "type": "uint32_t",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "capacity",
        "desc": " 缓存区最大容量。\n\n",
        "type": "uint32_t",
        "annotation": {
          "readable": true
        }
      }
    ],
    "header": "tkc/buffer.h",
    "desc": " Read Buffer。用于数据解包。\n\n 示例：\n\n ```c\n  uint8_t buff[128];\n  wbuffer_t wbuffer;\n  rbuffer_t rbuffer;\n  const char* str = NULL;\n  wbuffer_init(&wbuffer, buff, sizeof(buff));\n\n  wbuffer_write_string(&wbuffer, \"hello awtk\");\n\n  rbuffer_init(&rbuffer, wbuffer.data, wbuffer.cursor);\n  rbuffer_read_string(&rbuffer, &str);\n ```\n\n",
    "name": "rbuffer_t",
    "level": 1
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "const char*",
            "name": "color",
            "desc": "字符串格式的颜色。"
          }
        ],
        "annotation": {
          "static": true
        },
        "desc": " 把字符串格式的颜色转换成color\\_t对象。\n\n 目前支持下列格式：\n\n * 16进制格式。如：\"#112233\"\n * 颜色名称格式。如：\"green\"\n * rgb格式。如：\"rgb(11,22,33)\"\n * rgba格式。如：\"rgba(11,22,33,0.5)\"\n\n\n\n",
        "name": "color_parse",
        "return": {
          "type": "void*",
          "desc": "返回color_t对象。"
        }
      }
    ],
    "events": [],
    "properties": [],
    "header": "tkc/color_parser.h",
    "desc": " 颜色解析相关函数。\n\n 示例：\n\n ```c\n color_t c;\n c = color_parse(\"#112233\");\n c = color_parse(\"white\");\n c = color_parse(\"rgb(11,22,33)\");\n c = color_parse(\"rgba(11,22,33,0.5)\");\n ```\n\n\n",
    "name": "color_parser_t",
    "annotation": {
      "fake": true
    },
    "level": 1
  },
  {
    "type": "class",
    "methods": [],
    "events": [],
    "properties": [
      {
        "name": "r",
        "desc": " 红色。\n\n",
        "type": "uint8_t",
        "annotation": {
          "readable": true,
          "writable": true
        }
      },
      {
        "name": "g",
        "desc": " 绿色。\n\n",
        "type": "uint8_t",
        "annotation": {
          "readable": true,
          "writable": true
        }
      },
      {
        "name": "b",
        "desc": " 蓝色。\n\n",
        "type": "uint8_t",
        "annotation": {
          "readable": true,
          "writable": true
        }
      },
      {
        "name": "a",
        "desc": " alpha。\n\n",
        "type": "uint8_t",
        "annotation": {
          "readable": true,
          "writable": true
        }
      }
    ],
    "header": "tkc/color.h",
    "desc": " 颜色的四个通道。\n\n\n",
    "name": "rgba_t",
    "level": 1
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "uint8_t",
            "name": "r",
            "desc": "红色。"
          },
          {
            "type": "uint8_t",
            "name": "g",
            "desc": "绿色。"
          },
          {
            "type": "uint8_t",
            "name": "b",
            "desc": "蓝色。"
          },
          {
            "type": "uint8_t",
            "name": "a",
            "desc": "alpha。"
          }
        ],
        "annotation": {
          "constructor": true
        },
        "desc": " 初始化颜色对象。\n\n\n",
        "name": "color_init",
        "return": {
          "type": "color_t",
          "desc": "颜色对象。"
        }
      },
      {
        "params": [
          {
            "type": "uint8_t",
            "name": "r",
            "desc": "红色通道。"
          },
          {
            "type": "uint8_t",
            "name": "b",
            "desc": "蓝色通道。"
          },
          {
            "type": "uint8_t",
            "name": "g",
            "desc": "绿色通道。"
          },
          {
            "type": "uint8_t",
            "name": "a",
            "desc": "alpha通道。"
          }
        ],
        "annotation": {
          "constructor": true,
          "scriptable": true
        },
        "desc": " 创建color对象。\n\n > 主要供脚本语言使用。\n\n\n\n",
        "name": "color_create",
        "return": {
          "type": "color_t*",
          "desc": "color对象。"
        }
      },
      {
        "params": [
          {
            "type": "color_t*",
            "name": "c",
            "desc": "color对象。"
          },
          {
            "type": "const char*",
            "name": "str",
            "desc": "css类似的颜色值。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 创建color对象。\n\n > 主要供脚本语言使用。\n\n\n\n",
        "name": "color_from_str",
        "return": {
          "type": "color_t*",
          "desc": "color对象。"
        }
      },
      {
        "params": [
          {
            "type": "color_t*",
            "name": "c",
            "desc": "color对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "\n 获取红色通道的值。\n\n > 主要供脚本语言使用。\n\n\n\n\n",
        "name": "color_r",
        "return": {
          "type": "uint8_t",
          "desc": "返回红色通道的值。"
        }
      },
      {
        "params": [
          {
            "type": "color_t*",
            "name": "c",
            "desc": "color对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "\n 获取绿色通道的值。\n\n > 主要供脚本语言使用。\n\n\n\n\n",
        "name": "color_g",
        "return": {
          "type": "uint8_t",
          "desc": "返回绿色通道的值。"
        }
      },
      {
        "params": [
          {
            "type": "color_t*",
            "name": "c",
            "desc": "color对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "\n 获取蓝色通道的值。\n\n > 主要供脚本语言使用。\n\n\n\n\n",
        "name": "color_b",
        "return": {
          "type": "uint8_t",
          "desc": "返回蓝色通道的值。"
        }
      },
      {
        "params": [
          {
            "type": "color_t*",
            "name": "c",
            "desc": "color对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "\n 获取alpha通道的值。\n\n > 主要供脚本语言使用。\n\n\n\n\n",
        "name": "color_a",
        "return": {
          "type": "uint8_t",
          "desc": "返回alpha通道的值。"
        }
      },
      {
        "params": [
          {
            "type": "color_t*",
            "name": "color",
            "desc": "color对象。"
          }
        ],
        "annotation": {
          "cast": true,
          "scriptable": true
        },
        "desc": " 转换为color对象。\n\n > 供脚本语言使用。\n\n\n",
        "name": "color_cast",
        "return": {
          "type": "color_t*",
          "desc": "color对象。"
        }
      },
      {
        "params": [
          {
            "type": "color_t*",
            "name": "c",
            "desc": "color对象。"
          }
        ],
        "annotation": {
          "deconstructor": true,
          "scriptable": true
        },
        "desc": "\n 销毁color对象。\n > 主要供脚本语言使用。\n\n\n\n",
        "name": "color_destroy",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      }
    ],
    "events": [],
    "properties": [
      {
        "name": "rgba",
        "desc": " 颜色的RGBA值。\n\n",
        "type": "rgba_t",
        "annotation": {
          "readable": true,
          "writable": true
        }
      },
      {
        "name": "color",
        "desc": " 颜色的数值。\n\n",
        "type": "uint32_t",
        "annotation": {
          "readable": true,
          "writable": true,
          "scriptable": true
        }
      }
    ],
    "header": "tkc/color.h",
    "desc": " 颜色。\n\n\n",
    "name": "color_t",
    "annotation": {
      "scriptable": true
    },
    "level": 1
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "uint32_t*",
            "name": "capacity",
            "desc": "数组的初始容量。"
          },
          {
            "type": "tk_destroy_t",
            "name": "destroy",
            "desc": "元素销毁函数。"
          },
          {
            "type": "tk_compare_t",
            "name": "compare",
            "desc": "元素比较函数。"
          }
        ],
        "annotation": {
          "constructor": true
        },
        "desc": " 创建darray对象。\n\n\n\n",
        "name": "darray_create",
        "return": {
          "type": "darray_t*",
          "desc": "数组对象。"
        }
      },
      {
        "params": [
          {
            "type": "darray_t*",
            "name": "darray",
            "desc": "数组对象。"
          },
          {
            "type": "uint32_t*",
            "name": "capacity",
            "desc": "数组的初始容量。"
          },
          {
            "type": "tk_destroy_t",
            "name": "destroy",
            "desc": "元素销毁函数。"
          },
          {
            "type": "tk_compare_t",
            "name": "compare",
            "desc": "元素比较函数。"
          }
        ],
        "annotation": {},
        "desc": " 初始化darray对象。\n\n\n\n",
        "name": "darray_init",
        "return": {
          "type": "darray_t*",
          "desc": "数组对象。"
        }
      },
      {
        "params": [
          {
            "type": "darray_t*",
            "name": "darray",
            "desc": "数组对象。"
          },
          {
            "type": "void*",
            "name": "ctx",
            "desc": "比较函数的上下文。"
          }
        ],
        "annotation": {},
        "desc": " 查找第一个满足条件的元素。\n\n\n",
        "name": "darray_find",
        "return": {
          "type": "void*",
          "desc": "如果找到，返回满足条件的对象，否则返回NULL。"
        }
      },
      {
        "params": [
          {
            "type": "darray_t*",
            "name": "darray",
            "desc": "数组对象。"
          },
          {
            "type": "void*",
            "name": "ctx",
            "desc": "比较函数的上下文。"
          }
        ],
        "annotation": {},
        "desc": " 查找第一个满足条件的元素，并返回位置。\n\n\n",
        "name": "darray_find_index",
        "return": {
          "type": "int",
          "desc": "如果找到，返回满足条件的对象的位置，否则返回-1。"
        }
      },
      {
        "params": [
          {
            "type": "darray_t*",
            "name": "darray",
            "desc": "数组对象。"
          },
          {
            "type": "void*",
            "name": "ctx",
            "desc": "比较函数的上下文。"
          }
        ],
        "annotation": {},
        "desc": " 删除第一个满足条件的元素。\n\n\n",
        "name": "darray_remove",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "darray_t*",
            "name": "darray",
            "desc": "数组对象。"
          },
          {
            "type": "uint32_t",
            "name": "index",
            "desc": "位置序数。"
          }
        ],
        "annotation": {},
        "desc": " 删除指定位置的元素。\n\n\n",
        "name": "darray_remove_index",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "darray_t*",
            "name": "darray",
            "desc": "数组对象。"
          },
          {
            "type": "void*",
            "name": "ctx",
            "desc": "比较函数的上下文。"
          }
        ],
        "annotation": {},
        "desc": " 删除全部满足条件的元素。\n\n\n",
        "name": "darray_remove_all",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "darray_t*",
            "name": "darray",
            "desc": "数组对象。"
          }
        ],
        "annotation": {},
        "desc": " 弹出最后一个元素。\n\n\n",
        "name": "darray_pop",
        "return": {
          "type": "void*",
          "desc": "成功返回最后一个元素，失败返回NULL。"
        }
      },
      {
        "params": [
          {
            "type": "darray_t*",
            "name": "darray",
            "desc": "数组对象。"
          },
          {
            "type": "void*",
            "name": "data",
            "desc": "待追加的元素。"
          }
        ],
        "annotation": {},
        "desc": " 在尾巴追加一个元素。\n\n\n",
        "name": "darray_push",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "darray_t*",
            "name": "darray",
            "desc": "单向链表对象。"
          },
          {
            "type": "void*",
            "name": "ctx",
            "desc": "比较函数的上下文。"
          }
        ],
        "annotation": {},
        "desc": " 返回满足条件元素的个数。\n\n\n",
        "name": "darray_count",
        "return": {
          "type": "int32_t",
          "desc": "返回元素个数。"
        }
      },
      {
        "params": [
          {
            "type": "darray_t*",
            "name": "darray",
            "desc": "数组对象。"
          }
        ],
        "annotation": {},
        "desc": " 清除全部元素。\n\n\n",
        "name": "darray_clear",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "darray_t*",
            "name": "darray",
            "desc": "数组对象。"
          }
        ],
        "annotation": {},
        "desc": " 清除全部元素，并释放elms。\n\n\n",
        "name": "darray_deinit",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "darray_t*",
            "name": "darray",
            "desc": "数组对象。"
          }
        ],
        "annotation": {},
        "desc": " 销毁darray对象。\n\n\n",
        "name": "darray_destroy",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      }
    ],
    "events": [],
    "properties": [
      {
        "name": "size",
        "desc": " 数组中元素的个数。\n\n",
        "type": "uint32_t",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "capacity",
        "desc": " 数组的容量大小。\n\n",
        "type": "uint32_t",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "elms",
        "desc": " 数组中的元素。\n\n",
        "type": "void**",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "destroy",
        "desc": " 元素销毁函数。\n\n",
        "type": "tk_destroy_t",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "compare",
        "desc": " 元素比较函数。\n\n",
        "type": "tk_compare_t",
        "annotation": {
          "readable": true
        }
      }
    ],
    "header": "tkc/darray.h",
    "desc": " 动态数组，根据元素个数动态调整数组的容量。\n\n 用darray\\_init初始化时，用darray\\_deinit释放。如：\n\n ```c\n darray_t darray;\n darray_init(&darray, 10, destroy, compare);\n ...\n darray_deinit(&darray);\n ```\n\n 用darray\\_create创建时，用darray\\_destroy销毁。如：\n\n ```c\n darray_t* darray = darray_create(10, destroy, compare);\n ...\n darray_destroy(darray);\n ```\n\n\n",
    "name": "darray_t",
    "level": 1
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [],
        "annotation": {
          "constructor": true,
          "scriptable": true
        },
        "desc": " 创建date_time对象，并初始为当前日期和时间(一般供脚本语言中使用)。\n\n\n",
        "name": "date_time_create",
        "return": {
          "type": "date_time_t*",
          "desc": "返回date_time对象。"
        }
      },
      {
        "params": [
          {
            "type": "date_time_t*",
            "name": "dt",
            "desc": "date_time对象。"
          }
        ],
        "annotation": {},
        "desc": " 初始为当前日期和时间。\n\n\n",
        "name": "date_time_init",
        "return": {
          "type": "date_time_t*",
          "desc": "返回date_time对象。"
        }
      },
      {
        "params": [
          {
            "type": "date_time_t*",
            "name": "dt",
            "desc": "date_time对象。"
          }
        ],
        "annotation": {
          "deconstructor": true,
          "scriptable": true
        },
        "desc": " 销毁date_time对象(一般供脚本语言中使用)。\n\n\n\n",
        "name": "date_time_destroy",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "date_time_get_now_t",
            "name": "date_time_get_now",
            "desc": "获取当前日期和时间的函数。"
          }
        ],
        "annotation": {},
        "desc": " 设置获取当前日期和时间的函数。\n\n > 嵌入式平台需要提供并设置获取当前日期和时间的函数，否则相关的功能(如时钟控件)将无法正常工作。\n\n\n\n",
        "name": "date_time_set_impl",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      }
    ],
    "events": [],
    "properties": [
      {
        "name": "second",
        "desc": " 秒(0 - 59)。\n\n",
        "type": "int32_t",
        "annotation": {
          "readable": true,
          "scriptable": true
        }
      },
      {
        "name": "minute",
        "desc": " 分(0 - 59)。\n\n",
        "type": "int32_t",
        "annotation": {
          "readable": true,
          "scriptable": true
        }
      },
      {
        "name": "hour",
        "desc": " 时(0 - 23)。\n\n",
        "type": "int32_t",
        "annotation": {
          "readable": true,
          "scriptable": true
        }
      },
      {
        "name": "day",
        "desc": " 日(1-31)。\n\n",
        "type": "int32_t",
        "annotation": {
          "readable": true,
          "scriptable": true
        }
      },
      {
        "name": "month",
        "desc": " 月(1-12)。\n\n",
        "type": "int32_t",
        "annotation": {
          "readable": true,
          "scriptable": true
        }
      },
      {
        "name": "year",
        "desc": " 年。\n\n",
        "type": "int32_t",
        "annotation": {
          "readable": true,
          "scriptable": true
        }
      }
    ],
    "header": "tkc/date_time.h",
    "desc": " 日期时间。\n\n> 在嵌入式平台中，在系统初始时，需要调用date\\_time\\_set\\_impl设置实际获取系统时间的函数。\n\n\n",
    "name": "date_time_t",
    "annotation": {
      "scriptable": true
    },
    "level": 1
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [],
        "annotation": {
          "constructor": true,
          "scriptable": true
        },
        "desc": " 创建emitter对象。\n\n\n",
        "name": "emitter_create",
        "return": {
          "type": "emitter_t*",
          "desc": "对象。"
        }
      },
      {
        "params": [
          {
            "type": "emitter_t*",
            "name": "emitter",
            "desc": "emitter对象。"
          }
        ],
        "annotation": {
          "constructor": true
        },
        "desc": " 初始化emitter对象。\n\n\n",
        "name": "emitter_init",
        "return": {
          "type": "emitter_t*",
          "desc": "对象。"
        }
      },
      {
        "params": [
          {
            "type": "emitter_t*",
            "name": "emitter",
            "desc": "emitter对象。"
          },
          {
            "type": "event_t*",
            "name": "e",
            "desc": "事件对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 分发事件。如果当前分发的回调函数返回RET_REMOVE，该回调函数将被移出。\n 禁用状态下，本函数不做任何事情。\n  如果当前分发的回调函数返回RET_STOP，dispatch中断分发，并返回RET_STOP，否则返回RET_OK。\n\n",
        "name": "emitter_dispatch",
        "return": {
          "type": "ret_t",
          "desc": ""
        }
      },
      {
        "params": [
          {
            "type": "emitter_t*",
            "name": "emitter",
            "desc": "emitter对象。"
          },
          {
            "type": "uint32_t",
            "name": "type",
            "desc": "事件类型。"
          },
          {
            "type": "event_func_t",
            "name": "on_event",
            "desc": "事件处理函数。"
          },
          {
            "type": "void*",
            "name": "ctx",
            "desc": "事件处理函数上下文。"
          }
        ],
        "annotation": {
          "scriptable": "custom"
        },
        "desc": " 注册指定事件的处理函数。\n\n\n",
        "name": "emitter_on",
        "return": {
          "type": "uint32_t",
          "desc": "返回id，用于emitter_off。"
        }
      },
      {
        "params": [
          {
            "type": "emitter_t*",
            "name": "emitter",
            "desc": "emitter对象。"
          },
          {
            "type": "uint32_t",
            "name": "id",
            "desc": "emitter_on返回的ID。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 注销指定事件的处理函数。\n\n\n",
        "name": "emitter_off",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "emitter_t*",
            "name": "emitter",
            "desc": "emitter对象。"
          },
          {
            "type": "uint32_t",
            "name": "type",
            "desc": "事件类型。"
          },
          {
            "type": "event_func_t",
            "name": "on_event",
            "desc": "事件处理函数。"
          },
          {
            "type": "void*",
            "name": "ctx",
            "desc": "事件处理函数上下文。"
          }
        ],
        "annotation": {},
        "desc": " 注销指定事件的处理函数。\n\n\n",
        "name": "emitter_off_by_func",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "emitter_t*",
            "name": "emitter",
            "desc": "emitter对象。"
          },
          {
            "type": "uint32_t",
            "name": "id",
            "desc": "emitter_on返回的ID。"
          },
          {
            "type": "tk_destroy_t",
            "name": "on_destroy",
            "desc": "回调函数。"
          },
          {
            "type": "void*",
            "name": "on_destroy_ctx",
            "desc": "回调函数上下文。"
          }
        ],
        "annotation": {},
        "desc": " 设置一个回调函数，在emitter被销毁时调用(方便脚本语言去释放回调函数)。\n\n\n",
        "name": "emitter_set_on_destroy",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "emitter_t*",
            "name": "emitter",
            "desc": "emitter对象。"
          },
          {
            "type": "uint32_t",
            "name": "id",
            "desc": "emitter_on返回的ID。"
          }
        ],
        "annotation": {},
        "desc": " 通过ID查找emitter_item_t，主要用于辅助测试。\n\n\n",
        "name": "emitter_find",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "emitter_t*",
            "name": "emitter",
            "desc": "emitter对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 启用。\n\n\n",
        "name": "emitter_enable",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "emitter_t*",
            "name": "emitter",
            "desc": "emitter对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 禁用。\n\n 禁用后emitter_dispatch无效，但可以注册和注销。\n\n\n\n",
        "name": "emitter_disable",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "emitter_t*",
            "name": "emitter",
            "desc": "emitter对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 获取注册的回调函数个数，主要用于辅助测试。\n\n\n",
        "name": "emitter_size",
        "return": {
          "type": "uint32_t",
          "desc": "回调函数个数。"
        }
      },
      {
        "params": [
          {
            "type": "emitter_t*",
            "name": "emitter",
            "desc": "emitter对象。"
          }
        ],
        "annotation": {
          "deconstructor": true
        },
        "desc": " 析构。\n\n\n\n",
        "name": "emitter_deinit",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "emitter_t*",
            "name": "emitter",
            "desc": "emitter对象。"
          }
        ],
        "annotation": {
          "deconstructor": true,
          "scriptable": true
        },
        "desc": " 销毁。\n\n\n\n",
        "name": "emitter_destroy",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "emitter_t*",
            "name": "emitter",
            "desc": "emitter对象。"
          }
        ],
        "annotation": {
          "cast": true,
          "scriptable": true
        },
        "desc": " 转换为emitter对象(供脚本语言使用)。\n\n 主要给脚本语言使用。\n\n\n",
        "name": "emitter_cast",
        "return": {
          "type": "emitter_t*",
          "desc": "对象。"
        }
      }
    ],
    "events": [],
    "properties": [
      {
        "name": "items",
        "desc": " 注册的回调函数集合。\n\n",
        "type": "emitter_item_t*",
        "annotation": {
          "private": true
        }
      },
      {
        "name": "next_id",
        "desc": " 下一次emitter_on返回的ID，emitter_on成功后会自动增加next_id。\n\n",
        "type": "uint32_t",
        "annotation": {
          "private": true
        }
      },
      {
        "name": "enable",
        "desc": " 禁用标志。禁用时dispatch无效。\n\n",
        "type": "bool_t",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "remove_curr_iter",
        "desc": " 如果在回调函数中，emitter_off当前正在dispatch的回调函数，\n 我们只是设置remove_curr_iter为TRUE，在分发完成后才执行。\n XXX: 如果要注销当前正在dispatch的回调函数，直接返回RET_REMOVE是最好的选择。\n\n",
        "type": "bool_t",
        "annotation": {
          "private": true
        }
      },
      {
        "name": "curr_iter",
        "desc": " 当前正在dispatch的项。\n\n",
        "type": "emitter_item_t*",
        "annotation": {
          "private": true
        }
      }
    ],
    "header": "tkc/emitter.h",
    "desc": "\n 事件分发器, 用于实现观察者模式。\n\n",
    "name": "emitter_t",
    "annotation": {
      "scriptable": true
    },
    "level": 1
  },
  {
    "type": "enum",
    "desc": " 类型常量定义。\n\n",
    "consts": [
      {
        "desc": " 对象的属性即将改变的事件名(prop_change_event_t)。\n\n",
        "name": "EVT_PROP_WILL_CHANGE"
      },
      {
        "desc": " 对象的属性改变的事件名(prop_change_event_t)。\n\n",
        "name": "EVT_PROP_CHANGED"
      },
      {
        "desc": " 对象销毁事件名(event_t)。\n\n",
        "name": "EVT_DESTROY"
      }
    ],
    "header": "tkc/event.h",
    "name": "event_base_type_t",
    "prefix": "EVT_",
    "annotation": {
      "scriptable": true
    },
    "level": 1
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "event_t*",
            "name": "event",
            "desc": "event对象。"
          }
        ],
        "annotation": {
          "cast": true,
          "scriptable": true
        },
        "desc": " 转换为event对象。\n\n > 供脚本语言使用\n\n\n",
        "name": "event_cast",
        "return": {
          "type": "event_t*",
          "desc": "event对象。"
        }
      },
      {
        "params": [
          {
            "type": "uint32_t",
            "name": "type",
            "desc": "事件类型。"
          },
          {
            "type": "void*",
            "name": "target",
            "desc": "目标对象。"
          }
        ],
        "annotation": {
          "constructor": true,
          "scriptable": true
        },
        "desc": " 创建event对象。\n\n 主要给脚本语言使用。\n\n\n",
        "name": "event_create",
        "return": {
          "type": "event_t*",
          "desc": "返回事件对象。"
        }
      },
      {
        "params": [
          {
            "type": "event_t*",
            "name": "event",
            "desc": "event对象。"
          }
        ],
        "annotation": {
          "deconstructor": true,
          "scriptable": true
        },
        "desc": " 销毁事件对象。\n\n 主要给脚本语言使用。\n\n\n",
        "name": "event_destroy",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "uint32_t",
            "name": "type",
            "desc": "事件类型。"
          },
          {
            "type": "void*",
            "name": "target",
            "desc": "目标对象。"
          }
        ],
        "annotation": {
          "constructor": true
        },
        "desc": " 初始化事件。\n\n\n",
        "name": "event_init",
        "return": {
          "type": "event_t",
          "desc": "事件对象。"
        }
      }
    ],
    "events": [],
    "properties": [
      {
        "name": "type",
        "desc": " 类型。\n\n",
        "type": "int32_t",
        "annotation": {
          "readable": true,
          "scriptable": true
        }
      },
      {
        "name": "time",
        "desc": " 事件发生的时间。\n\n",
        "type": "int32_t",
        "annotation": {
          "readable": true,
          "scriptable": true
        }
      },
      {
        "name": "target",
        "desc": " 事件发生的目标对象。\n\n",
        "type": "void*",
        "annotation": {
          "readable": true,
          "scriptable": true
        }
      }
    ],
    "header": "tkc/event.h",
    "desc": " 事件基类。\n\n",
    "name": "event_t",
    "annotation": {
      "scriptable": true
    },
    "level": 1
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "func_call_parser_t*",
            "name": "parser",
            "desc": "parser对象。"
          },
          {
            "type": "char*",
            "name": "str",
            "desc": "要解析的字符串。"
          },
          {
            "type": "uint32_t",
            "name": "size",
            "desc": "字符串长度。"
          }
        ],
        "annotation": {
          "constructor": true
        },
        "desc": " 初始化parser对象。\n\n\n",
        "name": "func_call_parser_init",
        "return": {
          "type": "func_call_parser_t*",
          "desc": "parser对象本身。"
        }
      },
      {
        "params": [
          {
            "type": "func_call_parser_t*",
            "name": "parser",
            "desc": "parser对象。"
          }
        ],
        "annotation": {},
        "desc": " 开始解析。\n\n\n",
        "name": "func_call_parser_parse",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "func_call_parser_t*",
            "name": "parser",
            "desc": "parser对象。"
          }
        ],
        "annotation": {},
        "desc": " 重置parser。\n\n\n",
        "name": "func_call_parser_deinit",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      }
    ],
    "events": [],
    "properties": [],
    "header": "tkc/func_call_parser.h",
    "desc": " 从字符串中解析出函数调用需要的参数。\n func_call => func_name '(' params ')'\n params => param ',' params\n param => name '=' value\n func_name => ID\n name = ID\n value = int | float | ID\n\n 如:move(x=10, y=20)\n 如:rename(old_name=aa, new_name=bb)\n\n",
    "name": "func_call_parser_t",
    "level": 1
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "uint32_t",
            "name": "size",
            "desc": "内存大小。"
          }
        ],
        "annotation": {
          "macro": true
        },
        "desc": " 分配一块内存。\n\n\n\n",
        "name": "TKMEM_ALLOC",
        "return": {
          "type": "void*",
          "desc": "成功返回内存块首地址，失败返回NULL。"
        }
      },
      {
        "params": [
          {
            "type": "uint32_t",
            "name": "nmemb",
            "desc": "内存块数量。"
          },
          {
            "type": "uint32_t",
            "name": "size",
            "desc": "每一块的大小。"
          }
        ],
        "annotation": {
          "macro": true
        },
        "desc": " 分配一块内存，并将内容清零。\n\n\n\n",
        "name": "TKMEM_CALLOC",
        "return": {
          "type": "void*",
          "desc": "成功返回内存块首地址，失败返回NULL。"
        }
      },
      {
        "params": [
          {
            "type": "void*",
            "name": "p",
            "desc": "原来的内存地址。"
          },
          {
            "type": "uint32_t",
            "name": "size",
            "desc": "每一块的大小。"
          }
        ],
        "annotation": {
          "macro": true
        },
        "desc": " 重新分配一块内存，如果原来的内存块大于等于需要的空间，直接返回原来的内存块。\n\n\n\n",
        "name": "TKMEM_REALLOC",
        "return": {
          "type": "void*",
          "desc": "成功返回内存块首地址，失败返回NULL。"
        }
      },
      {
        "params": [
          {
            "type": "void*",
            "name": "p",
            "desc": "内存地址。"
          }
        ],
        "annotation": {
          "macro": true
        },
        "desc": " 释放内存。\n\n\n\n",
        "name": "TKMEM_FREE",
        "return": {
          "type": "void",
          "desc": "无。"
        }
      }
    ],
    "events": [],
    "properties": [],
    "header": "tkc/mem.h",
    "desc": " 内存管理相关的宏和函数。\n\n 示例：\n\n ```c\n char* str = (char*)TKMEM_ALLOC(100);\n ...\n TKMEM_FREE(str);\n ```\n\n ```c\n char* str = (char*)TKMEM_ALLOC(100);\n ...\n str = (char*)TKMEM_REALLOC(str, 128);\n ...\n TKMEM_FREE(str);\n ```\n\n",
    "name": "tk_mem_t",
    "annotation": {
      "fake": true
    },
    "level": 1
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [],
        "annotation": {},
        "desc": " 创建mutex。\n\n\n",
        "name": "tk_mutex_create",
        "return": {
          "type": "tk_mutex_t*",
          "desc": "mutex对象。"
        }
      },
      {
        "params": [
          {
            "type": "tk_mutex_t*",
            "name": "mutex",
            "desc": "mutex对象。"
          }
        ],
        "annotation": {},
        "desc": " 加锁。\n\n\n",
        "name": "tk_mutex_lock",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "tk_mutex_t*",
            "name": "mutex",
            "desc": "mutex对象。"
          }
        ],
        "annotation": {},
        "desc": " 解锁。\n\n\n",
        "name": "tk_mutex_unlock",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "tk_mutex_t*",
            "name": "mutex",
            "desc": "mutex对象。"
          }
        ],
        "annotation": {},
        "desc": " 销毁mutex对象。\n\n\n",
        "name": "tk_mutex_destroy",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      }
    ],
    "events": [],
    "properties": [],
    "header": "tkc/mutex.h",
    "desc": " 互斥锁。\n\n",
    "name": "tk_mutex_t",
    "level": 1
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [],
        "annotation": {
          "constructor": true,
          "scriptable": true
        },
        "desc": "\n 创建named_value对象。\n\n\n",
        "name": "named_value_create",
        "return": {
          "type": "named_value_t*",
          "desc": "返回named_value对象。"
        }
      },
      {
        "params": [
          {
            "type": "named_value_t*",
            "name": "nv",
            "desc": "named_value对象。"
          },
          {
            "type": "const char*",
            "name": "name",
            "desc": "名称。"
          },
          {
            "type": "const value_t*",
            "name": "value",
            "desc": "值。"
          }
        ],
        "annotation": {
          "constructor": true
        },
        "desc": "\n 初始化。\n\n\n\n",
        "name": "named_value_init",
        "return": {
          "type": "ret_t",
          "desc": "返回named_value对象。"
        }
      },
      {
        "params": [
          {
            "type": "named_value_t*",
            "name": "nv",
            "desc": "named_value对象。"
          }
        ],
        "annotation": {
          "cast": true,
          "scriptable": true
        },
        "desc": "\n 转换为named_value对象(供脚本语言使用)。\n\n\n\n",
        "name": "named_value_cast",
        "return": {
          "type": "named_value_t*",
          "desc": "返回named_value对象。"
        }
      },
      {
        "params": [
          {
            "type": "named_value_t*",
            "name": "nv",
            "desc": "named_value对象。"
          },
          {
            "type": "const char*",
            "name": "name",
            "desc": "名称。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "\n 设置名称。\n\n\n\n",
        "name": "named_value_set_name",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "named_value_t*",
            "name": "nv",
            "desc": "named_value对象。"
          },
          {
            "type": "const value_t*",
            "name": "value",
            "desc": "值。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "\n 设置值。\n\n\n\n",
        "name": "named_value_set_value",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "named_value_t*",
            "name": "nv",
            "desc": "named_value对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "\n 获取值对象(主要给脚本语言使用)。\n\n\n\n\n",
        "name": "named_value_get_value",
        "return": {
          "type": "value_t*",
          "desc": "返回值对象。"
        }
      },
      {
        "params": [
          {
            "type": "named_value_t*",
            "name": "nv",
            "desc": "named_value对象。"
          }
        ],
        "annotation": {
          "deconstructor": true
        },
        "desc": "\n 重置named_value对象。\n\n\n\n",
        "name": "named_value_deinit",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "named_value_t*",
            "name": "nv",
            "desc": "named_value对象。"
          }
        ],
        "annotation": {
          "deconstructor": true,
          "scriptable": true
        },
        "desc": "\n 销毁named_value对象。\n\n\n\n",
        "name": "named_value_destroy",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      }
    ],
    "events": [],
    "properties": [
      {
        "name": "name",
        "desc": " 名称。\n\n",
        "type": "char*",
        "annotation": {
          "readable": true,
          "scriptable": true
        }
      },
      {
        "name": "value",
        "desc": " 值。\n\n",
        "type": "value_t",
        "annotation": {
          "readable": true
        }
      }
    ],
    "header": "tkc/named_value.h",
    "desc": " 命名的值。\n\n\n",
    "name": "named_value_t",
    "annotation": {
      "scriptable": true
    },
    "level": 1
  },
  {
    "type": "class",
    "methods": [],
    "events": [],
    "properties": [
      {
        "name": "x",
        "desc": " x坐标。\n\n",
        "type": "xy_t",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "y",
        "desc": " y坐标。\n\n",
        "type": "xy_t",
        "annotation": {
          "readable": true
        }
      }
    ],
    "header": "tkc/rect.h",
    "desc": " 点。包括一个x坐标和一个y坐标。\n\n",
    "name": "point_t",
    "annotation": {
      "scriptable": true
    },
    "level": 1
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "xy_t",
            "name": "x",
            "desc": "x坐标。"
          },
          {
            "type": "xy_t",
            "name": "y",
            "desc": "y坐标。"
          },
          {
            "type": "wh_t",
            "name": "w",
            "desc": "宽度。"
          },
          {
            "type": "wh_t",
            "name": "h",
            "desc": "高度。"
          }
        ],
        "annotation": {
          "constructor": true,
          "scriptable": true
        },
        "desc": " 创建rect对象。\n\n > 主要供脚本语言使用。\n\n\n\n",
        "name": "rect_create",
        "return": {
          "type": "rect_t*",
          "desc": "rect对象。"
        }
      },
      {
        "params": [
          {
            "type": "rect_t*",
            "name": "rect",
            "desc": "rect对象。"
          },
          {
            "type": "xy_t",
            "name": "x",
            "desc": "x坐标。"
          },
          {
            "type": "xy_t",
            "name": "y",
            "desc": "y坐标。"
          },
          {
            "type": "wh_t",
            "name": "w",
            "desc": "宽度。"
          },
          {
            "type": "wh_t",
            "name": "h",
            "desc": "高度。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 设置rect对象的xywh。\n\n > 主要供脚本语言使用。\n\n\n\n",
        "name": "rect_set",
        "return": {
          "type": "rect_t*",
          "desc": "rect对象。"
        }
      },
      {
        "params": [
          {
            "type": "rect_t*",
            "name": "rect",
            "desc": "rect对象。"
          }
        ],
        "annotation": {
          "cast": true,
          "scriptable": true
        },
        "desc": " 转换为rect对象。\n\n > 供脚本语言使用。\n\n\n",
        "name": "rect_cast",
        "return": {
          "type": "rect_t*",
          "desc": "rect对象。"
        }
      },
      {
        "params": [
          {
            "type": "rect_t*",
            "name": "r",
            "desc": "rect对象。"
          }
        ],
        "annotation": {
          "deconstructor": true,
          "scriptable": true
        },
        "desc": "\n 销毁rect对象。\n > 主要供脚本语言使用。\n\n\n\n",
        "name": "rect_destroy",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      }
    ],
    "events": [],
    "properties": [
      {
        "name": "x",
        "desc": " x坐标。\n\n",
        "type": "xy_t",
        "annotation": {
          "readable": true,
          "scriptable": true
        }
      },
      {
        "name": "y",
        "desc": " y坐标。\n\n",
        "type": "xy_t",
        "annotation": {
          "readable": true,
          "scriptable": true
        }
      },
      {
        "name": "w",
        "desc": " 宽度。\n\n",
        "type": "wh_t",
        "annotation": {
          "readable": true,
          "scriptable": true
        }
      },
      {
        "name": "h",
        "desc": " 高度。\n\n",
        "type": "wh_t",
        "annotation": {
          "readable": true,
          "scriptable": true
        }
      }
    ],
    "header": "tkc/rect.h",
    "desc": " 矩形。包括一个x坐标、y坐标、宽度和高度。\n\n",
    "name": "rect_t",
    "annotation": {
      "scriptable": true
    },
    "level": 1
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "tk_destroy_t",
            "name": "destroy",
            "desc": "元素销毁函数。"
          },
          {
            "type": "tk_compare_t",
            "name": "compare",
            "desc": "元素比较函数。"
          }
        ],
        "annotation": {
          "constructor": true
        },
        "desc": " 创建slist对象\n\n\n",
        "name": "slist_create",
        "return": {
          "type": "slist_t*",
          "desc": "单向链表对象。"
        }
      },
      {
        "params": [
          {
            "type": "slist_t*",
            "name": "slist",
            "desc": "单向链表对象。"
          },
          {
            "type": "tk_destroy_t",
            "name": "destroy",
            "desc": "元素销毁函数。"
          },
          {
            "type": "tk_compare_t",
            "name": "compare",
            "desc": "元素比较函数。"
          }
        ],
        "annotation": {},
        "desc": " 初始化slist对象\n\n\n",
        "name": "slist_init",
        "return": {
          "type": "slist_t*",
          "desc": "单向链表对象。"
        }
      },
      {
        "params": [
          {
            "type": "slist_t*",
            "name": "slist",
            "desc": "单向链表对象。"
          },
          {
            "type": "void*",
            "name": "ctx",
            "desc": "比较函数的上下文。"
          }
        ],
        "annotation": {},
        "desc": " 查找第一个满足条件的元素。\n\n\n",
        "name": "slist_find",
        "return": {
          "type": "void*",
          "desc": "如果找到，返回满足条件的对象，否则返回NULL。"
        }
      },
      {
        "params": [
          {
            "type": "slist_t*",
            "name": "slist",
            "desc": "单向链表对象。"
          },
          {
            "type": "void*",
            "name": "ctx",
            "desc": "比较函数的上下文。"
          }
        ],
        "annotation": {},
        "desc": " 删除第一个满足条件的元素。\n\n\n",
        "name": "slist_remove",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "slist_t*",
            "name": "slist",
            "desc": "单向链表对象。"
          }
        ],
        "annotation": {},
        "desc": " 删除全部元素。\n\n\n",
        "name": "slist_remove_all",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "slist_t*",
            "name": "slist",
            "desc": "单向链表对象。"
          },
          {
            "type": "void*",
            "name": "data",
            "desc": "待追加的元素。"
          }
        ],
        "annotation": {},
        "desc": " 在尾巴追加一个元素。\n\n\n",
        "name": "slist_append",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "slist_t*",
            "name": "slist",
            "desc": "单向链表对象。"
          },
          {
            "type": "void*",
            "name": "data",
            "desc": "待追加的元素。"
          }
        ],
        "annotation": {},
        "desc": " 在头部追加一个元素。\n\n\n",
        "name": "slist_prepend",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "slist_t*",
            "name": "slist",
            "desc": "单向链表对象。"
          },
          {
            "type": "tk_visit_t",
            "name": "visit",
            "desc": "遍历函数。"
          },
          {
            "type": "void*",
            "name": "ctx",
            "desc": "遍历函数的上下文。"
          }
        ],
        "annotation": {},
        "desc": " 遍历元素。\n\n\n",
        "name": "slist_foreach",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "slist_t*",
            "name": "slist",
            "desc": "单向链表对象。"
          }
        ],
        "annotation": {},
        "desc": " 返回元素个数。\n\n\n",
        "name": "slist_size",
        "return": {
          "type": "int32_t",
          "desc": "返回元素个数。"
        }
      },
      {
        "params": [
          {
            "type": "slist_t*",
            "name": "slist",
            "desc": "单向链表对象。"
          },
          {
            "type": "void*",
            "name": "ctx",
            "desc": "比较函数的上下文。"
          }
        ],
        "annotation": {},
        "desc": " 返回满足条件元素的个数。\n\n\n",
        "name": "slist_count",
        "return": {
          "type": "int32_t",
          "desc": "返回元素个数。"
        }
      },
      {
        "params": [
          {
            "type": "slist_t*",
            "name": "slist",
            "desc": "单向链表对象。"
          }
        ],
        "annotation": {},
        "desc": " 清除单向链表中的元素。\n\n\n",
        "name": "slist_deinit",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "slist_t*",
            "name": "slist",
            "desc": "单向链表对象。"
          }
        ],
        "annotation": {},
        "desc": " 清除单向链表中的元素，并释放单向链表对象。\n\n\n\n",
        "name": "slist_destroy",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      }
    ],
    "events": [],
    "properties": [
      {
        "name": "first",
        "desc": " 首节点。\n\n",
        "type": "slist_node_t*",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "destroy",
        "desc": " 元素销毁函数。\n\n",
        "type": "tk_destroy_t",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "compare",
        "desc": " 元素比较函数。\n\n",
        "type": "tk_compare_t",
        "annotation": {
          "readable": true
        }
      }
    ],
    "header": "tkc/slist.h",
    "desc": " 单向链表\n\n 用slist\\_init初始化时，用slist\\_deinit释放。如：\n\n ```c\n slist_t slist;\n slist_init(&slist, destroy, compare);\n ...\n slist_deinit(&slist);\n ```\n\n 用slist\\_create创建时，用slist\\_destroy销毁。如：\n\n ```c\n slist_t* slist = slist_create(destroy, compare);\n ...\n slist_destroy(slist);\n ```\n\n\n",
    "name": "slist_t",
    "level": 1
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "str_t*",
            "name": "str",
            "desc": "str对象。"
          },
          {
            "type": "uint32_t",
            "name": "capacity",
            "desc": "初始容量。"
          }
        ],
        "annotation": {
          "constructor": true
        },
        "desc": " 初始化字符串对象。\n\n\n",
        "name": "str_init",
        "return": {
          "type": "str_t*",
          "desc": "str对象本身。"
        }
      },
      {
        "params": [
          {
            "type": "str_t*",
            "name": "str",
            "desc": "str对象。"
          },
          {
            "type": "char*",
            "name": "text",
            "desc": "待比较的字符串。"
          }
        ],
        "annotation": {},
        "desc": " 判断两个字符串是否相等。\n\n\n",
        "name": "str_eq",
        "return": {
          "type": "bool_t",
          "desc": "返回是否相等。"
        }
      },
      {
        "params": [
          {
            "type": "str_t*",
            "name": "str",
            "desc": "str对象。"
          },
          {
            "type": "char*",
            "name": "text",
            "desc": "要设置的字符串。"
          }
        ],
        "annotation": {},
        "desc": " 设置字符串。\n\n\n",
        "name": "str_set",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "str_t*",
            "name": "str",
            "desc": "str对象。"
          },
          {
            "type": "char*",
            "name": "text",
            "desc": "要设置的字符串。"
          },
          {
            "type": "uint32_t",
            "name": "len",
            "desc": "字符串长度。"
          }
        ],
        "annotation": {},
        "desc": " 设置字符串。\n\n\n",
        "name": "str_set_with_len",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "str_t*",
            "name": "str",
            "desc": "str对象。"
          },
          {
            "type": "char*",
            "name": "text",
            "desc": "要追加的字符串。"
          }
        ],
        "annotation": {},
        "desc": " 追加字符串。\n\n\n",
        "name": "str_append",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "str_t*",
            "name": "str",
            "desc": "str对象。"
          },
          {
            "type": "char*",
            "name": "text",
            "desc": "要追加的字符串。"
          },
          {
            "type": "uint32_t",
            "name": "len",
            "desc": "字符串长度。"
          }
        ],
        "annotation": {},
        "desc": " 追加字符串。\n\n\n",
        "name": "str_append_with_len",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "str_t*",
            "name": "str",
            "desc": "str对象。"
          },
          {
            "type": "uint32_t",
            "name": "offset",
            "desc": "偏移量。"
          },
          {
            "type": "char*",
            "name": "text",
            "desc": "要插入的字符串。"
          }
        ],
        "annotation": {},
        "desc": " 插入子字符串。\n\n\n",
        "name": "str_insert",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "str_t*",
            "name": "str",
            "desc": "str对象。"
          },
          {
            "type": "uint32_t",
            "name": "offset",
            "desc": "偏移量。"
          },
          {
            "type": "char*",
            "name": "text",
            "desc": "要插入的字符串。"
          },
          {
            "type": "uint32_t",
            "name": "len",
            "desc": "字符串长度。"
          }
        ],
        "annotation": {},
        "desc": " 插入子字符串。\n\n\n",
        "name": "str_insert_with_len",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "str_t*",
            "name": "str",
            "desc": "str对象。"
          },
          {
            "type": "uint32_t",
            "name": "offset",
            "desc": "偏移量。"
          },
          {
            "type": "uint32_t",
            "name": "len",
            "desc": "长度。"
          }
        ],
        "annotation": {},
        "desc": " 删除子字符串。\n\n\n",
        "name": "str_remove",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "str_t*",
            "name": "str",
            "desc": "str对象。"
          },
          {
            "type": "char",
            "name": "c",
            "desc": "要追加的字符。"
          }
        ],
        "annotation": {},
        "desc": " 追加一个字符。\n\n\n",
        "name": "str_append_char",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "str_t*",
            "name": "str",
            "desc": "str对象。"
          }
        ],
        "annotation": {},
        "desc": " 对字符串进行反转义。如：把\"\\n\"转换成'\\n'。\n\n\n",
        "name": "str_unescape",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "str_t*",
            "name": "str",
            "desc": "str对象。"
          },
          {
            "type": "char*",
            "name": "text",
            "desc": "要解码的XML文本。"
          }
        ],
        "annotation": {},
        "desc": " 对XML基本的entity进行解码，目前仅支持&lt;&gt;&quota;&amp;。\n\n\n",
        "name": "str_decode_xml_entity",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "str_t*",
            "name": "str",
            "desc": "str对象。"
          },
          {
            "type": "char*",
            "name": "text",
            "desc": "要解码的XML文本。"
          },
          {
            "type": "uint32_t",
            "name": "len",
            "desc": "字符串长度。"
          }
        ],
        "annotation": {},
        "desc": " 对XML基本的entity进行解码，目前仅支持&lt;&gt;&quota;&amp;。\n\n\n",
        "name": "str_decode_xml_entity_with_len",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "str_t*",
            "name": "str",
            "desc": "str对象。"
          },
          {
            "type": "int32_t",
            "name": "v",
            "desc": "整数。"
          }
        ],
        "annotation": {},
        "desc": " 用整数初始化字符串。\n\n\n",
        "name": "str_from_int",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "str_t*",
            "name": "str",
            "desc": "str对象。"
          },
          {
            "type": "double",
            "name": "v",
            "desc": "浮点数。"
          }
        ],
        "annotation": {},
        "desc": " 用浮点数初始化字符串。\n\n\n",
        "name": "str_from_float",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "str_t*",
            "name": "str",
            "desc": "str对象。"
          },
          {
            "type": "value_t",
            "name": "v",
            "desc": "value。"
          }
        ],
        "annotation": {},
        "desc": " 用value初始化字符串。\n\n\n",
        "name": "str_from_value",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "str_t*",
            "name": "str",
            "desc": "str对象。"
          },
          {
            "type": "wchar_t*",
            "name": "wstr",
            "desc": "wstr。"
          }
        ],
        "annotation": {},
        "desc": " 用value初始化字符串。\n\n\n",
        "name": "str_from_wstr",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "str_t*",
            "name": "str",
            "desc": "str对象。"
          },
          {
            "type": "int32_t*",
            "name": "v",
            "desc": "用于返回整数。"
          }
        ],
        "annotation": {},
        "desc": " 将字符串转成整数。\n\n\n",
        "name": "str_to_int",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "str_t*",
            "name": "str",
            "desc": "str对象。"
          },
          {
            "type": "double*",
            "name": "v",
            "desc": "用于返回浮点数。"
          }
        ],
        "annotation": {},
        "desc": " 将字符串转成浮点数。\n\n\n",
        "name": "str_to_float",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "str_t*",
            "name": "str",
            "desc": "str对象。"
          },
          {
            "type": "char*",
            "name": "text",
            "desc": "子字符串。"
          }
        ],
        "annotation": {},
        "desc": " 判断字符串是否以指定的子串结尾。\n\n\n",
        "name": "str_end_with",
        "return": {
          "type": "bool_t",
          "desc": "返回是否以指定的子串结尾。"
        }
      },
      {
        "params": [
          {
            "type": "str_t*",
            "name": "str",
            "desc": "str对象。"
          },
          {
            "type": "char*",
            "name": "text",
            "desc": "子字符串。"
          }
        ],
        "annotation": {},
        "desc": " 判断字符串是否以指定的子串开头。\n\n\n",
        "name": "str_start_with",
        "return": {
          "type": "bool_t",
          "desc": "返回是否以指定的子串开头。"
        }
      },
      {
        "params": [
          {
            "type": "str_t*",
            "name": "str",
            "desc": "str对象。"
          },
          {
            "type": "char*",
            "name": "text",
            "desc": "要去除的字符集合。"
          }
        ],
        "annotation": {},
        "desc": " 去除首尾指定的字符。\n\n\n",
        "name": "str_trim",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "str_t*",
            "name": "str",
            "desc": "str对象。"
          },
          {
            "type": "char*",
            "name": "text",
            "desc": "要去除的字符集合。"
          }
        ],
        "annotation": {},
        "desc": " 去除首部指定的字符。\n\n\n",
        "name": "str_trim_left",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "str_t*",
            "name": "str",
            "desc": "str对象。"
          },
          {
            "type": "char*",
            "name": "text",
            "desc": "要去除的字符集合。"
          }
        ],
        "annotation": {},
        "desc": " 去除尾部指定的字符。\n\n\n",
        "name": "str_trim_right",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "str_t*",
            "name": "str",
            "desc": "str对象。"
          },
          {
            "type": "char*",
            "name": "text",
            "desc": "待替换的子串。"
          },
          {
            "type": "char*",
            "name": "new_text",
            "desc": "将替换成的子串。"
          }
        ],
        "annotation": {},
        "desc": " 字符串替换。\n\n\n",
        "name": "str_replace",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "str_t*",
            "name": "str",
            "desc": "str对象。"
          }
        ],
        "annotation": {},
        "desc": " 将字符串转成小写。\n\n\n",
        "name": "str_to_lower",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "str_t*",
            "name": "str",
            "desc": "str对象。"
          }
        ],
        "annotation": {},
        "desc": " 将字符串转成大写。\n\n\n",
        "name": "str_to_upper",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "str_t*",
            "name": "str",
            "desc": "str对象。"
          }
        ],
        "annotation": {},
        "desc": " 重置字符串为空。\n\n\n",
        "name": "str_reset",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      }
    ],
    "events": [],
    "properties": [
      {
        "name": "size",
        "desc": " 长度。\n\n",
        "type": "uint32_t",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "capacity",
        "desc": " 容量。\n\n",
        "type": "uint32_t",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "str",
        "desc": " 字符串。\n\n",
        "type": "char*",
        "annotation": {
          "readable": true
        }
      }
    ],
    "header": "tkc/str.h",
    "desc": " 可变长度的UTF8字符串。\n\n 示例：\n\n ```c\n  str_t s;\n  str_init(&s, 0);\n\n  str_append(&s, \"abc\");\n  str_append(&s, \"123\");\n\n  str_reset(&s);\n ```\n\n > 先调str\\_init进行初始化，最后调用str\\_reset释放内存。\n\n\n",
    "name": "str_t",
    "level": 1
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [],
        "annotation": {},
        "desc": " 创建thread对象。\n\n\n",
        "name": "thread_create",
        "return": {
          "type": "thread_t*",
          "desc": "thread对象。"
        }
      },
      {
        "params": [
          {
            "type": "thread_t*",
            "name": "thread",
            "desc": "thread对象。"
          }
        ],
        "annotation": {},
        "desc": " 启动线程。\n\n\n",
        "name": "thread_start",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "thread_t*",
            "name": "thread",
            "desc": "thread对象。"
          }
        ],
        "annotation": {},
        "desc": " 等待线程退出。\n\n\n",
        "name": "thread_join",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "thread_t*",
            "name": "thread",
            "desc": "thread对象。"
          }
        ],
        "annotation": {},
        "desc": " 销毁thread对象。\n\n\n",
        "name": "thread_destroy",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      }
    ],
    "events": [],
    "properties": [],
    "header": "tkc/thread.h",
    "desc": " 线程对象。\n\n",
    "name": "thread_t",
    "level": 1
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [],
        "annotation": {
          "scriptable": true,
          "static": true
        },
        "desc": " 获取当前时间(秒)。\n\n\n",
        "name": "time_now_s",
        "return": {
          "type": "uint32_t",
          "desc": "返回当前时间(秒)。"
        }
      },
      {
        "params": [],
        "annotation": {
          "scriptable": true,
          "static": true
        },
        "desc": " 获取当前时间(毫秒)。\n\n\n",
        "name": "time_now_ms",
        "return": {
          "type": "uint32_t",
          "desc": "返回当前时间(毫秒)。"
        }
      }
    ],
    "events": [],
    "properties": [],
    "header": "tkc/time_now.h",
    "desc": " 获取当前时间的函数。\n 这里的当前时间是相对的，在嵌入式系统一般相对于开机时间。\n 它本身并没有任何意义，一般用来计算时间间隔，如实现定时器和动画等等。\n\n",
    "name": "time_now_t",
    "annotation": {
      "scriptable": true,
      "fake": true
    },
    "level": 1
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "tokenizer_t*",
            "name": "tokenizer",
            "desc": "tokenizer对象。"
          },
          {
            "type": "char*",
            "name": "str",
            "desc": "要解析的字符串。"
          },
          {
            "type": "uint32_t",
            "name": "size",
            "desc": "字符串长度。"
          },
          {
            "type": "char*",
            "name": "separtor",
            "desc": "分隔字符。"
          }
        ],
        "annotation": {
          "constructor": true
        },
        "desc": " 初始化tokenizer对象。\n\n\n",
        "name": "tokenizer_init",
        "return": {
          "type": "tokenizer_t*",
          "desc": "tokenizer对象本身。"
        }
      },
      {
        "params": [
          {
            "type": "tokenizer_t*",
            "name": "tokenizer",
            "desc": "tokenizer对象。"
          }
        ],
        "annotation": {},
        "desc": " 是否还有下一个token。\n\n\n",
        "name": "tokenizer_has_more",
        "return": {
          "type": "bool_t",
          "desc": "还有下一个token返回TRUE，否则返回FALSE。"
        }
      },
      {
        "params": [
          {
            "type": "tokenizer_t*",
            "name": "tokenizer",
            "desc": "tokenizer对象。"
          }
        ],
        "annotation": {},
        "desc": " 获取下一个token。\n\n\n",
        "name": "tokenizer_next",
        "return": {
          "type": "char*",
          "desc": "成功返回token，失败返回NULL。"
        }
      },
      {
        "params": [
          {
            "type": "tokenizer_t*",
            "name": "tokenizer",
            "desc": "tokenizer对象。"
          },
          {
            "type": "int",
            "name": "defval",
            "desc": "缺省值。"
          }
        ],
        "annotation": {},
        "desc": " 获取下一个token，并转换成int。\n\n\n",
        "name": "tokenizer_next_int",
        "return": {
          "type": "char*",
          "desc": "成功返回token的int值，失败返回缺省值。"
        }
      },
      {
        "params": [
          {
            "type": "tokenizer_t*",
            "name": "tokenizer",
            "desc": "tokenizer对象。"
          },
          {
            "type": "float",
            "name": "defval",
            "desc": "缺省值。"
          }
        ],
        "annotation": {},
        "desc": " 获取下一个token，并转换成float。\n\n\n",
        "name": "tokenizer_next_float",
        "return": {
          "type": "char*",
          "desc": "成功返回token的float值，失败返回缺省值。"
        }
      },
      {
        "params": [
          {
            "type": "tokenizer_t*",
            "name": "tokenizer",
            "desc": "tokenizer对象。"
          }
        ],
        "annotation": {},
        "desc": " 重置tokenizer。\n\n\n",
        "name": "tokenizer_deinit",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      }
    ],
    "events": [],
    "properties": [
      {
        "name": "str",
        "desc": " 字符串。\n\n",
        "type": "char*",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "size",
        "desc": " 字符串的长度。\n\n",
        "type": "uint32_t",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "cursor",
        "desc": " 当前位置。\n\n",
        "type": "uint32_t",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "separtor",
        "desc": " 字符串。\n\n",
        "type": "char*",
        "annotation": {
          "readable": true
        }
      }
    ],
    "header": "tkc/tokenizer.h",
    "desc": " 从字符串中解析出一个一个的token。\n\n",
    "name": "tokenizer_t",
    "level": 1
  },
  {
    "type": "enum",
    "desc": " 函数返回值常量定义。\r\n",
    "consts": [
      {
        "desc": " 成功。\r\n",
        "name": "RET_OK"
      },
      {
        "desc": " Out of memory。\r\n",
        "name": "RET_OOM"
      },
      {
        "desc": " 失败。\r\n",
        "name": "RET_FAIL"
      },
      {
        "desc": " 没有实现/不支持。\r\n",
        "name": "RET_NOT_IMPL"
      },
      {
        "desc": " 退出。通常用于主循环。\r\n",
        "name": "RET_QUIT"
      },
      {
        "desc": " 找到。\r\n",
        "name": "RET_FOUND"
      },
      {
        "desc": " 对象忙。\r\n",
        "name": "RET_BUSY"
      },
      {
        "desc": " 移出。通常用于定时器。\r\n",
        "name": "RET_REMOVE"
      },
      {
        "desc": " 重复。通常用于定时器。\r\n",
        "name": "RET_REPEAT"
      },
      {
        "desc": " 没找到。\r\n",
        "name": "RET_NOT_FOUND"
      },
      {
        "desc": " 操作完成。\r\n",
        "name": "RET_DONE"
      },
      {
        "desc": " 停止后续操作。\r\n",
        "name": "RET_STOP"
      },
      {
        "desc": " 继续后续操作。\r\n",
        "name": "RET_CONTINUE"
      },
      {
        "desc": " 无效参数。\r\n",
        "name": "RET_BAD_PARAMS"
      }
    ],
    "header": "tkc/types_def.h",
    "name": "ret_t",
    "prefix": "RET_",
    "annotation": {
      "scriptable": true
    },
    "level": 1
  },
  {
    "type": "enum",
    "desc": " 类型常量定义。\n\n",
    "consts": [
      {
        "desc": " 无效类型。\n\n",
        "name": "VALUE_TYPE_INVALID"
      },
      {
        "desc": " BOOL类型。\n\n",
        "name": "VALUE_TYPE_BOOL"
      },
      {
        "desc": " int8_t类型。\n\n",
        "name": "VALUE_TYPE_INT8"
      },
      {
        "desc": " uint8_t类型。\n\n",
        "name": "VALUE_TYPE_UINT8"
      },
      {
        "desc": " int16_t类型。\n\n",
        "name": "VALUE_TYPE_INT16"
      },
      {
        "desc": " uint16_t类型。\n\n",
        "name": "VALUE_TYPE_UINT16"
      },
      {
        "desc": " int32_t类型。\n\n",
        "name": "VALUE_TYPE_INT32"
      },
      {
        "desc": " uint32_t类型。\n\n",
        "name": "VALUE_TYPE_UINT32"
      },
      {
        "desc": " int64_t类型。\n\n",
        "name": "VALUE_TYPE_INT64"
      },
      {
        "desc": " uint64_t类型。\n\n",
        "name": "VALUE_TYPE_UINT64"
      },
      {
        "desc": " void*类型。\n\n",
        "name": "VALUE_TYPE_POINTER"
      },
      {
        "desc": " float_t类型。\n\n",
        "name": "VALUE_TYPE_FLOAT"
      },
      {
        "desc": " float类型。\n\n",
        "name": "VALUE_TYPE_FLOAT32"
      },
      {
        "desc": " double类型。\n\n",
        "name": "VALUE_TYPE_DOUBLE"
      },
      {
        "desc": " char*类型。\n\n",
        "name": "VALUE_TYPE_STRING"
      },
      {
        "desc": " wchar_t*类型。\n\n",
        "name": "VALUE_TYPE_WSTRING"
      },
      {
        "desc": " object_t*类型。\n\n",
        "name": "VALUE_TYPE_OBJECT"
      }
    ],
    "header": "tkc/value.h",
    "name": "value_type_t",
    "prefix": "VALUE_TYPE_",
    "annotation": {
      "scriptable": true
    },
    "level": 1
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "value_t*",
            "name": "v",
            "desc": "value对象。"
          },
          {
            "type": "bool_t",
            "name": "value",
            "desc": "待设置的值。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 设置类型为bool的值。\n\n\n",
        "name": "value_set_bool",
        "return": {
          "type": "value_t*",
          "desc": "value对象本身。"
        }
      },
      {
        "params": [
          {
            "type": "value_t*",
            "name": "v",
            "desc": "value对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 获取类型为bool的值。\n\n\n",
        "name": "value_bool",
        "return": {
          "type": "bool_t",
          "desc": "值。"
        }
      },
      {
        "params": [
          {
            "type": "value_t*",
            "name": "v",
            "desc": "value对象。"
          },
          {
            "type": "int8_t",
            "name": "value",
            "desc": "待设置的值。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 设置类型为int8的值。\n\n\n",
        "name": "value_set_int8",
        "return": {
          "type": "value_t*",
          "desc": "value对象本身。"
        }
      },
      {
        "params": [
          {
            "type": "value_t*",
            "name": "v",
            "desc": "value对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 获取类型为int8的值。\n\n\n",
        "name": "value_int8",
        "return": {
          "type": "int8_t",
          "desc": "值。"
        }
      },
      {
        "params": [
          {
            "type": "value_t*",
            "name": "v",
            "desc": "value对象。"
          },
          {
            "type": "uint8_t",
            "name": "value",
            "desc": "待设置的值。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 设置类型为uint8的值。\n\n\n",
        "name": "value_set_uint8",
        "return": {
          "type": "value_t*",
          "desc": "value对象本身。"
        }
      },
      {
        "params": [
          {
            "type": "value_t*",
            "name": "v",
            "desc": "value对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 获取类型为uint8的值。\n\n\n",
        "name": "value_uint8",
        "return": {
          "type": "int8_t",
          "desc": "值。"
        }
      },
      {
        "params": [
          {
            "type": "value_t*",
            "name": "v",
            "desc": "value对象。"
          },
          {
            "type": "int16_t",
            "name": "value",
            "desc": "待设置的值。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 设置类型为int16的值。\n\n\n",
        "name": "value_set_int16",
        "return": {
          "type": "value_t*",
          "desc": "value对象本身。"
        }
      },
      {
        "params": [
          {
            "type": "value_t*",
            "name": "v",
            "desc": "value对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 获取类型为int16的值。\n\n\n",
        "name": "value_int16",
        "return": {
          "type": "int16_t",
          "desc": "值。"
        }
      },
      {
        "params": [
          {
            "type": "value_t*",
            "name": "v",
            "desc": "value对象。"
          },
          {
            "type": "uint16_t",
            "name": "value",
            "desc": "待设置的值。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 设置类型为uint16的值。\n\n\n",
        "name": "value_set_uint16",
        "return": {
          "type": "value_t*",
          "desc": "value对象本身。"
        }
      },
      {
        "params": [
          {
            "type": "value_t*",
            "name": "v",
            "desc": "value对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 获取类型为uint16的值。\n\n\n",
        "name": "value_uint16",
        "return": {
          "type": "uint16_t",
          "desc": "值。"
        }
      },
      {
        "params": [
          {
            "type": "value_t*",
            "name": "v",
            "desc": "value对象。"
          },
          {
            "type": "int32_t",
            "name": "value",
            "desc": "待设置的值。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 设置类型为int32的值。\n\n\n",
        "name": "value_set_int32",
        "return": {
          "type": "value_t*",
          "desc": "value对象本身。"
        }
      },
      {
        "params": [
          {
            "type": "value_t*",
            "name": "v",
            "desc": "value对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 获取类型为int32的值。\n\n\n",
        "name": "value_int32",
        "return": {
          "type": "int32_t",
          "desc": "值。"
        }
      },
      {
        "params": [
          {
            "type": "value_t*",
            "name": "v",
            "desc": "value对象。"
          },
          {
            "type": "uint32_t",
            "name": "value",
            "desc": "待设置的值。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 设置类型为uint32的值。\n\n\n",
        "name": "value_set_uint32",
        "return": {
          "type": "value_t*",
          "desc": "value对象本身。"
        }
      },
      {
        "params": [
          {
            "type": "value_t*",
            "name": "v",
            "desc": "value对象。"
          }
        ],
        "annotation": {},
        "desc": " 获取类型为uint32的值。\n\n\n",
        "name": "value_uint32",
        "return": {
          "type": "uint32_t",
          "desc": "值。"
        }
      },
      {
        "params": [
          {
            "type": "value_t*",
            "name": "v",
            "desc": "value对象。"
          },
          {
            "type": "int64_t",
            "name": "value",
            "desc": "待设置的值。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 设置类型为int64的值。\n\n\n",
        "name": "value_set_int64",
        "return": {
          "type": "value_t*",
          "desc": "value对象本身。"
        }
      },
      {
        "params": [
          {
            "type": "value_t*",
            "name": "v",
            "desc": "value对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 获取类型为int64的值。\n\n\n",
        "name": "value_int64",
        "return": {
          "type": "int64_t",
          "desc": "值。"
        }
      },
      {
        "params": [
          {
            "type": "value_t*",
            "name": "v",
            "desc": "value对象。"
          },
          {
            "type": "uint64_t",
            "name": "value",
            "desc": "待设置的值。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 设置类型为uint64的值。\n\n\n",
        "name": "value_set_uint64",
        "return": {
          "type": "value_t*",
          "desc": "value对象本身。"
        }
      },
      {
        "params": [
          {
            "type": "value_t*",
            "name": "v",
            "desc": "value对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 获取类型为uint64的值。\n\n\n",
        "name": "value_uint64",
        "return": {
          "type": "uint64_t",
          "desc": "值。"
        }
      },
      {
        "params": [
          {
            "type": "value_t*",
            "name": "v",
            "desc": "value对象。"
          },
          {
            "type": "pointer_t",
            "name": "value",
            "desc": "待设置的值。"
          }
        ],
        "annotation": {},
        "desc": " 设置类型为pointer的值。\n\n\n",
        "name": "value_set_pointer",
        "return": {
          "type": "value_t*",
          "desc": "value对象本身。"
        }
      },
      {
        "params": [
          {
            "type": "value_t*",
            "name": "v",
            "desc": "value对象。"
          }
        ],
        "annotation": {},
        "desc": " 获取类型为pointer的值。\n\n\n",
        "name": "value_pointer",
        "return": {
          "type": "void*",
          "desc": "值。"
        }
      },
      {
        "params": [
          {
            "type": "value_t*",
            "name": "v",
            "desc": "value对象。"
          },
          {
            "type": "float_t",
            "name": "value",
            "desc": "待设置的值。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 设置类型为float\\_t的值。\n\n\n",
        "name": "value_set_float",
        "return": {
          "type": "value_t*",
          "desc": "value对象本身。"
        }
      },
      {
        "params": [
          {
            "type": "value_t*",
            "name": "v",
            "desc": "value对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 获取类型为float\\_t的值。\n\n\n",
        "name": "value_float",
        "return": {
          "type": "float_t",
          "desc": "值。"
        }
      },
      {
        "params": [
          {
            "type": "value_t*",
            "name": "v",
            "desc": "value对象。"
          },
          {
            "type": "float",
            "name": "value",
            "desc": "待设置的值。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 设置类型为float的值。\n\n\n",
        "name": "value_set_float32",
        "return": {
          "type": "value_t*",
          "desc": "value对象本身。"
        }
      },
      {
        "params": [
          {
            "type": "value_t*",
            "name": "v",
            "desc": "value对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 获取类型为float的值。\n\n\n",
        "name": "value_float32",
        "return": {
          "type": "float",
          "desc": "值。"
        }
      },
      {
        "params": [
          {
            "type": "value_t*",
            "name": "v",
            "desc": "value对象。"
          },
          {
            "type": "double",
            "name": "value",
            "desc": "待设置的值。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 设置类型为double的值。\n\n\n",
        "name": "value_set_double",
        "return": {
          "type": "value_t*",
          "desc": "value对象本身。"
        }
      },
      {
        "params": [
          {
            "type": "value_t*",
            "name": "v",
            "desc": "value对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 获取类型为double的值。\n\n\n",
        "name": "value_double",
        "return": {
          "type": "double",
          "desc": "值。"
        }
      },
      {
        "params": [
          {
            "type": "value_t*",
            "name": "v",
            "desc": "value对象。"
          },
          {
            "type": "const char*",
            "name": "value",
            "desc": "待设置的值。"
          }
        ],
        "annotation": {},
        "desc": " 设置类型为字符串的值。\n\n\n",
        "name": "value_set_str",
        "return": {
          "type": "value_t*",
          "desc": "value对象本身。"
        }
      },
      {
        "params": [
          {
            "type": "value_t*",
            "name": "v",
            "desc": "value对象。"
          },
          {
            "type": "const char*",
            "name": "value",
            "desc": "待设置的值。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 设置类型为字符串的值(并拷贝字符串)。\n\n > 供脚本语言使用。\n\n\n",
        "name": "value_dup_str",
        "alias": "value_set_str",
        "return": {
          "type": "value_t*",
          "desc": "value对象本身。"
        }
      },
      {
        "params": [
          {
            "type": "value_t*",
            "name": "v",
            "desc": "value对象。"
          },
          {
            "type": "const wchar_t*",
            "name": "value",
            "desc": "待设置的值。"
          }
        ],
        "annotation": {},
        "desc": " 设置类型为宽字符串的值。\n\n\n",
        "name": "value_set_wstr",
        "return": {
          "type": "value_t*",
          "desc": "value对象本身。"
        }
      },
      {
        "params": [
          {
            "type": "value_t*",
            "name": "v",
            "desc": "value对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 获取类型为字符串的值。\n\n\n",
        "name": "value_str",
        "return": {
          "type": "const char*",
          "desc": "值。"
        }
      },
      {
        "params": [
          {
            "type": "value_t*",
            "name": "v",
            "desc": "value对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 获取类型为宽字符串的值。\n\n\n",
        "name": "value_wstr",
        "return": {
          "type": "const wchar_t*",
          "desc": "值。"
        }
      },
      {
        "params": [
          {
            "type": "value_t*",
            "name": "value",
            "desc": "value对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 判断value是否为空值。\n\n\n",
        "name": "value_is_null",
        "return": {
          "type": "bool_t",
          "desc": "为空值返回TRUE，否则返回FALSE。"
        }
      },
      {
        "params": [
          {
            "type": "value_t*",
            "name": "value",
            "desc": "value对象。"
          },
          {
            "type": "value_t*",
            "name": "other",
            "desc": "value对象。"
          }
        ],
        "annotation": {},
        "desc": " 判断两个value是否相同。\n\n\n",
        "name": "value_equal",
        "return": {
          "type": "bool_t",
          "desc": "为空值返回TRUE，否则返回FALSE。"
        }
      },
      {
        "params": [
          {
            "type": "value_t*",
            "name": "v",
            "desc": "value对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 转换为int的值。\n\n\n",
        "name": "value_int",
        "return": {
          "type": "int",
          "desc": "值。"
        }
      },
      {
        "params": [
          {
            "type": "value_t*",
            "name": "v",
            "desc": "value对象。"
          },
          {
            "type": "int32_t",
            "name": "value",
            "desc": "待设置的值。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 设置类型为int的值。\n\n\n",
        "name": "value_set_int",
        "return": {
          "type": "value_t*",
          "desc": "value对象本身。"
        }
      },
      {
        "params": [
          {
            "type": "value_t*",
            "name": "v",
            "desc": "value对象。"
          },
          {
            "type": "object_t*",
            "name": "value",
            "desc": "待设置的值。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 设置类型为object的值。\n\n\n",
        "name": "value_set_object",
        "return": {
          "type": "value_t*",
          "desc": "value对象本身。"
        }
      },
      {
        "params": [
          {
            "type": "value_t*",
            "name": "v",
            "desc": "value对象。"
          }
        ],
        "annotation": {
          "scriptable": true,
          "constructor": true
        },
        "desc": " 转换为object的值。\n\n\n",
        "name": "value_object",
        "return": {
          "type": "object_t*",
          "desc": "值。"
        }
      },
      {
        "params": [
          {
            "type": "value_t*",
            "name": "dst",
            "desc": "目的value对象。"
          },
          {
            "type": "value_t*",
            "name": "src",
            "desc": "源value对象。"
          }
        ],
        "annotation": {},
        "desc": " 拷贝value的值。\n\n\n",
        "name": "value_copy",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "value_t*",
            "name": "dst",
            "desc": "目的value对象。"
          },
          {
            "type": "value_t*",
            "name": "src",
            "desc": "源value对象。"
          }
        ],
        "annotation": {},
        "desc": " 深拷贝value的值。\n\n\n",
        "name": "value_deep_copy",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [],
        "annotation": {
          "constructor": true,
          "scriptable": true
        },
        "desc": " 创建value对象。\n\n\n",
        "name": "value_create",
        "return": {
          "type": "value_t*",
          "desc": "对象。"
        }
      },
      {
        "params": [
          {
            "type": "value_t*",
            "name": "v",
            "desc": "value对象。"
          }
        ],
        "annotation": {
          "deconstructor": true,
          "scriptable": true
        },
        "desc": " 销毁value对象。\n\n\n",
        "name": "value_destroy",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "value_t*",
            "name": "v",
            "desc": "value对象。"
          }
        ],
        "annotation": {
          "deconstructor": true,
          "scriptable": true
        },
        "desc": " 重置value对象。\n\n\n",
        "name": "value_reset",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "value_t*",
            "name": "value",
            "desc": "value对象。"
          }
        ],
        "annotation": {
          "cast": true,
          "scriptable": true
        },
        "desc": " 转换为value对象。\n\n > 供脚本语言使用\n\n\n",
        "name": "value_cast",
        "return": {
          "type": "value_t*",
          "desc": "对象。"
        }
      }
    ],
    "events": [],
    "properties": [],
    "header": "tkc/value.h",
    "desc": " 一个通用数据类型，用来存放整数、浮点数、字符串和其它对象。\n\n 在C/C++中，一般不需动态创建对象，直接声明并初始化即可。如：\n\n ```c\n value_t v;\n value_set_int(&v, 100);\n ```\n\n> 在脚本语言中，需要动态创建对象。\n\n\n",
    "name": "value_t",
    "annotation": {
      "scriptable": true
    },
    "level": 1
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "wstr_t*",
            "name": "str",
            "desc": "str对象。"
          },
          {
            "type": "uint32_t",
            "name": "capacity",
            "desc": "初始容量。"
          }
        ],
        "annotation": {
          "constructor": true
        },
        "desc": " 初始化字符串对象。\n\n\n",
        "name": "wstr_init",
        "return": {
          "type": "wstr_t*",
          "desc": "str对象本身。"
        }
      },
      {
        "params": [
          {
            "type": "wstr_t*",
            "name": "str",
            "desc": "str对象。"
          },
          {
            "type": "wchar_t*",
            "name": "text",
            "desc": "要设置的字符串。"
          }
        ],
        "annotation": {},
        "desc": " 设置字符串。\n\n\n",
        "name": "wstr_set",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "wstr_t*",
            "name": "str",
            "desc": "str对象。"
          },
          {
            "type": "char*",
            "name": "text",
            "desc": "要设置的字符串。"
          }
        ],
        "annotation": {},
        "desc": " 设置UTF8字符串。\n\n\n",
        "name": "wstr_set_utf8",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "wstr_t*",
            "name": "str",
            "desc": "str对象。"
          },
          {
            "type": "char*",
            "name": "text",
            "desc": "返回的字符串。"
          },
          {
            "type": "uint32_t",
            "name": "size",
            "desc": "text最大长度。"
          }
        ],
        "annotation": {},
        "desc": " 获取UTF8字符串。\n\n\n",
        "name": "wstr_get_utf8",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "wstr_t*",
            "name": "str",
            "desc": "str对象。"
          },
          {
            "type": "uint32_t",
            "name": "offset",
            "desc": "指定的位置。"
          },
          {
            "type": "uint32_t",
            "name": "nr",
            "desc": "要删除的字符数。"
          }
        ],
        "annotation": {},
        "desc": " 删除指定范围的字符。\n\n\n",
        "name": "wstr_remove",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "wstr_t*",
            "name": "str",
            "desc": "str对象。"
          },
          {
            "type": "uint32_t",
            "name": "offset",
            "desc": "指定的位置。"
          },
          {
            "type": "wchar_t*",
            "name": "text",
            "desc": "待插入的文本。"
          },
          {
            "type": "uint32_t",
            "name": "nr",
            "desc": "要插入的字符数。"
          }
        ],
        "annotation": {},
        "desc": " 在指定位置插入字符串。\n\n\n",
        "name": "wstr_insert",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "wstr_t*",
            "name": "str",
            "desc": "str对象。"
          },
          {
            "type": "wchar_t*",
            "name": "text",
            "desc": "要追加的字符串。"
          }
        ],
        "annotation": {},
        "desc": " 追加字符串。\n\n\n",
        "name": "wstr_append",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "wstr_t*",
            "name": "str",
            "desc": "str对象。"
          },
          {
            "type": "wchar_t*",
            "name": "text",
            "desc": "要追加的字符串。"
          },
          {
            "type": "uint32_t",
            "name": "len",
            "desc": "字符串长度。"
          }
        ],
        "annotation": {},
        "desc": " 追加字符串。\n\n\n",
        "name": "wstr_append_with_len",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "wstr_t*",
            "name": "str",
            "desc": "str对象。"
          },
          {
            "type": "wchar_t",
            "name": "c",
            "desc": "字符。"
          }
        ],
        "annotation": {},
        "desc": " 追加一个字符。\n\n\n",
        "name": "wstr_push",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "wstr_t*",
            "name": "str",
            "desc": "str对象。"
          }
        ],
        "annotation": {},
        "desc": " 删除尾部字符。\n\n\n",
        "name": "wstr_pop",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "wstr_t*",
            "name": "str",
            "desc": "str对象。"
          },
          {
            "type": "const char*",
            "name": "format",
            "desc": "格式(用于snprintf格式化数值)"
          },
          {
            "type": "int32_t",
            "name": "value",
            "desc": "数值。"
          }
        ],
        "annotation": {},
        "desc": " 追加一个整数。\n\n\n",
        "name": "wstr_push_int",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "wstr_t*",
            "name": "str",
            "desc": "str对象。"
          },
          {
            "type": "wstr_t*",
            "name": "other",
            "desc": "str对象。"
          }
        ],
        "annotation": {},
        "desc": " 判断两个字符是否相同。\n\n\n",
        "name": "wstr_equal",
        "return": {
          "type": "bool_t",
          "desc": "返回TRUE表示相同，否则表示不同。"
        }
      },
      {
        "params": [
          {
            "type": "wstr_t*",
            "name": "str",
            "desc": "str对象。"
          },
          {
            "type": "int32_t",
            "name": "v",
            "desc": "整数。"
          }
        ],
        "annotation": {},
        "desc": " 用整数初始化字符串。\n\n\n",
        "name": "wstr_from_int",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "wstr_t*",
            "name": "str",
            "desc": "str对象。"
          },
          {
            "type": "double",
            "name": "v",
            "desc": "浮点数。"
          }
        ],
        "annotation": {},
        "desc": " 用浮点数初始化字符串。\n\n\n",
        "name": "wstr_from_float",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "wstr_t*",
            "name": "str",
            "desc": "str对象。"
          },
          {
            "type": "value_t",
            "name": "v",
            "desc": "value。"
          }
        ],
        "annotation": {},
        "desc": " 用value初始化字符串。\n\n\n",
        "name": "wstr_from_value",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "wstr_t*",
            "name": "str",
            "desc": "str对象。"
          },
          {
            "type": "int32_t*",
            "name": "v",
            "desc": "用于返回整数。"
          }
        ],
        "annotation": {},
        "desc": " 将字符串转成整数。\n\n\n",
        "name": "wstr_to_int",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "wstr_t*",
            "name": "str",
            "desc": "str对象。"
          },
          {
            "type": "double*",
            "name": "v",
            "desc": "用于返回浮点数。"
          }
        ],
        "annotation": {},
        "desc": " 将字符串转成浮点数。\n\n\n",
        "name": "wstr_to_float",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "wstr_t*",
            "name": "str",
            "desc": "str对象。"
          },
          {
            "type": "double",
            "name": "delta",
            "desc": "要加上的值。"
          }
        ],
        "annotation": {},
        "desc": " 将字符串转成浮点数，加上delta，再转换回来。\n\n\n",
        "name": "wstr_add_float",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "wstr_t*",
            "name": "str",
            "desc": "str对象。"
          }
        ],
        "annotation": {},
        "desc": " 去掉浮点数小数点尾部的零。\n\n\n",
        "name": "wstr_trim_float_zero",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "wstr_t*",
            "name": "str",
            "desc": "str对象。"
          }
        ],
        "annotation": {},
        "desc": " 重置字符串为空。\n\n\n",
        "name": "wstr_reset",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      }
    ],
    "events": [],
    "properties": [
      {
        "name": "size",
        "desc": " 长度。\n\n",
        "type": "uint32_t",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "capacity",
        "desc": " 容量。\n\n",
        "type": "uint32_t",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "str",
        "desc": " 字符串。\n\n",
        "type": "wchar_t*",
        "annotation": {
          "readable": true
        }
      }
    ],
    "header": "tkc/wstr.h",
    "desc": " 可变长度的宽字符字符串。\n\n 示例：\n\n ```c\n  wstr_t s;\n  wstr_init(&s, 0);\n\n  wstr_append(&s, L\"abc\");\n  wstr_append(&s, L\"123\");\n\n  wstr_reset(&s);\n ```\n > 先调wstr\\_init进行初始化，最后调用wstr\\_reset释放内存。\n\n\n",
    "name": "wstr_t",
    "level": 1
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "uint32_t",
            "name": "duration",
            "desc": "动画持续时间。"
          },
          {
            "type": "uint32_t",
            "name": "delay",
            "desc": "动画执行时间。"
          },
          {
            "type": "easing_type_t",
            "name": "easing",
            "desc": "插值函数类型。"
          },
          {
            "type": "const char*",
            "name": "prop_name",
            "desc": "属性的名称。"
          }
        ],
        "annotation": {},
        "desc": " 创建单属性动画对象。\n\n\n",
        "name": "widget_animator_prop_create",
        "return": {
          "type": "widget_animator_t*",
          "desc": "成功返回动画对象，失败返回NULL。"
        }
      },
      {
        "params": [
          {
            "type": "widget_animator_t*",
            "name": "animator",
            "desc": "动画对象本身。"
          },
          {
            "type": "float_t",
            "name": "from",
            "desc": "prop起始值。"
          },
          {
            "type": "float_t",
            "name": "to",
            "desc": "prop结束值。"
          }
        ],
        "annotation": {},
        "desc": " 设置动画对象的参数。\n\n\n",
        "name": "widget_animator_prop_set_params",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      }
    ],
    "events": [],
    "properties": [],
    "header": "widget_animators/widget_animator_prop.h",
    "desc": " 通过修改对象的指定属性形成动画效果。\n\n",
    "name": "widget_animator_prop_t",
    "level": 1
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "uint32_t",
            "name": "duration",
            "desc": "动画持续时间。"
          },
          {
            "type": "uint32_t",
            "name": "delay",
            "desc": "动画执行时间。"
          },
          {
            "type": "easing_type_t",
            "name": "easing",
            "desc": "插值函数类型。"
          },
          {
            "type": "const char*",
            "name": "prop1_name",
            "desc": "属性1的名称。"
          },
          {
            "type": "const char*",
            "name": "prop2_name",
            "desc": "属性2的名称。"
          }
        ],
        "annotation": {},
        "desc": " 创建双属性动画对象。\n\n\n",
        "name": "widget_animator_prop2_create",
        "return": {
          "type": "widget_animator_t*",
          "desc": "成功返回动画对象，失败返回NULL。"
        }
      },
      {
        "params": [
          {
            "type": "widget_animator_t*",
            "name": "animator",
            "desc": "动画对象本身。"
          },
          {
            "type": "float_t",
            "name": "from1",
            "desc": "x的初值。"
          },
          {
            "type": "float_t",
            "name": "from2",
            "desc": "y的初值。"
          },
          {
            "type": "float_t",
            "name": "to1",
            "desc": "x的终值。"
          },
          {
            "type": "float_t",
            "name": "to2",
            "desc": "y的终值。"
          }
        ],
        "annotation": {},
        "desc": " 设置动画对象的参数。\n\n\n",
        "name": "widget_animator_prop2_set_params",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      }
    ],
    "events": [],
    "properties": [],
    "header": "widget_animators/widget_animator_prop2.h",
    "desc": " 通过修改对象的两个指定属性形成动画效果。\n\n",
    "name": "widget_animator_prop2_t",
    "level": 1
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "uint32_t",
            "name": "duration",
            "desc": "动画持续时间。"
          },
          {
            "type": "uint32_t",
            "name": "delay",
            "desc": "动画执行时间。"
          },
          {
            "type": "easing_type_t",
            "name": "easing",
            "desc": "插值函数类型。"
          }
        ],
        "annotation": {},
        "desc": " 创建动画对象。\n\n\n",
        "name": "widget_animator_scroll_create",
        "return": {
          "type": "widget_animator_t*",
          "desc": "成功返回动画对象，失败返回NULL。"
        }
      },
      {
        "params": [
          {
            "type": "widget_animator_t*",
            "name": "animator",
            "desc": "动画对象本身。"
          },
          {
            "type": "xy_t",
            "name": "x_from",
            "desc": "x起点值。"
          },
          {
            "type": "xy_t",
            "name": "y_from",
            "desc": "y起点值。"
          },
          {
            "type": "xy_t",
            "name": "x_to",
            "desc": "x终点值。"
          },
          {
            "type": "xy_t",
            "name": "y_to",
            "desc": "y终点值。"
          }
        ],
        "annotation": {},
        "desc": " 设置动画对象的参数。\n\n\n",
        "name": "widget_animator_scroll_set_params",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      }
    ],
    "events": [],
    "properties": [],
    "header": "widget_animators/widget_animator_scroll.h",
    "desc": " 滚动控件的动画。\n 本动画也可以用widget_animator_prop2实现，但滚动控件需要访问内部数据结构，出于可读性考虑保留独立实现。\n\n",
    "name": "widget_animator_scroll_t",
    "level": 1
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "parent",
            "desc": "父控件"
          },
          {
            "type": "xy_t",
            "name": "x",
            "desc": "x坐标"
          },
          {
            "type": "xy_t",
            "name": "y",
            "desc": "y坐标"
          },
          {
            "type": "wh_t",
            "name": "w",
            "desc": "宽度"
          },
          {
            "type": "wh_t",
            "name": "h",
            "desc": "高度"
          }
        ],
        "annotation": {
          "constructor": true,
          "scriptable": true
        },
        "desc": " 创建list_view_h对象\r\n\r\n",
        "name": "list_view_h_create",
        "return": {
          "type": "widget_t*",
          "desc": "对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "int32_t",
            "name": "item_width",
            "desc": "列表项的宽度。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 设置列表项的宽度。\r\n\r\n",
        "name": "list_view_h_set_item_width",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "int32_t",
            "name": "spacing",
            "desc": "列表项的间距。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 设置列表项的间距。\r\n\r\n",
        "name": "list_view_h_set_spacing",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "list_view_h对象。"
          }
        ],
        "annotation": {
          "cast": true,
          "scriptable": true
        },
        "desc": " 转换为list_view_h对象(供脚本语言使用)。\r\n\r\n",
        "name": "list_view_h_cast",
        "return": {
          "type": "widget_t*",
          "desc": "list_view_h对象。"
        }
      }
    ],
    "events": [],
    "properties": [
      {
        "name": "item_width",
        "desc": " 列表项的宽度。\r\n",
        "type": "int32_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "spacing",
        "desc": " 间距。\r\n",
        "type": "int32_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      }
    ],
    "header": "scroll_view/list_view_h.h",
    "desc": " 水平列表视图控件。\r\n\r\n list\\_view\\_h\\_t是[widget\\_t](widget_t.md)的子类控件，widget\\_t的函数均适用于list\\_view\\_h\\_t控件。\r\n\r\n 在xml中使用\"list\\_view\\_h\"标签创建水平列表视图控件。如：\r\n\r\n ```xml\r\n <list_view_h x=\"center\"  y=\"10\" w=\"90%\" h=\"100\" item_width=\"200\" spacing=\"5\">\r\n   <scroll_view name=\"view\" w=\"100%\" h=\"100%\">\r\n     <image style=\"border\" draw_type=\"auto\" image=\"1\" text=\"1\"/>\r\n     ...\r\n   </scroll_view>\r\n </list_view_h>\r\n ```\r\n\r\n > 注意：列表项不是作为列表视图控件的直接子控件，而是作为滚动视图的子控件。\r\n\r\n\r\n > 更多用法请参考：[list\\_view\\_h.xml](\r\nhttps://github.com/zlgopen/awtk/blob/master/demos/assets/raw/ui/list_view_h.xml)\r\n\r\n 在c代码中使用函数list\\_view\\_h\\_create创建水平列表视图控件。如：\r\n\r\n ```c\r\n  widget_t* list_view = list_view_h_create(win, 0, 0, 0, 0);\r\n ```\r\n\r\n 用代码构造列表视图是比较繁琐的事情，最好用XML来构造。\r\n 如果需要动态修改，可以使用widget\\_clone来增加列表项，使用widget\\_remove\\_child来移出列表项。\r\n\r\n 可用通过style来设置控件的显示风格，如背景颜色和边框颜色等(一般情况不需要)。\r\n\r\n",
    "name": "list_view_h_t",
    "parent": "widget_t",
    "annotation": {
      "scriptable": true
    },
    "level": 2
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "parent",
            "desc": "父控件"
          },
          {
            "type": "xy_t",
            "name": "x",
            "desc": "x坐标"
          },
          {
            "type": "xy_t",
            "name": "y",
            "desc": "y坐标"
          },
          {
            "type": "wh_t",
            "name": "w",
            "desc": "宽度"
          },
          {
            "type": "wh_t",
            "name": "h",
            "desc": "高度"
          }
        ],
        "annotation": {
          "constructor": true,
          "scriptable": true
        },
        "desc": " 创建list_view对象\r\n\r\n",
        "name": "list_view_create",
        "return": {
          "type": "widget_t*",
          "desc": "对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "int32_t",
            "name": "item_height",
            "desc": "列表项的高度。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 设置列表项的高度。\r\n\r\n",
        "name": "list_view_set_item_height",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "int32_t",
            "name": "default_item_height",
            "desc": "列表项的高度。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 设置列表项的缺省高度。\r\n\r\n",
        "name": "list_view_set_default_item_height",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "bool_t",
            "name": "auto_hide_scroll_bar",
            "desc": "列表项的高度。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 设置是否自动隐藏滚动条。\r\n\r\n",
        "name": "list_view_set_auto_hide_scroll_bar",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "list_view对象。"
          }
        ],
        "annotation": {
          "cast": true,
          "scriptable": true
        },
        "desc": " 转换为list_view对象(供脚本语言使用)。\r\n\r\n",
        "name": "list_view_cast",
        "return": {
          "type": "widget_t*",
          "desc": "list_view对象。"
        }
      }
    ],
    "events": [],
    "properties": [
      {
        "name": "item_height",
        "desc": " 列表项的高度。如果 item_height > 0，所有列表项使用固定高度，否则使用列表项自身的高度。\r\n",
        "type": "int32_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "default_item_height",
        "desc": " 列表项的缺省高度。如果item_height <= 0 而且列表项自身的高度 <= 0，则使用缺省高度。\r\n",
        "type": "int32_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "auto_hide_scroll_bar",
        "desc": " 如果不需要滚动条时，自动隐藏滚动条。\r\n",
        "type": "bool_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      }
    ],
    "header": "scroll_view/list_view.h",
    "desc": " 列表视图控件。\r\n\r\n 列表视图控件是一个可以垂直滚动的列表控件。\r\n\r\n 如果不需要滚动，可以用view控件配置适当的layout参数作为列表控件。\r\n\r\n 列表视图中的列表项可以固定高度，也可以使用不同高度。请参考[变高列表项](\r\nhttps://github.com/zlgopen/awtk/blob/master/demos/assets/raw/ui/list_view_vh.xml)\r\n\r\n 列表视图控件的中可以有滚动条，也可以没有滚动条。\r\n 可以使用移动设备风格的滚动条，也可以使用桌面风格的滚动条。\r\n\r\n list\\_view\\_t是[widget\\_t](widget_t.md)的子类控件，widget\\_t的函数均适用于list\\_view\\_t控件。\r\n\r\n 在xml中使用\"list\\_view\"标签创建列表视图控件。如：\r\n\r\n ```xml\r\n <list_view x=\"0\"  y=\"30\" w=\"100%\" h=\"-80\" item_height=\"60\">\r\n   <scroll_view name=\"view\" x=\"0\"  y=\"0\" w=\"100%\" h=\"100%\">\r\n     <list_item style=\"odd\" children_layout=\"default(rows=1,cols=0)\">\r\n       <image draw_type=\"icon\" w=\"30\" image=\"earth\"/>\r\n       <label w=\"-30\" text=\"1.Hello AWTK !\">\r\n         <switch x=\"r:10\" y=\"m\" w=\"60\" h=\"20\"/>\r\n       </label>\r\n     </list_item>\r\n     ...\r\n   </scroll_view>\r\n  </list_view>\r\n ```\r\n\r\n > 注意：列表项不是作为列表视图控件的直接子控件，而是作为滚动视图的子控件。\r\n\r\n\r\n > 更多用法请参考：[list\\_view\\_m.xml](\r\nhttps://github.com/zlgopen/awtk/blob/master/demos/assets/raw/ui/list_view_m.xml)\r\n\r\n 在c代码中使用函数list\\_view\\_create创建列表视图控件。如：\r\n\r\n ```c\r\n  widget_t* list_view = list_view_create(win, 0, 0, 0, 0);\r\n ```\r\n\r\n 用代码构造列表视图是比较繁琐的事情，最好用XML来构造。\r\n 如果需要动态修改，可以使用widget\\_clone来增加列表项，使用widget\\_remove\\_child来移出列表项。\r\n\r\n 可用通过style来设置控件的显示风格，如背景颜色和边框颜色等(一般情况不需要)。\r\n\r\n",
    "name": "list_view_t",
    "parent": "widget_t",
    "annotation": {
      "scriptable": true
    },
    "level": 2
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "parent",
            "desc": "父控件"
          },
          {
            "type": "xy_t",
            "name": "x",
            "desc": "x坐标"
          },
          {
            "type": "xy_t",
            "name": "y",
            "desc": "y坐标"
          },
          {
            "type": "wh_t",
            "name": "w",
            "desc": "宽度"
          },
          {
            "type": "wh_t",
            "name": "h",
            "desc": "高度"
          }
        ],
        "annotation": {
          "constructor": true,
          "scriptable": true
        },
        "desc": " 创建scroll_bar对象\r\n\r\n > 根据宏WITH_DESKTOP_STYLE决定创建desktop风格还是mobile风格的滚动条\r\n\r\n\r\n",
        "name": "scroll_bar_create",
        "return": {
          "type": "widget_t*",
          "desc": "对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "scroll_bar对象。"
          }
        ],
        "annotation": {
          "cast": true,
          "scriptable": true
        },
        "desc": " 转换为scroll_bar对象(供脚本语言使用)。\r\n\r\n",
        "name": "scroll_bar_cast",
        "return": {
          "type": "widget_t*",
          "desc": "scroll_bar对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "parent",
            "desc": "父控件"
          },
          {
            "type": "xy_t",
            "name": "x",
            "desc": "x坐标"
          },
          {
            "type": "xy_t",
            "name": "y",
            "desc": "y坐标"
          },
          {
            "type": "wh_t",
            "name": "w",
            "desc": "宽度"
          },
          {
            "type": "wh_t",
            "name": "h",
            "desc": "高度"
          }
        ],
        "annotation": {
          "constructor": true,
          "scriptable": true
        },
        "desc": " 创建mobile风格的scroll_bar对象\r\n\r\n",
        "name": "scroll_bar_create_mobile",
        "return": {
          "type": "widget_t*",
          "desc": "对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "parent",
            "desc": "父控件"
          },
          {
            "type": "xy_t",
            "name": "x",
            "desc": "x坐标"
          },
          {
            "type": "xy_t",
            "name": "y",
            "desc": "y坐标"
          },
          {
            "type": "wh_t",
            "name": "w",
            "desc": "宽度"
          },
          {
            "type": "wh_t",
            "name": "h",
            "desc": "高度"
          }
        ],
        "annotation": {
          "constructor": true,
          "scriptable": true
        },
        "desc": " 创建desktop风格的scroll_bar对象\r\n\r\n",
        "name": "scroll_bar_create_desktop",
        "return": {
          "type": "widget_t*",
          "desc": "对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "scroll_bar控件。"
          },
          {
            "type": "int32_t",
            "name": "virtual_size",
            "desc": "最大值。"
          },
          {
            "type": "int32_t",
            "name": "row",
            "desc": "每一行的高度。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 设置参数。\r\n\r\n",
        "name": "scroll_bar_set_params",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "scroll_bar控件。"
          },
          {
            "type": "int32_t",
            "name": "value",
            "desc": "值。"
          },
          {
            "type": "int32_t",
            "name": "duration",
            "desc": "时间。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 滚动到指定的值。\r\n\r\n",
        "name": "scroll_bar_scroll_to",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "scroll_bar控件。"
          },
          {
            "type": "int32_t",
            "name": "value",
            "desc": "值。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 设置值，并触发EVT_VALUE_CHANGED事件。\r\n\r\n",
        "name": "scroll_bar_set_value",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "scroll_bar控件。"
          },
          {
            "type": "int32_t",
            "name": "delta",
            "desc": "值。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 在当前的值上增加一个值，并触发EVT_VALUE_CHANGED事件。\r\n\r\n",
        "name": "scroll_bar_add_delta",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "scroll_bar控件。"
          },
          {
            "type": "int32_t",
            "name": "delta",
            "desc": "值。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 在当前的值上增加一个值，并滚动到新的值，并触发EVT_VALUE_CHANGED事件。\r\n\r\n",
        "name": "scroll_bar_scroll_delta",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "scroll_bar控件。"
          },
          {
            "type": "int32_t",
            "name": "value",
            "desc": "值。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 设置值，但不触发EVT_VALUE_CHANGED事件。\r\n\r\n",
        "name": "scroll_bar_set_value_only",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "scroll_bar控件。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 判断是否是mobile风格的滚动条。\r\n\r\n",
        "name": "scroll_bar_is_mobile",
        "return": {
          "type": "bool_t",
          "desc": "返回TRUE表示是mobile风格的，否则表示不是mobile风格的。"
        }
      }
    ],
    "events": [],
    "properties": [
      {
        "name": "virtual_size",
        "desc": " 虚拟宽度或高度。\r\n",
        "type": "int32_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "value",
        "desc": " 当前的值。\r\n",
        "type": "int32_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "row",
        "desc": " 行的高度。\r\n",
        "type": "int32_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "animatable",
        "desc": " 滚动时是否启用动画。\r\n",
        "type": "bool_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      }
    ],
    "header": "scroll_view/scroll_bar.h",
    "desc": " 滚动条控件。\r\n\r\n> 目前只支持垂直滚动。\r\n\r\n scroll\\_bar\\_t是[widget\\_t](widget_t.md)的子类控件，widget\\_t的函数均适用于scroll\\_bar\\_t控件。\r\n\r\n 在xml中使用\"scroll\\_bar\"或\"scroll\\_bar\\_d\"或\"scroll\\_bar\\_m\"标签创建滚动条控件。如：\r\n\r\n ```xml\r\n <list_view x=\"0\"  y=\"30\" w=\"100%\" h=\"-80\" item_height=\"60\">\r\n <scroll_view name=\"view\" x=\"0\"  y=\"0\" w=\"100%\" h=\"100%\">\r\n ...\r\n </scroll_view>\r\n <scroll_bar_m name=\"bar\" x=\"right\" y=\"0\" w=\"6\" h=\"100%\" value=\"0\"/>\r\n </list_view>\r\n ```\r\n\r\n > 更多用法请参考：[list\\_view\\_m.xml](\r\nhttps://github.com/zlgopen/awtk/blob/master/demos/assets/raw/ui/list_view_m.xml)\r\n\r\n 在c代码中使用函数scroll\\_bar\\_create创建列表项控件。如：\r\n\r\n ```c\r\n  widget_t* scroll_bar = scroll_bar_create(list_view, 0, 0, 0, 0);\r\n ```\r\n\r\n ```xml\r\n <style name=\"default\">\r\n   <normal bg_color=\"#c0c0c0\" fg_color=\"#808080\"/>\r\n   <over bg_color=\"#c0c0c0\" fg_color=\"#808080\"/>\r\n   <pressed bg_color=\"#c0c0c0\" fg_color=\"#808080\"/>\r\n </style>\r\n ```\r\n\r\n > 更多用法请参考：[theme default](\r\nhttps://github.com/zlgopen/awtk/blob/master/demos/assets/raw/styles/default.xml#L350)\r\n\r\n",
    "name": "scroll_bar_t",
    "parent": "widget_t",
    "annotation": {
      "scriptable": true
    },
    "level": 2
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "parent",
            "desc": "父控件"
          },
          {
            "type": "xy_t",
            "name": "x",
            "desc": "x坐标"
          },
          {
            "type": "xy_t",
            "name": "y",
            "desc": "y坐标"
          },
          {
            "type": "wh_t",
            "name": "w",
            "desc": "宽度"
          },
          {
            "type": "wh_t",
            "name": "h",
            "desc": "高度"
          }
        ],
        "annotation": {
          "constructor": true,
          "scriptable": true
        },
        "desc": " 创建scroll_view对象\r\n\r\n",
        "name": "scroll_view_create",
        "return": {
          "type": "widget_t*",
          "desc": "对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "scroll_view对象。"
          }
        ],
        "annotation": {
          "cast": true,
          "scriptable": true
        },
        "desc": " 转换为scroll_view对象(供脚本语言使用)。\r\n\r\n",
        "name": "scroll_view_cast",
        "return": {
          "type": "widget_t*",
          "desc": "scroll_view对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "wh_t",
            "name": "w",
            "desc": "虚拟宽度。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 设置虚拟宽度。\r\n\r\n",
        "name": "scroll_view_set_virtual_w",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "wh_t",
            "name": "h",
            "desc": "虚拟高度。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 设置虚拟高度。\r\n\r\n",
        "name": "scroll_view_set_virtual_h",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "bool_t",
            "name": "xslidable",
            "desc": "是否允许滑动。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 设置是否允许x方向滑动。\r\n\r\n",
        "name": "scroll_view_set_xslidable",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "bool_t",
            "name": "yslidable",
            "desc": "是否允许滑动。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 设置是否允许y方向滑动。\r\n\r\n",
        "name": "scroll_view_set_yslidable",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "int32_t",
            "name": "xoffset",
            "desc": "x偏移量。"
          },
          {
            "type": "int32_t",
            "name": "yoffset",
            "desc": "y偏移量。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 设置偏移量。\r\n\r\n",
        "name": "scroll_view_set_offset",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "int32_t",
            "name": "xoffset_end",
            "desc": "x偏移量。"
          },
          {
            "type": "int32_t",
            "name": "yoffset_end",
            "desc": "y偏移量。"
          },
          {
            "type": "int32_t",
            "name": "duration",
            "desc": "时间。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 滚动到指定的偏移量。\r\n\r\n",
        "name": "scroll_view_scroll_to",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      }
    ],
    "events": [],
    "properties": [
      {
        "name": "virtual_w",
        "desc": " 虚拟宽度。\r\n",
        "type": "wh_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "virtual_h",
        "desc": " 虚拟高度。\r\n",
        "type": "wh_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "xoffset",
        "desc": " x偏移量。\r\n",
        "type": "int32_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "yoffset",
        "desc": " y偏移量。\r\n",
        "type": "int32_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "scriptable": true
        }
      },
      {
        "name": "xslidable",
        "desc": " 是否允许x方向滑动。\r\n",
        "type": "bool_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "scriptable": true
        }
      },
      {
        "name": "yslidable",
        "desc": " 是否允许y方向滑动。\r\n",
        "type": "bool_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      }
    ],
    "header": "scroll_view/scroll_view.h",
    "desc": " 滚动视图。\r\n\r\n scroll\\_view\\_t是[widget\\_t](widget_t.md)的子类控件，widget\\_t的函数均适用于scroll\\_view\\_t控件。\r\n\r\n 在xml中使用\"scroll\\_view\"标签创建滚动视图控件。如：\r\n\r\n ```xml\r\n <list_view x=\"0\"  y=\"30\" w=\"100%\" h=\"-80\" item_height=\"60\">\r\n   <scroll_view name=\"view\" x=\"0\"  y=\"0\" w=\"100%\" h=\"100%\">\r\n     <list_item style=\"odd\" children_layout=\"default(rows=1,cols=0)\">\r\n       <image draw_type=\"icon\" w=\"30\" image=\"earth\"/>\r\n       <label w=\"-30\" text=\"1.Hello AWTK !\">\r\n         <switch x=\"r:10\" y=\"m\" w=\"60\" h=\"20\"/>\r\n       </label>\r\n     </list_item>\r\n     ...\r\n   </scroll_view>\r\n  </list_view>\r\n ```\r\n\r\n > 滚动视图一般作为列表视图的子控件使用。\r\n\r\n > 更多用法请参考：[list\\_view\\_m.xml](\r\nhttps://github.com/zlgopen/awtk/blob/master/demos/assets/raw/ui/list_view_m.xml)\r\n\r\n 在c代码中使用函数scroll\\_view\\_create创建列表视图控件。如：\r\n\r\n ```c\r\n  widget_t* scroll_view = scroll_view_create(win, 0, 0, 0, 0);\r\n ```\r\n\r\n 可用通过style来设置控件的显示风格，如背景颜色和边框颜色等(一般情况不需要)。\r\n\r\n",
    "name": "scroll_view_t",
    "parent": "widget_t",
    "annotation": {
      "scriptable": true
    },
    "level": 2
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "parent",
            "desc": "父控件"
          },
          {
            "type": "xy_t",
            "name": "x",
            "desc": "x坐标"
          },
          {
            "type": "xy_t",
            "name": "y",
            "desc": "y坐标"
          },
          {
            "type": "wh_t",
            "name": "w",
            "desc": "宽度"
          },
          {
            "type": "wh_t",
            "name": "h",
            "desc": "高度"
          }
        ],
        "annotation": {
          "constructor": true,
          "scriptable": true
        },
        "desc": " 创建slide_menu对象\r\n\r\n",
        "name": "slide_menu_create",
        "return": {
          "type": "widget_t*",
          "desc": "对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "slide_menu对象。"
          }
        ],
        "annotation": {
          "cast": true,
          "scriptable": true
        },
        "desc": " 转换slide_menu对象(供脚本语言使用)。\r\n\r\n",
        "name": "slide_menu_cast",
        "return": {
          "type": "widget_t*",
          "desc": "slide_menu对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "slide_menu对象。"
          },
          {
            "type": "uint32_t",
            "name": "value",
            "desc": "当前项的索引。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 设置当前项。\r\n\r\n",
        "name": "slide_menu_set_value",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "slide_menu对象。"
          },
          {
            "type": "align_v_t",
            "name": "align_v",
            "desc": "对齐方式。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 设置垂直对齐方式。\r\n\r\n",
        "name": "slide_menu_set_align_v",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "slide_menu对象。"
          },
          {
            "type": "float_t",
            "name": "min_scale",
            "desc": "最小缩放比例，范围[0.5-1]。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 设置最小缩放比例。\r\n\r\n",
        "name": "slide_menu_set_min_scale",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      }
    ],
    "events": [
      {
        "name": "EVT_VALUE_WILL_CHANGE",
        "desc": " 值(当前项)即将改变事件。\r\n",
        "type": "event_t"
      },
      {
        "name": "EVT_VALUE_CHANGED",
        "desc": " 值(当前项)改变事件。\r\n",
        "type": "event_t"
      }
    ],
    "properties": [
      {
        "name": "value",
        "desc": " 值。代表当前选中项的索引。\r\n",
        "type": "int32_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "align_v",
        "desc": " 垂直对齐方式。\r\n",
        "type": "align_v_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "min_scale",
        "desc": " 最小缩放比例。\r\n",
        "type": "float_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      }
    ],
    "header": "slide_menu/slide_menu.h",
    "desc": " 左右滑动菜单控件。\r\n\r\n 一般用一组按钮作为子控件，通过左右滑动改变当前的项。除了当菜单使用外，也可以用来切换页面。\r\n\r\n slide\\_menu\\_t是[widget\\_t](widget_t.md)的子类控件，widget\\_t的函数均适用于slide\\_menu\\_t控件。\r\n\r\n 在xml中使用\"slide\\_menu\"标签创建左右滑动菜单控件。如：\r\n\r\n ```xml\r\n <slide_menu style=\"mask\" align_v=\"top\">\r\n  <button style=\"slide_button\" text=\"0\"/>\r\n   <button style=\"slide_button\" text=\"1\"/>\r\n   <button style=\"slide_button\" text=\"2\"/>\r\n   <button style=\"slide_button\" text=\"3\"/>\r\n   <button style=\"slide_button\" text=\"4\"/>\r\n </slide_menu>\r\n ```\r\n\r\n > 更多用法请参考：[slide_menu.xml](\r\n https://github.com/zlgopen/awtk/blob/master/demos/assets/raw/ui/slide_menu.xml)\r\n\r\n 在c代码中使用函数slide\\_menu\\_create创建左右滑动菜单控件。如：\r\n\r\n ```c\r\n slide_menu = slide_menu_create(win, 10, 10, 300, 60);\r\n b = button_create(slide_menu, 0, 0, 0, 0);\r\n widget_set_text_utf8(b, \"1\");\r\n b = button_create(slide_menu, 0, 0, 0, 0);\r\n widget_set_text_utf8(b, \"2\");\r\n b = button_create(slide_menu, 0, 0, 0, 0);\r\n widget_set_text_utf8(b, \"3\");\r\n b = button_create(slide_menu, 0, 0, 0, 0);\r\n widget_set_text_utf8(b, \"4\");\r\n ```\r\n\r\n 可按下面的方法关注当前项改变的事件：\r\n\r\n ```c\r\n widget_on(slide_menu, EVT_VALUE_CHANGED, on_current_changed, slide_menu);\r\n ```\r\n \r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\n 可按下面的方法关注当前按钮被点击的事件：\r\n\r\n ```c\r\n widget_on(b, EVT_CLICK, on_button_click, b);\r\n ```\r\n\r\n > 完整示例请参考：[slide_menu demo](\r\n https://github.com/zlgopen/awtk-c-demos/blob/master/demos/slide_menu.c)\r\n\r\n 可用通过style来设置控件的显示风格，如背景颜色和蒙版颜色等等。如：\r\n\r\n ```xml\r\n <style name=\"mask\">\r\n   <normal     bg_color=\"#f0f0f0\" mask_color=\"#f0f0f0\"/>\r\n </style>\r\n ```\r\n\r\n > 更多用法请参考：[theme default](\r\n https://github.com/zlgopen/awtk/blob/master/demos/assets/raw/styles/default.xml#L493)\r\n\r\n",
    "name": "slide_menu_t",
    "parent": "widget_t",
    "annotation": {
      "scriptable": true
    },
    "level": 2
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "parent",
            "desc": "父控件"
          },
          {
            "type": "xy_t",
            "name": "x",
            "desc": "x坐标"
          },
          {
            "type": "xy_t",
            "name": "y",
            "desc": "y坐标"
          },
          {
            "type": "wh_t",
            "name": "w",
            "desc": "宽度"
          },
          {
            "type": "wh_t",
            "name": "h",
            "desc": "高度"
          }
        ],
        "annotation": {
          "constructor": true,
          "scriptable": true
        },
        "desc": " 创建slide_view对象\r\n\r\n",
        "name": "slide_view_create",
        "return": {
          "type": "widget_t*",
          "desc": "对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "slide_view对象。"
          }
        ],
        "annotation": {
          "cast": true,
          "scriptable": true
        },
        "desc": " 转换为slide_view对象(供脚本语言使用)。\r\n\r\n",
        "name": "slide_view_cast",
        "return": {
          "type": "widget_t*",
          "desc": "slide_view对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "slide_view对象。"
          },
          {
            "type": "uint16_t",
            "name": "auto_play",
            "desc": "0表示禁止自动播放，非0表示自动播放时每一页播放的时间。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 设置为自动播放模式。\r\n\r\n",
        "name": "slide_view_set_auto_play",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "slide_view对象。"
          },
          {
            "type": "uint32_t",
            "name": "index",
            "desc": "当前页的序号。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 设置当前页的序号。\r\n\r\n",
        "name": "slide_view_set_active",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "slide_view对象。"
          },
          {
            "type": "bool_t",
            "name": "vertical",
            "desc": "TRUE表示上下滑动，FALSE表示左右滑动。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 设置为上下滑动(缺省为左右滑动)。\r\n\r\n",
        "name": "slide_view_set_vertical",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      }
    ],
    "events": [
      {
        "name": "EVT_VALUE_WILL_CHANGE",
        "desc": " 值(当前页)即将改变事件。\r\n",
        "type": "event_t"
      },
      {
        "name": "EVT_VALUE_CHANGED",
        "desc": " 值(当前页)改变事件。\r\n",
        "type": "event_t"
      }
    ],
    "properties": [
      {
        "name": "vertical",
        "desc": " 是否为上下滑动模式。\r\n",
        "type": "bool_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "auto_play",
        "desc": " 自动播放。0表示禁止自动播放，非0表示自动播放时每一页播放的时间。\r\n",
        "type": "uint16_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      }
    ],
    "header": "slide_view/slide_view.h",
    "desc": " 滑动视图。\r\n\r\n 滑动视图可以管理多个页面，并通过滑动来切换当前页面。也可以管理多张图片，让它们自动切换。\r\n\r\n slide\\_view\\_t是[widget\\_t](widget_t.md)的子类控件，widget\\_t的函数均适用于slide\\_view\\_t控件。\r\n\r\n 在xml中使用\"slide\\_view\"标签创建滑动视图控件。如：\r\n\r\n ```xml\r\n   <slide_view x=\"0\" y=\"0\" w=\"100%\" h=\"100%\" style=\"dot\">\r\n   <view x=\"0\" y=\"0\" w=\"100%\" h=\"100%\" children_layout=\"default(w=60,h=60,m=5,s=10)\">\r\n    ...\r\n   </view>\r\n   <view x=\"0\" y=\"0\" w=\"100%\" h=\"100%\" children_layout=\"default(w=60,h=60,m=5,s=10)\">\r\n    ...\r\n   </view>\r\n   </slide_view>\r\n ```\r\n\r\n > 更多用法请参考：[slide_view.xml](\r\nhttps://github.com/zlgopen/awtk/blob/master/demos/assets/raw/ui/slide_view.xml)\r\n\r\n 在c代码中使用函数slide\\_view\\_create创建滑动视图控件。如：\r\n\r\n ```c\r\n slide_view = slide_view_create(win, 0, 0, win->w, win->h);\r\n ```\r\n\r\n > 完整示例请参考：\r\n [slide_view demo](\r\n https://github.com/zlgopen/awtk-c-demos/blob/master/demos/slide_view.c)\r\n\r\n 可用通过style来设置控件的显示风格，如背景颜色和指示器的图标等等。如：\r\n\r\n ```xml\r\n <style name=\"dot\">\r\n   <normal  icon=\"dot\" active_icon=\"active_dot\"/>\r\n </style>\r\n ```\r\n\r\n > 如果希望背景图片跟随滚动，请将背景图片设置到页面上，否则设置到slide\\_view上。\r\n\r\n > 更多用法请参考：[theme default](\r\n https://github.com/zlgopen/awtk/blob/master/demos/assets/raw/styles/default.xml#L458)\r\n\r\n",
    "name": "slide_view_t",
    "parent": "widget_t",
    "annotation": {
      "scriptable": true
    },
    "level": 2
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "parent",
            "desc": "父控件"
          },
          {
            "type": "xy_t",
            "name": "x",
            "desc": "x坐标"
          },
          {
            "type": "xy_t",
            "name": "y",
            "desc": "y坐标"
          },
          {
            "type": "wh_t",
            "name": "w",
            "desc": "宽度"
          },
          {
            "type": "wh_t",
            "name": "h",
            "desc": "高度"
          }
        ],
        "annotation": {
          "constructor": true,
          "scriptable": true
        },
        "desc": " 创建tab_button_group对象\r\n\r\n",
        "name": "tab_button_group_create",
        "return": {
          "type": "widget_t*",
          "desc": "对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "tab_button_group对象。"
          }
        ],
        "annotation": {
          "cast": true,
          "scriptable": true
        },
        "desc": " 转换tab_button_group对象(供脚本语言使用)。\r\n\r\n",
        "name": "tab_button_group_cast",
        "return": {
          "type": "widget_t*",
          "desc": "tab_button_group对象。"
        }
      }
    ],
    "events": [],
    "properties": [
      {
        "name": "compact",
        "desc": " 紧凑型排版子控件。\r\n",
        "type": "bool_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      }
    ],
    "header": "widgets/tab_button_group.h",
    "desc": " 标签按钮分组控件。\r\n\r\n 一个简单的容器，主要用于对标签按钮进行布局和管理。\r\n\r\n tab\\_button\\_group\\_t是[widget\\_t](widget_t.md)的子类控件，\r\n widget\\_t的函数均适用于tab\\_button\\_group\\_t控件。\r\n\r\n 在xml中使用\"tab\\_button\\_group\"标签创建标签按钮分组控件。如：\r\n\r\n ```xml\r\n   <tab_button_group x=\"c\" y=\"bottom:10\" w=\"90%\" h=\"30\" compact=\"true\" >\r\n     <tab_button text=\"General\"/>\r\n     <tab_button text=\"Network\" value=\"true\" />\r\n     <tab_button text=\"Security\"/>\r\n   </tab_button_group>\r\n ```\r\n\r\n > 更多用法请参考：\r\n [tab control](https://github.com/zlgopen/awtk/blob/master/demos/assets/raw/ui/)\r\n\r\n 可用通过style来设置控件的显示风格，如颜色等等。如：\r\n\r\n ```xml\r\n <tab_button_group>\r\n  <style name=\"default\">\r\n   <normal/>\r\n  </style>\r\n </tab_button_group>\r\n ```\r\n\r\n",
    "name": "tab_button_group_t",
    "parent": "widget_t",
    "annotation": {
      "scriptable": true
    },
    "level": 2
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "parent",
            "desc": "父控件"
          },
          {
            "type": "xy_t",
            "name": "x",
            "desc": "x坐标"
          },
          {
            "type": "xy_t",
            "name": "y",
            "desc": "y坐标"
          },
          {
            "type": "wh_t",
            "name": "w",
            "desc": "宽度"
          },
          {
            "type": "wh_t",
            "name": "h",
            "desc": "高度"
          }
        ],
        "annotation": {
          "constructor": true,
          "scriptable": true
        },
        "desc": " 创建switch对象\r\n\r\n",
        "name": "switch_create",
        "return": {
          "type": "widget_t*",
          "desc": "对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "switch对象。"
          },
          {
            "type": "bool_t",
            "name": "value",
            "desc": "值"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 设置控件的值。\r\n\r\n",
        "name": "switch_set_value",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "switch对象。"
          }
        ],
        "annotation": {
          "cast": true,
          "scriptable": true
        },
        "desc": " 转换switch对象(供脚本语言使用)。\r\n\r\n",
        "name": "switch_cast",
        "return": {
          "type": "widget_t*",
          "desc": "switch对象。"
        }
      }
    ],
    "events": [
      {
        "name": "EVT_VALUE_WILL_CHANGE",
        "desc": " 值(开关状态)即将改变事件。\r\n",
        "type": "event_t"
      },
      {
        "name": "EVT_VALUE_CHANGED",
        "desc": " 值(开关状态)改变事件。\r\n",
        "type": "event_t"
      }
    ],
    "properties": [
      {
        "name": "value",
        "desc": " 值。\r\n",
        "type": "bool_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "max_xoffset_ratio",
        "desc": " 当开关处于关闭时，图片偏移相对于图片宽度的比例(缺省为1/3)。\r\n",
        "type": "float_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "round_radius",
        "desc": " 图片的圆角半径。\r\n",
        "type": "int32_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      }
    ],
    "header": "switch/switch.h",
    "desc": " 开关控件。\r\n\r\n switch\\_t是[widget\\_t](widget_t.md)的子类控件，widget\\_t的函数均适用于switch\\_t控件。\r\n\r\n 在xml中使用\"switch\"标签创建开关控件。如：\r\n\r\n ```xml\r\n <switch x=\"10\" y=\"60\" w=\"60\" h=\"22\" />\r\n ```\r\n\r\n > 更多用法请参考：[switch.xml](\r\n https://github.com/zlgopen/awtk/blob/master/demos/assets/raw/ui/switch.xml)\r\n\r\n 在c代码中使用函数switch\\_create创建开关控件。如：\r\n\r\n ```c\r\n  widget_t* sw = switch_create(win, 10, 10, 80, 30);\r\n  widget_on(sw, EVT_VALUE_CHANGED, on_changed, NULL);\r\n ```\r\n\r\n > 完整示例请参考：[switch demo](\r\n https://github.com/zlgopen/awtk-c-demos/blob/master/demos/switch.c)\r\n\r\n 可用通过style来设置控件的显示风格，如背景图片等。如：\r\n\r\n ```xml\r\n <style name=\"default\">\r\n   <normal  bg_image=\"switch\" />\r\n </style>\r\n ```\r\n\r\n > 更多用法请参考：[theme default](\r\n https://github.com/zlgopen/awtk/blob/master/demos/assets/raw/styles/default.xml#L452)\r\n\r\n",
    "name": "switch_t",
    "parent": "widget_t",
    "annotation": {
      "scriptable": true
    },
    "level": 2
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "parent",
            "desc": "父控件"
          },
          {
            "type": "xy_t",
            "name": "x",
            "desc": "x坐标"
          },
          {
            "type": "xy_t",
            "name": "y",
            "desc": "y坐标"
          },
          {
            "type": "wh_t",
            "name": "w",
            "desc": "宽度"
          },
          {
            "type": "wh_t",
            "name": "h",
            "desc": "高度"
          }
        ],
        "annotation": {
          "constructor": true,
          "scriptable": true
        },
        "desc": " 创建text_selector对象\r\n\r\n",
        "name": "text_selector_create",
        "return": {
          "type": "widget_t*",
          "desc": "对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "text_selector对象。"
          }
        ],
        "annotation": {
          "cast": true,
          "scriptable": true
        },
        "desc": " 转换text_selector对象(供脚本语言使用)。\r\n\r\n",
        "name": "text_selector_cast",
        "return": {
          "type": "widget_t*",
          "desc": "text_selector对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "text_selector对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 重置所有选项。\r\n\r\n",
        "name": "text_selector_reset_options",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "text_selector对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 获取选项个数。\r\n\r\n",
        "name": "text_selector_count_options",
        "return": {
          "type": "int32_t",
          "desc": "返回选项个数。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "text_selector对象。"
          },
          {
            "type": "int32_t",
            "name": "value",
            "desc": "值。"
          },
          {
            "type": "char*",
            "name": "text",
            "desc": "文本。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 追加一个选项。\r\n\r\n",
        "name": "text_selector_append_option",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "text_selector对象。"
          },
          {
            "type": "char*",
            "name": "options",
            "desc": "选项。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 设置选项。\r\n\r\n",
        "name": "text_selector_set_options",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "text_selector对象。"
          },
          {
            "type": "int32_t",
            "name": "start",
            "desc": "起始值。"
          },
          {
            "type": "uint32_t",
            "name": "nr",
            "desc": "个数。"
          },
          {
            "type": "int32_t",
            "name": "step",
            "desc": "步长。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 设置一系列的整数选项。\r\n\r\n",
        "name": "text_selector_set_range_options",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "text_selector对象。"
          },
          {
            "type": "uint32_t",
            "name": "index",
            "desc": "选项的索引。"
          }
        ],
        "annotation": {},
        "desc": " 获取第index个选项。\r\n\r\n",
        "name": "text_selector_get_option",
        "return": {
          "type": "text_selector_option_t*",
          "desc": "成功返回选项，失败返回NULL。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "text_selector对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 获取text_selector的值。\r\n\r\n",
        "name": "text_selector_get_value",
        "return": {
          "type": "int32_t",
          "desc": "返回值。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "text_selector对象。"
          },
          {
            "type": "int32_t",
            "name": "value",
            "desc": "值。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 设置text_selector的值。\r\n\r\n",
        "name": "text_selector_set_value",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "text_selector对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 获取text_selector的文本。\r\n\r\n",
        "name": "text_selector_get_text",
        "return": {
          "type": "char*",
          "desc": "返回文本。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "text_selector对象。"
          },
          {
            "type": "const char*",
            "name": "text",
            "desc": "文本。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 设置text_selector的文本。\r\n\r\n",
        "name": "text_selector_set_text",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "text_selector对象。"
          },
          {
            "type": "uint32_t",
            "name": "index",
            "desc": "选项的索引。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 设置第index个选项为当前选中的选项。\r\n\r\n",
        "name": "text_selector_set_selected_index",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "text_selector对象。"
          },
          {
            "type": "uint32_t",
            "name": "visible_nr",
            "desc": "选项数。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 设置可见的选项数。\r\n\r\n",
        "name": "text_selector_set_visible_nr",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      }
    ],
    "events": [
      {
        "name": "EVT_VALUE_WILL_CHANGE",
        "desc": " 值(当前项)即将改变事件。\r\n",
        "type": "event_t"
      },
      {
        "name": "EVT_VALUE_CHANGED",
        "desc": " 值(当前项)改变事件。\r\n",
        "type": "event_t"
      }
    ],
    "properties": [
      {
        "name": "visible_nr",
        "desc": " 可见的选项数量(只能是3或者5，缺省为5)。\r\n",
        "type": "uint32_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "selected_index",
        "desc": " 当前选中的选项。\r\n",
        "type": "int32_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "options",
        "desc": " 设置可选项(冒号分隔值和文本，分号分隔选项，如:1:red;2:green;3:blue)。\r\n 对于数值选项，也可以指定一个范围，用『-』分隔起始值和结束值，如：\"1-7\"表示1到7。\r\n",
        "type": "char*",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      }
    ],
    "header": "text_selector/text_selector.h",
    "desc": " 文本选择器控件，通常用于选择日期和时间等。\r\n\r\n > XXX: 目前需要先设置options和visible_nr，再设置其它参数(在XML中也需要按此顺序)。\r\n\r\n text\\_selector\\_t是[widget\\_t](widget_t.md)的子类控件，widget\\_t的函数均适用于text\\_selector\\_t控件。\r\n\r\n 在xml中使用\"text\\_selector\"标签创建文本选择器控件。如：\r\n\r\n ```xml\r\n <text_selector options=\"red;green;blue;gold;orange\" visible_nr=\"3\" text=\"red\"/>\r\n ```\r\n\r\n > 更多用法请参考：[text\\_selector.xml](\r\n https://github.com/zlgopen/awtk/blob/master/demos/assets/raw/ui/text_selector.xml)\r\n\r\n 在c代码中使用函数text\\_selector\\_create创建文本选择器控件。如：\r\n\r\n ```c\r\n widget_t* ts = text_selector_create(win, 10, 10, 80, 150);\r\n text_selector_set_options(ts, \"1:red;2:green;3:blue;4:orange;5:gold\");\r\n text_selector_set_value(ts, 1);\r\n widget_use_style(ts, \"dark\");\r\n ```\r\n\r\n > 完整示例请参考：[text\\_selector demo](\r\n https://github.com/zlgopen/awtk-c-demos/blob/master/demos/text_selector.c)\r\n\r\n 可用通过style来设置控件的显示风格，如字体和背景颜色等。如：\r\n\r\n ```xml\r\n <style name=\"dark\" fg_color=\"#a0a0a0\"  text_color=\"black\" text_align_h=\"center\">\r\n   <normal     bg_color=\"#ffffff\" mask_color=\"#404040\" border_color=\"#404040\"/>\r\n </style>\r\n ```\r\n\r\n > 更多用法请参考：[theme default](\r\n https://github.com/zlgopen/awtk/blob/master/demos/assets/raw/styles/default.xml#L443)\r\n\r\n",
    "name": "text_selector_t",
    "parent": "widget_t",
    "annotation": {
      "scriptable": true
    },
    "level": 2
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "parent",
            "desc": "父控件"
          },
          {
            "type": "xy_t",
            "name": "x",
            "desc": "x坐标"
          },
          {
            "type": "xy_t",
            "name": "y",
            "desc": "y坐标"
          },
          {
            "type": "wh_t",
            "name": "w",
            "desc": "宽度"
          },
          {
            "type": "wh_t",
            "name": "h",
            "desc": "高度"
          }
        ],
        "annotation": {
          "constructor": true,
          "scriptable": true
        },
        "desc": " 创建digit_clock对象\r\n\r\n",
        "name": "digit_clock_create",
        "return": {
          "type": "widget_t*",
          "desc": "对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "digit_clock对象。"
          }
        ],
        "annotation": {
          "cast": true,
          "scriptable": true
        },
        "desc": " 转换为digit_clock对象(供脚本语言使用)。\r\n\r\n",
        "name": "digit_clock_cast",
        "return": {
          "type": "widget_t*",
          "desc": "digit_clock对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "const char*",
            "name": "format",
            "desc": "格式。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 设置显示格式。\r\n\r\n",
        "name": "digit_clock_set_format",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      }
    ],
    "events": [],
    "properties": [
      {
        "name": "format",
        "desc": " 显示格式。\r\n\r\n Y 代表年(完整显示)\r\n M 代表月(1-12)\r\n D 代表日(1-31)\r\n h 代表时(0-23)\r\n m 代表分(0-59)\r\n s 代表秒(0-59)\r\n YY 代表年(只显示末两位)\r\n MM 代表月(01-12)\r\n DD 代表日(01-31)\r\n hh 代表时(00-23)\r\n mm 代表分(00-59)\r\n ss 代表秒(00-59)\r\n\r\n 如 日期时间为：2018/11/12 9:10:20\r\n \"Y/D/M\"显示为\"2018/11/12\"\r\n \"Y-D-M\"显示为\"2018-11-12\"\r\n \"Y-D-M h:m:s\"显示为\"2018-11-12 9:10:20\"\r\n \"Y-D-M hh:mm:ss\"显示为\"2018-11-12 09:10:20\"\r\n",
        "type": "char*",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      }
    ],
    "header": "time_clock/digit_clock.h",
    "desc": " 数字时钟控件。\r\n\r\n digit\\_clock\\_t是[widget\\_t](widget_t.md)的子类控件，widget\\_t的函数均适用于digit\\_clock\\_t控件。\r\n\r\n 在xml中使用\"digit\\_clock\"标签创建数字时钟控件。如：\r\n\r\n ```xml\r\n <digit_clock format=\"YY/MM/DD h:mm:ss\"/>\r\n ```\r\n\r\n > 更多用法请参考：[digit\\_clock.xml](\r\n https://github.com/zlgopen/awtk/blob/master/demos/assets/raw/ui/digit_clock.xml)\r\n\r\n 在c代码中使用函数digit\\_clock\\_create创建数字时钟控件。如：\r\n\r\n ```c\r\n widget_t* tc = digit_clock_create(win, 10, 10, 240, 30);\r\n digit_clock_set_format(tc, \"YY/MM/DD h:mm:ss\");\r\n ```\r\n\r\n > 完整示例请参考：[digit\\_clock demo](\r\n https://github.com/zlgopen/awtk-c-demos/blob/master/demos/digit_clock.c)\r\n\r\n 可用通过style来设置控件的显示风格，如字体的大小和颜色等等。如：\r\n\r\n ```xml\r\n <style name=\"default\">\r\n   <normal text_color=\"black\" />\r\n </style>\r\n ```\r\n\r\n > 更多用法请参考：[theme default](\r\n https://github.com/zlgopen/awtk/blob/master/demos/assets/raw/styles/default.xml#L138)\r\n\r\n",
    "name": "digit_clock_t",
    "parent": "widget_t",
    "annotation": {
      "scriptable": true
    },
    "level": 2
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "parent",
            "desc": "父控件"
          },
          {
            "type": "xy_t",
            "name": "x",
            "desc": "x坐标"
          },
          {
            "type": "xy_t",
            "name": "y",
            "desc": "y坐标"
          },
          {
            "type": "wh_t",
            "name": "w",
            "desc": "宽度"
          },
          {
            "type": "wh_t",
            "name": "h",
            "desc": "高度"
          }
        ],
        "annotation": {
          "constructor": true,
          "scriptable": true
        },
        "desc": " 创建time_clock对象\r\n\r\n",
        "name": "time_clock_create",
        "return": {
          "type": "widget_t*",
          "desc": "对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "time_clock对象。"
          }
        ],
        "annotation": {
          "cast": true,
          "scriptable": true
        },
        "desc": " 转换为time_clock对象(供脚本语言使用)。\r\n\r\n",
        "name": "time_clock_cast",
        "return": {
          "type": "widget_t*",
          "desc": "time_clock对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "int32_t",
            "name": "hour",
            "desc": "小时的值。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 设置小时的值。\r\n\r\n",
        "name": "time_clock_set_hour",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "int32_t",
            "name": "minute",
            "desc": "分钟的值。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 设置分钟的值。\r\n\r\n",
        "name": "time_clock_set_minute",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "int32_t",
            "name": "second",
            "desc": "秒的值。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 设置秒的值。\r\n\r\n",
        "name": "time_clock_set_second",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "const char*",
            "name": "hour",
            "desc": "小时的图片。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 设置小时的图片。\r\n\r\n",
        "name": "time_clock_set_hour_image",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "const char*",
            "name": "minute_image",
            "desc": "分钟的图片。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 设置分钟的图片。\r\n\r\n",
        "name": "time_clock_set_minute_image",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "const char*",
            "name": "second_image",
            "desc": "秒的图片。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 设置秒的图片。\r\n\r\n",
        "name": "time_clock_set_second_image",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "const char*",
            "name": "bg_image",
            "desc": "背景图片。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 设置背景图片。\r\n\r\n",
        "name": "time_clock_set_bg_image",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "const char*",
            "name": "image",
            "desc": "图片。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 设置图片。\r\n\r\n",
        "name": "time_clock_set_image",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      }
    ],
    "events": [],
    "properties": [
      {
        "name": "hour",
        "desc": " 小时。\r\n",
        "type": "int32_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "minute",
        "desc": " 分钟。\r\n",
        "type": "int32_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "second",
        "desc": " 秒。\r\n",
        "type": "int32_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "image",
        "desc": " 中心图片。\r\n",
        "type": "char*",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "bg_image",
        "desc": " 背景图片。\r\n",
        "type": "char*",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "hour_image",
        "desc": " 时针图片。\r\n",
        "type": "char*",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "minute_image",
        "desc": " 分针图片。\r\n",
        "type": "char*",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "second_image",
        "desc": " 秒针图片。\r\n",
        "type": "char*",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      }
    ],
    "header": "time_clock/time_clock.h",
    "desc": " 模拟时钟控件。\r\n\r\n time\\_clock\\_t是[widget\\_t](widget_t.md)的子类控件，widget\\_t的函数均适用于time\\_clock\\_t控件。\r\n\r\n 在xml中使用\"time\\_clock\"标签创建模拟时钟控件。如：\r\n\r\n ```xml\r\n <time_clock x=\"c\" y=\"m\" w=\"300\" h=\"300\" bg_image=\"clock_bg\" image=\"clock\"\r\n   hour_image=\"clock_hour\" minute_image=\"clock_minute\" second_image=\"clock_second\"/>\r\n ```\r\n\r\n > 更多用法请参考：[time\\_clock.xml](\r\n https://github.com/zlgopen/awtk/blob/master/demos/assets/raw/ui/time_clock.xml)\r\n\r\n 在c代码中使用函数time\\_clock\\_create创建模拟时钟控件。如：\r\n\r\n ```c\r\n widget_t* tc = time_clock_create(win, 10, 10, 240, 240);\r\n time_clock_set_image(tc, \"clock\");\r\n time_clock_set_bg_image(tc, \"clock_bg\");\r\n time_clock_set_hour_image(tc, \"clock_hour\");\r\n time_clock_set_minute_image(tc, \"clock_minute\");\r\n time_clock_set_second_image(tc, \"clock_second\");\r\n ```\r\n\r\n > 完整示例请参考：[time_clock demo](\r\n https://github.com/zlgopen/awtk-c-demos/blob/master/demos/time_clock.c)\r\n\r\n time\\_clock一般不需要设置style。\r\n\r\n",
    "name": "time_clock_t",
    "parent": "widget_t",
    "annotation": {
      "scriptable": true
    },
    "level": 2
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [],
        "annotation": {
          "constructor": true
        },
        "desc": "\n 获取bitmap字体加载器对象。\n\n\n",
        "name": "font_loader_bitmap",
        "return": {
          "type": "font_loader_t*",
          "desc": "返回字体加载器对象。"
        }
      }
    ],
    "events": [],
    "properties": [],
    "header": "font_loader/font_loader_bitmap.h",
    "desc": " bitmap字体加载器。\n\n bitmap字体是用工具预先生成位图字体数据，优势是速度快，不占用内存，缺点是字体大小固定。\n 适合低端嵌入式平台。\n\n tools/font_gen用于把矢量字体(如truetype)转换成位图字体。\n\n\n\n",
    "name": "font_loader_bitmap_t",
    "parent": "font_loader_t",
    "annotation": {
      "fake": true
    },
    "level": 2
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [],
        "annotation": {
          "constructor": true
        },
        "desc": "\r\n 获取freetype字体加载器对象。\r\n\r\n",
        "name": "font_loader_ft",
        "return": {
          "type": "font_loader_t*",
          "desc": "返回字体加载器对象。"
        }
      }
    ],
    "events": [],
    "properties": [],
    "header": "font_loader/font_loader_ft.h",
    "desc": " freetype字体加载器。\r\n\r\n freetype主要用于加载矢量字体(如truetype)，它功能强大，效果优异，与stb字体加载器相比，缺点是代码量比较大。\r\n 如果flash空间够大，优先使用freetype，否则使用stb。\r\n\r\n",
    "name": "font_loader_ft_t",
    "parent": "font_loader_t",
    "annotation": {
      "fake": true
    },
    "level": 2
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [],
        "annotation": {
          "constructor": true
        },
        "desc": "\n 获取stb字体加载器对象。\n\n\n",
        "name": "font_loader_stb",
        "return": {
          "type": "font_loader_t*",
          "desc": "返回字体加载器对象。"
        }
      }
    ],
    "events": [],
    "properties": [],
    "header": "font_loader/font_loader_stb.h",
    "desc": " stb字体加载器。\n\n stb主要用于加载矢量字体(如truetype)，它功能强大，体积小巧。\n\n\n\n",
    "name": "font_loader_stb_t",
    "parent": "font_loader_t",
    "annotation": {
      "fake": true
    },
    "level": 2
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [],
        "annotation": {
          "constructor": true
        },
        "desc": "\n 获取stb图片加载器对象。\n\n\n",
        "name": "image_loader_stb",
        "return": {
          "type": "image_loader_t*",
          "desc": "返回图片加载器对象。"
        }
      }
    ],
    "events": [],
    "properties": [],
    "header": "image_loader/image_loader_stb.h",
    "desc": " stb图片加载器。\n\n stb主要用于加载jpg/png/gif等格式的图片，它功能强大，体积小巧。\n\n\n\n",
    "name": "image_loader_stb_t",
    "parent": "image_loader_t",
    "annotation": {
      "fake": true
    },
    "level": 2
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [],
        "annotation": {
          "constructor": true
        },
        "desc": "\n 创建空输入法引擎对象。\n\n\n\n",
        "name": "input_engine_create",
        "return": {
          "type": "input_engine_t*",
          "desc": "返回输入法引擎对象。"
        }
      }
    ],
    "events": [],
    "properties": [],
    "header": "input_engines/input_engine_null.h",
    "desc": "\n 空输入法引擎实现。\n\n 缺省输入法可以选择启用软键盘，但不启用具体的输入法引擎，此时可以选择空输入法引擎实现。\n\n\n\n",
    "name": "input_engine_null_t",
    "parent": "input_engine_t",
    "annotation": {
      "fake": true
    },
    "level": 2
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [],
        "annotation": {
          "constructor": true
        },
        "desc": "\n 创建拼音输入法引擎对象。\n\n\n\n",
        "name": "input_engine_create",
        "return": {
          "type": "input_engine_t*",
          "desc": "返回输入法引擎对象。"
        }
      }
    ],
    "events": [],
    "properties": [],
    "header": "input_engines/input_engine_pinyin.h",
    "desc": "\n 拼音输入法引擎实现。\n\n 基于谷歌拼音输入法实现。\n\n\n\n",
    "name": "input_engine_pinyin_t",
    "parent": "input_engine_t",
    "annotation": {
      "fake": true
    },
    "level": 2
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [],
        "annotation": {
          "constructor": true
        },
        "desc": "\n 创建缺省输入法对象。\n\n\n\n",
        "name": "input_method_default_create",
        "return": {
          "type": "input_method_t*",
          "desc": "返回输入法对象。"
        }
      }
    ],
    "events": [],
    "properties": [],
    "header": "input_methods/input_method_default.h",
    "desc": "\n 缺省输入法实现。输入法会启用软键盘，但是开发者可以自定义输入法引擎。\n\n 目前可以选择不启用输入法引擎或启用拼音输入法引擎。\n\n 开发者也可以开发手写输入法或语音输入法，如果实现时遇到问题可以和我们交流。\n\n\n\n",
    "name": "input_method_default_t",
    "parent": "input_method_t",
    "annotation": {
      "fake": true
    },
    "level": 2
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [],
        "annotation": {
          "constructor": true
        },
        "desc": "\n 创建空输入法对象。\n\n\n\n",
        "name": "input_method_null_create",
        "return": {
          "type": "input_method_t*",
          "desc": "返回输入法对象。"
        }
      }
    ],
    "events": [],
    "properties": [],
    "header": "input_methods/input_method_null.h",
    "desc": "\n 空输入法实现。\n\n 在不需要输入法的嵌入式平台使用空的输入法。\n\n\n\n",
    "name": "input_method_null_t",
    "parent": "input_method_t",
    "annotation": {
      "fake": true
    },
    "level": 2
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [],
        "annotation": {
          "constructor": true
        },
        "desc": "\n 创建SDL输入法对象。\n\n\n\n",
        "name": "input_method_sdl_create",
        "return": {
          "type": "input_method_t*",
          "desc": "返回输入法对象。"
        }
      }
    ],
    "events": [],
    "properties": [],
    "header": "input_methods/input_method_sdl.h",
    "desc": "\n SDL输入法实现。\n\n SDL输入法使用平台自身的输入法引擎，一般在桌面Linux、MacOS、Windows、Android和iOS上使用。\n\n\n\n",
    "name": "input_method_sdl_t",
    "parent": "input_method_t",
    "annotation": {
      "fake": true
    },
    "level": 2
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [],
        "annotation": {
          "constructor": true
        },
        "desc": "\n 创建子控件布局对象。\n\n\n\n",
        "name": "children_layouter_default_create",
        "return": {
          "type": "children_layouter_t*",
          "desc": "返回创建子控件布局对象。"
        }
      }
    ],
    "events": [],
    "properties": [],
    "header": "layouters/children_layouter_default.h",
    "desc": "\n 缺省的子控件布局算法实现。\n\n> 用法请参考：[缺省子控件布局算法](\nhttps://github.com/zlgopen/awtk/blob/master/docs/children_layouter_default.md)\n\n\n",
    "name": "children_layouter_default_t",
    "parent": "children_layouter_t",
    "level": 2
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [],
        "annotation": {
          "constructor": true
        },
        "desc": "\n 创建控件自身布局对象。\n\n\n\n",
        "name": "self_layouter_default_create",
        "return": {
          "type": "self_layouter_t*",
          "desc": "返回创建控件自身布局对象。"
        }
      }
    ],
    "events": [],
    "properties": [],
    "header": "layouters/self_layouter_default.h",
    "desc": "\n 缺省的控件自身布局算法实现。\n\n> 用法请参考：[缺省控件自身布局算法](\nhttps://github.com/zlgopen/awtk/blob/master/docs/self_layouter_default.md)\n\n\n",
    "name": "self_layouter_default_t",
    "parent": "self_layouter_t",
    "level": 2
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "parent",
            "desc": "父控件"
          },
          {
            "type": "xy_t",
            "name": "x",
            "desc": "x坐标"
          },
          {
            "type": "xy_t",
            "name": "y",
            "desc": "y坐标"
          },
          {
            "type": "wh_t",
            "name": "w",
            "desc": "宽度"
          },
          {
            "type": "wh_t",
            "name": "h",
            "desc": "高度"
          }
        ],
        "annotation": {
          "constructor": true,
          "scriptable": true
        },
        "desc": " 创建tab_control对象\r\n\r\n",
        "name": "tab_control_create",
        "return": {
          "type": "widget_t*",
          "desc": "对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "tab_control对象。"
          }
        ],
        "annotation": {
          "cast": true,
          "scriptable": true
        },
        "desc": " 转换tab_control对象(供脚本语言使用)。\r\n\r\n",
        "name": "tab_control_cast",
        "return": {
          "type": "widget_t*",
          "desc": "tab_control对象。"
        }
      }
    ],
    "events": [],
    "properties": [],
    "header": "widgets/tab_control.h",
    "desc": " 标签控件。\r\n\r\n 它本身不提供布局功能，仅提供具有语义的标签，让xml更具有可读性。\r\n\r\n 标签控件通常会包含一个pages控件和一个tab\\_button\\_group控件。\r\n\r\n ```graphviz\r\n   [default_style]\r\n\r\n   pages_t -> tab_control_t[arrowhead = \"ediamond\"]\r\n   tab_button_group_t -> tab_control_t[arrowhead = \"ediamond\"]\r\n   view_t ->pages_t[arrowhead = \"ediamond\"]\r\n   tab_button_t -> tab_button_group_t[arrowhead = \"ediamond\"]\r\n ```\r\n\r\n tab\\_control\\_t是[widget\\_t](widget_t.md)的子类控件，\r\n widget\\_t的函数均适用于tab\\_control\\_t控件。\r\n\r\n 在xml中使用\"tab\\_control\"标签创建标签控件。如：\r\n\r\n ```xml\r\n <tab_control x=\"0\" y=\"0\" w=\"100%\" h=\"100%\" >\r\n   <pages x=\"c\" y=\"20\" w=\"90%\" h=\"-60\" value=\"1\">\r\n   ...\r\n   </pages>\r\n   <tab_button_group>\r\n   ...\r\n   </tab_button_group>\r\n </tab_control>\r\n ```\r\n\r\n > 更多用法请参考：\r\n [tab control](https://github.com/zlgopen/awtk/blob/master/demos/assets/raw/ui/)\r\n\r\n",
    "name": "tab_control_t",
    "parent": "widget_t",
    "annotation": {
      "scriptable": true
    },
    "level": 2
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "image对象。"
          },
          {
            "type": "char*",
            "name": "name",
            "desc": "图片名称，该图片必须存在于资源管理器。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 设置控件的图片名称。\r\n\r\n",
        "name": "image_set_image",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "float_t",
            "name": "rotation",
            "desc": "旋转角度(幅度)。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 设置控件的旋转角度(仅在WITH_VGCANVAS定义时生效)。\r\n\r\n",
        "name": "image_set_rotation",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "float_t",
            "name": "scale_x",
            "desc": "X方向缩放比例。"
          },
          {
            "type": "float_t",
            "name": "scale_y",
            "desc": "Y方向缩放比例。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 设置控件的缩放比例(仅在WITH_VGCANVAS定义时生效)。\r\n\r\n",
        "name": "image_set_scale",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "float_t",
            "name": "anchor_x",
            "desc": "锚点X(0-1)。0在控件左边，0.5在控件中间，1在控件右边。"
          },
          {
            "type": "float_t",
            "name": "anchor_y",
            "desc": "锚点Y(0-1)。0在控件顶部，0.5在控件中间，1在控件底部。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 设置控件的锚点(仅在WITH_VGCANVAS定义时生效)。\r\n\r\n",
        "name": "image_set_anchor",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "bool_t",
            "name": "selected",
            "desc": "是否被选中。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 设置控件的选中状态。\r\n\r\n",
        "name": "image_set_selected",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "bool_t",
            "name": "selectable",
            "desc": "是否可以被选中。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 设置控件是否可以被选中。\r\n\r\n",
        "name": "image_set_selectable",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "bool_t",
            "name": "clickable",
            "desc": "是否可以被点击。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 设置控件是否可以被点击。\r\n\r\n",
        "name": "image_set_clickable",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "image_base对象。"
          }
        ],
        "annotation": {
          "cast": true,
          "scriptable": true
        },
        "desc": " 转换为image_base对象(供脚本语言使用)。\r\n\r\n",
        "name": "image_base_cast",
        "return": {
          "type": "widget_t*",
          "desc": "image_base对象。"
        }
      }
    ],
    "events": [],
    "properties": [
      {
        "name": "image",
        "desc": " 图片的名称。\r\n",
        "type": "char*",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "anchor_x",
        "desc": " 锚点X(0-1)。0在控件左边，0.5在控件中间，1在控件右边。\r\n",
        "type": "float_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "anchor_y",
        "desc": " 锚点Y(0-1)。0在控件顶部，0.5在控件中间，1在控件底部。\r\n",
        "type": "float_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "scale_x",
        "desc": " 控件在X方向上的缩放比例。\r\n",
        "type": "float_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "scale_y",
        "desc": " 控件在Y方向上的缩放比例。\r\n",
        "type": "float_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "rotation",
        "desc": " 控件的旋转角度(幅度)。\r\n",
        "type": "float_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "clickable",
        "desc": " 点击时，是否触发EVT_CLICK事件。\r\n",
        "type": "bool_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "selectable",
        "desc": " 是否设置选中状态。\r\n",
        "type": "bool_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "selected",
        "desc": " 当前是否被选中。\r\n",
        "type": "bool_t",
        "annotation": {
          "readable": true,
          "scriptable": true
        }
      }
    ],
    "header": "base/image_base.h",
    "desc": " 图片控件基类。\r\n\r\n 本类把图片相关控件的公共行为进行抽象，放到一起方便重用。目前已知的具体实现如下图：\r\n\r\n ```graphviz\r\n   [default_style]\r\n\r\n   image_t -> image_base_t[arrowhead = \"empty\"]\r\n   svg_image_t -> image_base_t[arrowhead = \"empty\"]\r\n   gif_image_t -> image_base_t[arrowhead = \"empty\"]\r\n ```\r\n\r\n > 本类是一个抽象类，不能进行实例化。请在应用程序中使用具体的类，如image\\_t。\r\n\r\n",
    "name": "image_base_t",
    "parent": "widget_t",
    "annotation": {
      "scriptable": true
    },
    "level": 2
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "parent",
            "desc": "父控件"
          },
          {
            "type": "xy_t",
            "name": "x",
            "desc": "x坐标"
          },
          {
            "type": "xy_t",
            "name": "y",
            "desc": "y坐标"
          },
          {
            "type": "wh_t",
            "name": "w",
            "desc": "宽度"
          },
          {
            "type": "wh_t",
            "name": "h",
            "desc": "高度"
          }
        ],
        "annotation": {
          "constructor": true,
          "scriptable": true
        },
        "desc": " 创建window对象\r\n\r\n",
        "name": "window_create",
        "return": {
          "type": "widget_t*",
          "desc": "对象。"
        }
      },
      {
        "params": [
          {
            "type": "char*",
            "name": "name",
            "desc": "window_base的名称。"
          }
        ],
        "annotation": {
          "constructor": true,
          "scriptable": true
        },
        "desc": " 从资源文件中加载并创建window_base对象。本函数在ui_loader/ui_builder_default里实现。\r\n\r\n",
        "name": "window_open",
        "return": {
          "type": "widget_t*",
          "desc": "对象。"
        }
      },
      {
        "params": [
          {
            "type": "char*",
            "name": "name",
            "desc": "window_base的名称。"
          },
          {
            "type": "widget_t*",
            "name": "to_close",
            "desc": "关闭该窗口。"
          }
        ],
        "annotation": {
          "constructor": true,
          "scriptable": true
        },
        "desc": " 从资源文件中加载并创建window_base对象。本函数在ui_loader/ui_builder_default里实现。\r\n\r\n",
        "name": "window_open_and_close",
        "return": {
          "type": "widget_t*",
          "desc": "对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "window_base对象。"
          }
        ],
        "annotation": {
          "deconstructor": true,
          "scriptable": true
        },
        "desc": " 关闭窗口。\r\n\r\n",
        "name": "window_close",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "window对象。"
          }
        ],
        "annotation": {
          "cast": true,
          "scriptable": true
        },
        "desc": " 转换为window对象(供脚本语言使用)。\r\n\r\n",
        "name": "window_cast",
        "return": {
          "type": "widget_t*",
          "desc": "window对象。"
        }
      }
    ],
    "events": [],
    "properties": [],
    "header": "widgets/window.h",
    "desc": " 窗口。\r\n\r\n 缺省的应用程序窗口，占用除system\\_bar\\_t之外的整个区域，请不要修改它的位置和大小(除非你清楚后果)。\r\n\r\n window\\_t是[window\\_base\\_t](window_base_t.md)的子类控件，window\\_base\\_t的函数均适用于window\\_t控件。\r\n\r\n 在xml中使用\"window\"标签创建窗口。无需指定坐标和大小，可以指定主题和动画名称。如：\r\n\r\n ```xml\r\n <window theme=\"basic\" anim_hint=\"htranslate\">\r\n ...\r\n </window>\r\n ```\r\n\r\n >\r\n 更多用法请参考：[window.xml](https://github.com/zlgopen/awtk/blob/master/demos/assets/raw/ui/)\r\n\r\n 在c代码中使用函数window\\_create创建窗口。如：\r\n\r\n ```c\r\n  widget_t* window = window_create(NULL, 0, 0, 0, 0);\r\n ```\r\n\r\n > 无需指定父控件、坐标和大小，使用0即可。\r\n\r\n > 完整示例请参考：[window\r\n demo](https://github.com/zlgopen/awtk-c-demos/blob/master/demos/)\r\n\r\n 可用通过style来设置窗口的风格，如背景颜色或图片等。如：\r\n\r\n ```xml\r\n <style name=\"bricks\">\r\n  <normal bg_image=\"bricks\"  bg_image_draw_type=\"repeat\"/>\r\n </style>\r\n ```\r\n\r\n > 更多用法请参考：[theme\r\n default](https://github.com/zlgopen/awtk/blob/master/demos/assets/raw/styles/default.xml#L0)\r\n",
    "name": "window_t",
    "parent": "widget_t",
    "annotation": {
      "scriptable": true
    },
    "level": 2
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "event_t*",
            "name": "event",
            "desc": "event对象。"
          }
        ],
        "annotation": {
          "cast": true,
          "scriptable": true
        },
        "desc": " 把event对象转wheel_event_t对象，主要给脚本语言使用。\n\n\n",
        "name": "wheel_event_cast",
        "return": {
          "type": "wheel_event_t*",
          "desc": "对象。"
        }
      }
    ],
    "events": [],
    "properties": [
      {
        "name": "dx",
        "desc": " 滚轮的x值。\n\n",
        "type": "int32_t",
        "annotation": {
          "readable": true,
          "scriptable": true
        }
      },
      {
        "name": "dy",
        "desc": " 滚轮的x值。\n\n",
        "type": "int32_t",
        "annotation": {
          "readable": true,
          "scriptable": true
        }
      },
      {
        "name": "alt",
        "desc": " alt键是否按下。\n\n",
        "type": "bool_t",
        "annotation": {
          "readable": true,
          "scriptable": true
        }
      },
      {
        "name": "ctrl",
        "desc": " ctrl键是否按下。\n\n",
        "type": "bool_t",
        "annotation": {
          "readable": true,
          "scriptable": true
        }
      },
      {
        "name": "shift",
        "desc": " shift键是否按下。\n\n",
        "type": "bool_t",
        "annotation": {
          "readable": true,
          "scriptable": true
        }
      }
    ],
    "header": "base/events.h",
    "desc": " 滚轮事件。\n\n",
    "name": "wheel_event_t",
    "annotation": {
      "scriptable": true
    },
    "parent": "event_t",
    "level": 2
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "event_t*",
            "name": "event",
            "desc": "event对象。"
          }
        ],
        "annotation": {
          "cast": true,
          "scriptable": true
        },
        "desc": " 把event对象转pointer_event_t对象，主要给脚本语言使用。\n\n\n",
        "name": "pointer_event_cast",
        "return": {
          "type": "pointer_event_t*",
          "desc": "对象。"
        }
      }
    ],
    "events": [],
    "properties": [
      {
        "name": "x",
        "desc": " x坐标。\n\n",
        "type": "xy_t",
        "annotation": {
          "readable": true,
          "scriptable": true
        }
      },
      {
        "name": "y",
        "desc": " y坐标。\n\n",
        "type": "xy_t",
        "annotation": {
          "readable": true,
          "scriptable": true
        }
      },
      {
        "name": "button",
        "desc": " button。\n\n",
        "type": "uint8_t",
        "annotation": {
          "readable": true,
          "scriptable": true
        }
      },
      {
        "name": "pressed",
        "desc": " 指针是否按下。\n\n",
        "type": "bool_t",
        "annotation": {
          "readable": true,
          "scriptable": true
        }
      },
      {
        "name": "alt",
        "desc": " alt键是否按下。\n\n",
        "type": "bool_t",
        "annotation": {
          "readable": true,
          "scriptable": true
        }
      },
      {
        "name": "ctrl",
        "desc": " ctrl键是否按下。\n\n",
        "type": "bool_t",
        "annotation": {
          "readable": true,
          "scriptable": true
        }
      },
      {
        "name": "shift",
        "desc": " shift键是否按下。\n\n",
        "type": "bool_t",
        "annotation": {
          "readable": true,
          "scriptable": true
        }
      }
    ],
    "header": "base/events.h",
    "desc": " 指针事件。\n\n",
    "name": "pointer_event_t",
    "annotation": {
      "scriptable": true
    },
    "parent": "event_t",
    "level": 2
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "event_t*",
            "name": "event",
            "desc": "event对象。"
          }
        ],
        "annotation": {
          "cast": true,
          "scriptable": true
        },
        "desc": " 把event对象转key_event_t对象，主要给脚本语言使用。\n\n\n",
        "name": "key_event_cast",
        "return": {
          "type": "key_event_t*",
          "desc": "对象。"
        }
      }
    ],
    "events": [],
    "properties": [
      {
        "name": "key",
        "desc": " 键值。\n\n",
        "type": "uint32_t",
        "annotation": {
          "readable": true,
          "scriptable": true
        }
      },
      {
        "name": "alt",
        "desc": " alt键是否按下。\n\n",
        "type": "bool_t",
        "annotation": {
          "readable": true,
          "scriptable": true
        }
      },
      {
        "name": "ctrl",
        "desc": " ctrl键是否按下。\n\n",
        "type": "bool_t",
        "annotation": {
          "readable": true,
          "scriptable": true
        }
      },
      {
        "name": "shift",
        "desc": " shift键是否按下。\n\n",
        "type": "bool_t",
        "annotation": {
          "readable": true,
          "scriptable": true
        }
      },
      {
        "name": "capslock",
        "desc": " capslock键是否按下。\n\n",
        "type": "bool_t",
        "annotation": {
          "readable": true,
          "scriptable": true
        }
      }
    ],
    "header": "base/events.h",
    "desc": " 按键事件。\n\n",
    "name": "key_event_t",
    "annotation": {
      "scriptable": true
    },
    "parent": "event_t",
    "level": 2
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [],
        "annotation": {
          "constructor": true
        },
        "desc": "\n 创建只读的style对象。\n\n\n",
        "name": "style_const_create",
        "return": {
          "type": "style_t*",
          "desc": "返回style对象。"
        }
      }
    ],
    "events": [],
    "properties": [],
    "header": "base/style_const.h",
    "desc": "\n 只读的style，从theme\\_t中获取数据。\n\n tools/theme_gen用于把XML的主题数据转换成常量数据。\n\n\n\n",
    "name": "style_const_t",
    "parent": "style_t",
    "annotation": {
      "fake": true
    },
    "level": 2
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "event_t*",
            "name": "event",
            "desc": "event对象。"
          }
        ],
        "annotation": {
          "cast": true,
          "scriptable": true
        },
        "desc": " 把event对象转paint_event_t对象。主要给脚本语言使用。\n\n\n",
        "name": "paint_event_cast",
        "return": {
          "type": "paint_event_t*",
          "desc": "对象。"
        }
      }
    ],
    "events": [],
    "properties": [
      {
        "name": "c",
        "desc": " canvas。\n\n",
        "type": "canvas_t*",
        "annotation": {
          "readable": true,
          "scriptable": true
        }
      }
    ],
    "header": "base/events.h",
    "desc": " 绘制事件。\n\n",
    "name": "paint_event_t",
    "annotation": {
      "scriptable": true
    },
    "parent": "event_t",
    "level": 2
  },
  {
    "type": "class",
    "methods": [],
    "events": [],
    "properties": [
      {
        "name": "text",
        "desc": " 提交的文本。\n\n",
        "type": "char*",
        "annotation": {
          "readable": true
        }
      }
    ],
    "header": "base/input_method.h",
    "desc": " 输入法提交输入的文本事件。\n\n",
    "name": "im_commit_event_t",
    "parent": "event_t",
    "level": 2
  },
  {
    "type": "class",
    "methods": [],
    "events": [],
    "properties": [
      {
        "name": "text",
        "desc": " 软键盘上的action按钮显示的文本。\n\n",
        "type": "char*",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "enable",
        "desc": " 软键盘上的action按钮启用。\n\n",
        "type": "bool_t",
        "annotation": {
          "readable": true
        }
      }
    ],
    "header": "base/input_method.h",
    "desc": " 设置软键盘上的action按钮的信息事件。\n\n",
    "name": "im_action_button_info_event_t",
    "parent": "event_t",
    "level": 2
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "event_t*",
            "name": "event",
            "desc": "event对象。"
          }
        ],
        "annotation": {
          "cast": true,
          "scriptable": true
        },
        "desc": " 把event对象转prop_change_event_t对象，主要给脚本语言使用。\n\n\n",
        "name": "prop_change_event_cast",
        "return": {
          "type": "prop_change_event_t*",
          "desc": "对象。"
        }
      }
    ],
    "events": [],
    "properties": [
      {
        "name": "name",
        "desc": " 属性的名称。\n\n",
        "type": "char*",
        "annotation": {
          "readable": true,
          "scriptable": true
        }
      },
      {
        "name": "value",
        "desc": " 属性的值。\n\n",
        "type": "value_t*",
        "annotation": {
          "readable": true,
          "scriptable": true
        }
      }
    ],
    "header": "tkc/event.h",
    "desc": " 对象属性变化事件。\n\n",
    "name": "prop_change_event_t",
    "annotation": {
      "scriptable": true
    },
    "parent": "event_t",
    "level": 2
  },
  {
    "type": "class",
    "methods": [],
    "events": [],
    "properties": [
      {
        "name": "candidates",
        "desc": " 可选的文本，多个文本以\\0分隔。如：里\\0李\\0力\\0离\\0\n\n",
        "type": "char*",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "candidates_nr",
        "desc": " 可选的文本的个数。\n\n",
        "type": "uint32_t",
        "annotation": {
          "readable": true
        }
      }
    ],
    "header": "base/input_method.h",
    "desc": " 输入法请求显示候选字的事件。\n\n",
    "name": "im_candidates_event_t",
    "parent": "event_t",
    "level": 2
  },
  {
    "type": "class",
    "methods": [],
    "events": [],
    "properties": [
      {
        "name": "theme",
        "desc": " 主题资源的名称。\r\n 每个窗口都可以有独立的主题文件，如果没指定，则使用系统缺省的主题文件。\r\n 主题是一个XML文件，放在assets/raw/styles目录下。\r\n 请参考[主题](https://github.com/zlgopen/awtk/blob/master/docs/theme.md)\r\n",
        "type": "char*",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "script",
        "desc": " 脚本文件名称(暂时没用)。\r\n",
        "type": "char*",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true
        }
      },
      {
        "name": "closable",
        "desc": " 收到EVT_REQUEST_CLOSE_WINDOW是否自动关闭窗口。\r\n\r\n 如果关闭窗口时，需要用户确认:\r\n\r\n * 1.将closable设置为WINDOW\\_CLOSABLE\\_CONFIRM\r\n\r\n * 2.处理窗口的EVT\\_REQUEST\\_CLOSE\\_WINDOW事件\r\n\r\n> closable在XML中取值为：yes/no/confirm，缺省为yes。\r\n",
        "type": "window_closable_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "open_anim_hint",
        "desc": " 打开窗口动画的名称。\r\n 请参考[窗口动画](https://github.com/zlgopen/awtk/blob/master/docs/window_animator.md)\r\n",
        "type": "char*",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true
        }
      },
      {
        "name": "close_anim_hint",
        "desc": " 关闭窗口动画的名称。\r\n 请参考[窗口动画](https://github.com/zlgopen/awtk/blob/master/docs/window_animator.md)\r\n",
        "type": "char*",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true
        }
      },
      {
        "name": "stage",
        "desc": " 窗口当前处于的状态。\r\n",
        "type": "char*",
        "annotation": {
          "readable": true,
          "get_prop": true
        }
      },
      {
        "name": "theme_obj",
        "desc": " 窗口的常量主题数据。\r\n\r\n>\r\n把主题管理器对象与窗口关联起来，是为了解决UI设计器与被设计的窗口需要从不同的位置加载主题资源的问题。\r\n",
        "type": "theme_t*",
        "annotation": {
          "get_prop": true
        }
      },
      {
        "name": "image_manager",
        "desc": " 获取图片管理器对象。\r\n\r\n>\r\n把图片管理器对象与窗口关联起来，是为了解决UI设计器与被设计的窗口需要从不同的位置加载图片资源的问题。\r\n",
        "type": "image_manager_t*",
        "annotation": {
          "get_prop": true
        }
      },
      {
        "name": "font_manager",
        "desc": " 获取字体管理器对象。\r\n\r\n>\r\n把字体管理器对象与窗口关联起来，是为了解决UI设计器与被设计的窗口需要从不同的位置加载字体资源的问题。\r\n",
        "type": "font_manager_t*",
        "annotation": {
          "get_prop": true
        }
      },
      {
        "name": "assets_manager",
        "desc": " 获取资源管理器对象。\r\n\r\n >\r\n 把资源管理器对象与窗口关联起来，是为了解决UI设计器与被设计的窗口需要从不同的位置加载资源资源的问题。\r\n",
        "type": "assets_manager_t*",
        "annotation": {
          "get_prop": true
        }
      }
    ],
    "header": "base/window_base.h",
    "desc": " 窗口。\r\n\r\n 本类把窗口相关的公共行为进行抽象，放到一起方便重用。目前已知的具体实现如下图：\r\n\r\n ```graphviz\r\n   [default_style]\r\n\r\n   window_t -> window_base_t[arrowhead = \"empty\"]\r\n   popup_t -> window_base_t[arrowhead = \"empty\"]\r\n   dialog_t -> window_base_t[arrowhead = \"empty\"]\r\n   system_bar_t -> window_base_t[arrowhead = \"empty\"]\r\n   calibration_win_t -> window_base_t[arrowhead = \"empty\"]\r\n ```\r\n\r\n > 本类是一个抽象类，不能进行实例化。请在应用程序中使用具体的类，如window\\_t。\r\n\r\n",
    "name": "window_base_t",
    "parent": "widget_t",
    "annotation": {
      "scriptable": true
    },
    "level": 2
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [],
        "annotation": {
          "constructor": true,
          "scriptable": true
        },
        "desc": " 获取全局window_manager对象\r\n\r\n",
        "name": "window_manager",
        "alias": "window_manager_instance",
        "return": {
          "type": "widget_t*",
          "desc": "对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "window_manager对象。"
          }
        ],
        "annotation": {
          "cast": true,
          "scriptable": true
        },
        "desc": " 转换为window_manager对象(供脚本语言使用)。\r\n\r\n",
        "name": "window_manager_cast",
        "return": {
          "type": "widget_t*",
          "desc": "window_manager对象。"
        }
      },
      {
        "params": [
          {
            "type": "window_manager_t*",
            "name": "widget",
            "desc": "窗口管理器对象。"
          }
        ],
        "annotation": {},
        "desc": " 设置缺省的窗口管理器。\r\n\r\n",
        "name": "window_manager_set",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [],
        "annotation": {
          "constructor": true
        },
        "desc": " 创建窗口管理器。\r\n\r\n",
        "name": "window_manager_create",
        "return": {
          "type": "window_manager_t*",
          "desc": "返回窗口管理器对象。"
        }
      },
      {
        "params": [
          {
            "type": "window_manager_t*",
            "name": "widget",
            "desc": "窗口管理器对象。"
          }
        ],
        "annotation": {
          "constructor": true
        },
        "desc": " 初始化窗口管理器。\r\n\r\n",
        "name": "window_manager_init",
        "return": {
          "type": "widget_t*",
          "desc": "返回窗口管理器对象。"
        }
      },
      {
        "params": [
          {
            "type": "window_manager_t*",
            "name": "widget",
            "desc": "窗口管理器对象。"
          }
        ],
        "annotation": {},
        "desc": " 获取最上面的主窗口。\r\n\r\n",
        "name": "window_manager_get_top_main_window",
        "return": {
          "type": "widget_t*",
          "desc": "返回窗口对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "窗口管理器对象。"
          },
          {
            "type": "wh_t",
            "name": "w",
            "desc": "宽度"
          },
          {
            "type": "wh_t",
            "name": "h",
            "desc": "高度"
          }
        ],
        "annotation": {},
        "desc": " 调整窗口管理器的大小。\r\n\r\n",
        "name": "window_manager_resize",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "窗口管理器对象。"
          },
          {
            "type": "widget_t*",
            "name": "window",
            "desc": "窗口对象。"
          }
        ],
        "annotation": {},
        "desc": " 打开窗口。\r\n\r\n",
        "name": "window_manager_open_window",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "窗口管理器对象。"
          },
          {
            "type": "widget_t*",
            "name": "window",
            "desc": "窗口对象。"
          }
        ],
        "annotation": {},
        "desc": " 关闭窗口。\r\n\r\n",
        "name": "window_manager_close_window",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "窗口管理器对象。"
          },
          {
            "type": "widget_t*",
            "name": "window",
            "desc": "窗口对象。"
          }
        ],
        "annotation": {},
        "desc": " 强制立即关闭窗口。\r\n\r\n",
        "name": "window_manager_close_window_force",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "窗口管理器对象。"
          },
          {
            "type": "canvas_t*",
            "name": "c",
            "desc": "画布。"
          }
        ],
        "annotation": {},
        "desc": " 绘制。\r\n\r\n",
        "name": "window_manager_paint",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "窗口管理器对象。"
          },
          {
            "type": "event_t*",
            "name": "e",
            "desc": "事件对象。"
          }
        ],
        "annotation": {},
        "desc": " 分发输入事件。\r\n\r\n",
        "name": "window_manager_dispatch_input_event",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "窗口管理器对象。"
          },
          {
            "type": "bool_t",
            "name": "show_fps",
            "desc": "是否显示FPS。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 设置是否显示FPS。\r\n\r\n",
        "name": "window_manager_set_show_fps",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "窗口管理器对象。"
          },
          {
            "type": "const char*",
            "name": "cursor",
            "desc": "图片名称(从图片管理器中加载)。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 设置鼠标指针。\r\n\r\n",
        "name": "window_manager_set_cursor",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      }
    ],
    "events": [],
    "properties": [
      {
        "name": "show_fps",
        "desc": " 是否显示fps。\r\n",
        "type": "bool_t",
        "annotation": {
          "readable": true,
          "scriptable": true
        }
      }
    ],
    "header": "base/window_manager.h",
    "desc": " 窗口管理器。\r\n",
    "name": "window_manager_t",
    "parent": "widget_t",
    "annotation": {
      "scriptable": true
    },
    "level": 2
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "style_t*",
            "name": "s",
            "desc": "style对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 获取style的名称。\n\n\n",
        "name": "style_mutable_get_name",
        "return": {
          "type": "const char*",
          "desc": "style的名称。"
        }
      },
      {
        "params": [
          {
            "type": "style_t*",
            "name": "s",
            "desc": "style对象。"
          },
          {
            "type": "const char*",
            "name": "name",
            "desc": "名称。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 设置style的名称。\n\n\n",
        "name": "style_mutable_set_name",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "style_t*",
            "name": "s",
            "desc": "style对象。"
          },
          {
            "type": "const char*",
            "name": "state",
            "desc": "控件状态。"
          },
          {
            "type": "const char*",
            "name": "name",
            "desc": "属性名。"
          },
          {
            "type": "int32_t",
            "name": "val",
            "desc": "值。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 设置指定name整数格式的值。\n\n\n",
        "name": "style_mutable_set_int",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "style_t*",
            "name": "s",
            "desc": "style对象。"
          },
          {
            "type": "const char*",
            "name": "state",
            "desc": "控件状态。"
          },
          {
            "type": "const char*",
            "name": "name",
            "desc": "属性名。"
          },
          {
            "type": "color_t",
            "name": "val",
            "desc": "值。"
          }
        ],
        "annotation": {},
        "desc": " 设置指定name的颜色值。\n\n\n",
        "name": "style_mutable_set_color",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "style_t*",
            "name": "s",
            "desc": "style对象。"
          },
          {
            "type": "const char*",
            "name": "state",
            "desc": "控件状态。"
          },
          {
            "type": "const char*",
            "name": "name",
            "desc": "属性名。"
          },
          {
            "type": "const char*",
            "name": "val",
            "desc": "值。"
          }
        ],
        "annotation": {},
        "desc": " 设置指定name字符串的值。\n\n\n",
        "name": "style_mutable_set_str",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "style_t*",
            "name": "s",
            "desc": "style对象。"
          },
          {
            "type": "tk_on_style_item_t",
            "name": "on_style_item",
            "desc": "回调函数。"
          },
          {
            "type": "void*",
            "name": "ctx",
            "desc": "回调函数的上下文。"
          }
        ],
        "annotation": {},
        "desc": " 遍历。对每项调用回调函数on\\_style\\_item。\n\n\n",
        "name": "style_mutable_foreach",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件"
          }
        ],
        "annotation": {
          "constructor": true,
          "scriptable": true
        },
        "desc": " 创建style\\_mutable对象。\n\n > 除了测试程序外不需要直接调用，widget会通过style\\_factory\\_create创建。\n\n\n\n",
        "name": "style_mutable_create",
        "return": {
          "type": "style_t*",
          "desc": "style对象。"
        }
      },
      {
        "params": [],
        "annotation": {},
        "desc": " 将自己注册到style\\_factory。\n\n\n",
        "name": "style_mutable_register",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      }
    ],
    "events": [],
    "properties": [
      {
        "name": "name",
        "desc": " 名称。\n\n",
        "type": "char*",
        "annotation": {
          "readable": true,
          "scriptable": true
        }
      },
      {
        "name": "widget",
        "desc": " 与之关联的控件。\n\n",
        "type": "widget_t*",
        "annotation": {
          "private": true
        }
      },
      {
        "name": "default_style",
        "desc": " 缺省的style，在mutable中找不到时，再到default_style中找。\n\n",
        "type": "style_t*",
        "annotation": {
          "private": true
        }
      },
      {
        "name": "styles",
        "desc": " 控件在不同状态下的style。\n\n",
        "type": "widget_state_style_t*",
        "annotation": {
          "private": true
        }
      }
    ],
    "header": "designer_support/style_mutable.h",
    "desc": "\n 可变的style(可实时修改并生效，主要用于在designer中被编辑的控件，或者一些特殊控件)。\n\n style\\_mutable也对style\\_const进行了包装，当用户没修改某个值时，便从style\\_const中获取。\n\n\n",
    "name": "style_mutable_t",
    "parent": "style_t",
    "annotation": {
      "scriptable": true
    },
    "level": 2
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "parent",
            "desc": "父控件"
          },
          {
            "type": "xy_t",
            "name": "x",
            "desc": "x坐标"
          },
          {
            "type": "xy_t",
            "name": "y",
            "desc": "y坐标"
          },
          {
            "type": "wh_t",
            "name": "w",
            "desc": "宽度"
          },
          {
            "type": "wh_t",
            "name": "h",
            "desc": "高度"
          }
        ],
        "annotation": {
          "constructor": true,
          "scriptable": true
        },
        "desc": " 创建slider对象\r\n\r\n",
        "name": "slider_create",
        "return": {
          "type": "widget_t*",
          "desc": "对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "slider对象。"
          }
        ],
        "annotation": {
          "cast": true,
          "scriptable": true
        },
        "desc": " 转换为slider对象(供脚本语言使用)。\r\n\r\n",
        "name": "slider_cast",
        "return": {
          "type": "widget_t*",
          "desc": "slider对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "uint16_t",
            "name": "value",
            "desc": "值"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 设置滑块的值。\r\n\r\n",
        "name": "slider_set_value",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "uint16_t",
            "name": "min",
            "desc": "最小值"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 设置滑块的最小值。\r\n\r\n",
        "name": "slider_set_min",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "uint16_t",
            "name": "max",
            "desc": "最大值"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 设置滑块的最大值。\r\n\r\n",
        "name": "slider_set_max",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "uint16_t",
            "name": "step",
            "desc": "拖动的最小单位。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 设置滑块的拖动的最小单位。\r\n\r\n",
        "name": "slider_set_step",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "bool_t",
            "name": "vertical",
            "desc": "是否为垂直方向。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 设置滑块的方向。\r\n\r\n",
        "name": "slider_set_vertical",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      }
    ],
    "events": [
      {
        "name": "EVT_VALUE_WILL_CHANGE",
        "desc": " 值即将改变事件。\r\n",
        "type": "event_t"
      },
      {
        "name": "EVT_VALUE_CHANGING",
        "desc": " 值正在改变事件(拖动中)。\r\n",
        "type": "event_t"
      },
      {
        "name": "EVT_VALUE_CHANGED",
        "desc": " 值改变事件。\r\n",
        "type": "event_t"
      }
    ],
    "properties": [
      {
        "name": "value",
        "desc": " 值。\r\n",
        "type": "uint16_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "min",
        "desc": " 最小值。\r\n",
        "type": "uint16_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "max",
        "desc": " 最大值。\r\n",
        "type": "uint16_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "step",
        "desc": " 拖动的最小单位。\r\n",
        "type": "uint16_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "vertical",
        "desc": " 滑块的是否为垂直方向。\r\n",
        "type": "bool_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      }
    ],
    "header": "widgets/slider.h",
    "desc": " 滑块控件。\r\n\r\n slider\\_t是[widget\\_t](widget_t.md)的子类控件，widget\\_t的函数均适用于slider\\_t控件。\r\n\r\n 在xml中使用\"slider\"标签创建滑块控件。如：\r\n\r\n ```xml\r\n <slider x=\"center\" y=\"10\" w=\"80%\" h=\"20\" value=\"10\"/>\r\n <slider style=\"img\" x=\"center\" y=\"50\" w=\"80%\" h=\"30\" value=\"20\" />\r\n <slider style=\"img\" x=\"center\" y=\"90\" w=\"80%\" h=\"30\" value=\"30\" min=\"5\" max=\"50\" step=\"5\"/>\r\n ```\r\n\r\n > 更多用法请参考：\r\n [basic](https://github.com/zlgopen/awtk/blob/master/demos/assets/raw/ui/basic.xml)\r\n\r\n 在c代码中使用函数slider\\_create创建滑块控件。如：\r\n\r\n ```c\r\n  widget_t* slider = slider_create(win, 10, 10, 200, 30);\r\n  widget_on(slider, EVT_VALUE_CHANGED, on_changed, NULL);\r\n  widget_on(slider, EVT_VALUE_CHANGING, on_changing, NULL);\r\n ```\r\n\r\n > 完整示例请参考：\r\n [slider demo](https://github.com/zlgopen/awtk-c-demos/blob/master/demos/slider.c)\r\n\r\n 可用通过style来设置控件的显示风格，如图片和颜色等等。如：\r\n\r\n ```xml\r\n <style name=\"img\" bg_image=\"slider_bg\" fg_image=\"slider_fg\">\r\n  <normal icon=\"slider_drag\"/>\r\n  <pressed icon=\"slider_drag_p\"/>\r\n  <over icon=\"slider_drag_o\"/>\r\n </style>\r\n ```\r\n\r\n > 更多用法请参考：\r\n [theme\r\n default](https://github.com/zlgopen/awtk/blob/master/demos/assets/raw/styles/default.xml#L179)\r\n\r\n",
    "name": "slider_t",
    "parent": "widget_t",
    "annotation": {
      "scriptable": true
    },
    "level": 2
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "object_t*",
            "name": "obj",
            "desc": "object对象。"
          }
        ],
        "annotation": {
          "deconstructor": true,
          "scriptable": true
        },
        "desc": " 引用计数减1。引用计数为0时，销毁对象。\n\n\n\n",
        "name": "object_unref",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "object_t*",
            "name": "obj",
            "desc": "object对象。"
          }
        ],
        "annotation": {
          "constructor": true,
          "scriptable": true
        },
        "desc": " 引用计数加1。\n\n\n\n",
        "name": "object_ref",
        "return": {
          "type": "object_t*",
          "desc": "返回object对象。"
        }
      },
      {
        "params": [
          {
            "type": "const object_vtable_t*",
            "name": "vt",
            "desc": "虚函数表。"
          }
        ],
        "annotation": {},
        "desc": " 创建对象。\n\n > 仅供子类调用。\n\n\n\n",
        "name": "object_create",
        "return": {
          "type": "ret_t",
          "desc": "返回object对象。"
        }
      },
      {
        "params": [
          {
            "type": "object_t*",
            "name": "obj",
            "desc": "object对象。"
          },
          {
            "type": "const char*",
            "name": "name",
            "desc": "对象的名称。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 设置对象的名称。\n\n\n\n",
        "name": "object_set_name",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "object_t*",
            "name": "obj",
            "desc": "object对象。"
          },
          {
            "type": "object_t*",
            "name": "other",
            "desc": "比较的object对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 比较两个对象。\n\n\n\n",
        "name": "object_compare",
        "return": {
          "type": "int32_t",
          "desc": "返回比较结果。"
        }
      },
      {
        "params": [
          {
            "type": "object_t*",
            "name": "obj",
            "desc": "object对象。"
          },
          {
            "type": "const char*",
            "name": "name",
            "desc": "属性的名称。"
          },
          {
            "type": "value_t*",
            "name": "v",
            "desc": "返回属性的值。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 获取指定属性的值。\n\n\n\n",
        "name": "object_get_prop",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "object_t*",
            "name": "obj",
            "desc": "object对象。"
          },
          {
            "type": "const char*",
            "name": "name",
            "desc": "属性的名称。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 删除指定属性。\n\n\n\n",
        "name": "object_remove_prop",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "object_t*",
            "name": "obj",
            "desc": "object对象。"
          },
          {
            "type": "const char*",
            "name": "name",
            "desc": "属性的名称。"
          },
          {
            "type": "value_t*",
            "name": "v",
            "desc": "属性的值。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 设置指定属性的值。\n\n\n\n",
        "name": "object_set_prop",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "object_t*",
            "name": "obj",
            "desc": "object对象。"
          },
          {
            "type": "tk_visit_t",
            "name": "on_prop",
            "desc": "回调函数。"
          },
          {
            "type": "void*",
            "name": "ctx",
            "desc": "回调函数上下文。"
          }
        ],
        "annotation": {
          "scriptable": "sync_callback"
        },
        "desc": " 遍历所有属性。\n\n\n\n",
        "name": "object_foreach_prop",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      }
    ],
    "events": [],
    "properties": [
      {
        "name": "ref_count",
        "desc": " 引用计数。\n\n",
        "type": "int32_t",
        "annotation": {
          "readable": true,
          "scriptable": true
        }
      },
      {
        "name": "name",
        "desc": " 对象的名称。\n\n",
        "type": "char*",
        "annotation": {
          "readable": true,
          "scriptable": true
        }
      }
    ],
    "header": "tkc/object.h",
    "desc": "\n 对象接口。\n\n\n",
    "name": "object_t",
    "parent": "emitter_t",
    "annotation": {
      "scriptable": true
    },
    "alias": "object_base",
    "level": 2
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "parent",
            "desc": "父控件"
          },
          {
            "type": "xy_t",
            "name": "x",
            "desc": "x坐标"
          },
          {
            "type": "xy_t",
            "name": "y",
            "desc": "y坐标"
          },
          {
            "type": "wh_t",
            "name": "w",
            "desc": "宽度"
          },
          {
            "type": "wh_t",
            "name": "h",
            "desc": "高度"
          }
        ],
        "annotation": {
          "constructor": true,
          "scriptable": true
        },
        "desc": " 创建canvas_widget对象\r\n\r\n",
        "name": "canvas_widget_create",
        "return": {
          "type": "widget_t*",
          "desc": "对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "canvas_widget对象。"
          }
        ],
        "annotation": {
          "cast": true,
          "scriptable": true
        },
        "desc": " 转换为canvas_widget对象(供脚本语言使用)。\r\n\r\n",
        "name": "canvas_widget_cast",
        "return": {
          "type": "widget_t*",
          "desc": "canvas_widget对象。"
        }
      }
    ],
    "events": [],
    "properties": [],
    "header": "canvas_widget/canvas_widget.h",
    "desc": " 画布控件。\r\n\r\n 画布控件让开发者可以自己在控件上绘制需要的内容。\r\n\r\n canvas\\_widget\\_t是[widget\\_t](widget_t.md)的子类控件，widget\\_t的函数均适用于canvas\\_widget\\_t控件。\r\n\r\n 在xml中使用\"canvas\"标签创建画布控件。如：\r\n\r\n ```xml\r\n <canvas name=\"paint_vgcanvas\" x=\"0\" y=\"0\" w=\"100%\" h=\"100%\" />\r\n ```\r\n\r\n > 更多用法请参考：\r\n [canvas_widget.xml](https://github.com/zlgopen/awtk/blob/master/demos/assets/raw/ui/vgcanvas.xml)\r\n\r\n 在c代码中使用函数canvas\\_widget\\_create创建画布控件。如：\r\n\r\n ```c\r\n widget_t* canvas = canvas_widget_create(win, 0, 0, win->w, win->h);\r\n ```\r\n\r\n > 创建之后，需要用widget\\_on注册EVT\\_PAINT事件，并在EVT\\_PAINT事件处理函数中绘制。\r\n\r\n ```c\r\n widget_on(canvas, EVT_PAINT, on_paint_event, canvas);\r\n ```\r\n\r\n 绘制时，可以通过canvas接口去绘制，也可以通过vgcanvas接口去绘制。\r\n 先从evt获取canvas对象，再通过canvas\\_get\\_vgcanvas从canvas中获取vgcanvas对象。\r\n\r\n ```c\r\n\r\n static ret_t on_paint_event(void* ctx, event_t* evt) {\r\n  widget_t* canvas_widget = WIDGET(ctx);\r\n  canvas_t* c = paint_event_cast(evt)->c;\r\n  vgcanvas_t* vg = canvas_get_vgcanvas(c);\r\n  color_t bg = color_init(0xe0, 0xe0, 0xe0, 0xff);\r\n  color_t tc = color_init(0, 0, 0, 0xff);\r\n  rect_t r = rect_init(canvas_widget->x, canvas_widget->y, canvas_widget->w, canvas_widget->h);\r\n\r\n  vgcanvas_save(vg);\r\n  vgcanvas_clip_rect(vg, r.x, r.y, r.w, r.h);\r\n  vgcanvas_translate(vg, r.x, r.y);\r\n\r\n ...\r\n\r\n  vgcanvas_restore(vg);\r\n\r\n  return RET_OK;\r\n }\r\n ```\r\n\r\n > 完整示例请参考：\r\n [canvas demo](https://github.com/zlgopen/awtk-c-demos/blob/master/demos/canvas.c)\r\n\r\n 参考：\r\n\r\n * [canvas接口描述](canvas_t.md)\r\n * [vgcanvas接口描述](vgcanvas_t.md)\r\n\r\n",
    "name": "canvas_widget_t",
    "parent": "widget_t",
    "annotation": {
      "scriptable": true
    },
    "level": 2
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "parent",
            "desc": "父控件"
          },
          {
            "type": "xy_t",
            "name": "x",
            "desc": "x坐标"
          },
          {
            "type": "xy_t",
            "name": "y",
            "desc": "y坐标"
          },
          {
            "type": "wh_t",
            "name": "w",
            "desc": "宽度"
          },
          {
            "type": "wh_t",
            "name": "h",
            "desc": "高度"
          }
        ],
        "annotation": {
          "constructor": true
        },
        "desc": " 创建color_component对象\r\n\r\n",
        "name": "color_component_create",
        "return": {
          "type": "widget_t*",
          "desc": "对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "color_t",
            "name": "c",
            "desc": "颜色。"
          }
        ],
        "annotation": {},
        "desc": " 设置颜色。\r\n\r\n",
        "name": "color_component_set_color",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "color_component对象。"
          }
        ],
        "annotation": {},
        "desc": " 获取h分量。\r\n\r\n",
        "name": "color_component_get_h",
        "return": {
          "type": "float",
          "desc": "返回h分量。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "color_component对象。"
          }
        ],
        "annotation": {},
        "desc": " 获取s分量。\r\n\r\n",
        "name": "color_component_get_s",
        "return": {
          "type": "float",
          "desc": "返回s分量。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "color_component对象。"
          }
        ],
        "annotation": {},
        "desc": " 获取v分量。\r\n\r\n",
        "name": "color_component_get_v",
        "return": {
          "type": "float",
          "desc": "返回v分量。"
        }
      }
    ],
    "events": [],
    "properties": [],
    "header": "color_picker/color_component.h",
    "desc": " 颜色选择器的颜色分量。\r\n 控件的名称有严格规定：\r\n COLOR_PICKER_CHILD_SV: 水平为Value/Brightness(递增)，垂直为Saturation(递减)。\r\n COLOR_PICKER_CHILD_H: 水平为同色，垂直为Hue(递减)。\r\n",
    "name": "color_component_t",
    "parent": "widget_t",
    "level": 2
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "parent",
            "desc": "父控件"
          },
          {
            "type": "xy_t",
            "name": "x",
            "desc": "x坐标"
          },
          {
            "type": "xy_t",
            "name": "y",
            "desc": "y坐标"
          },
          {
            "type": "wh_t",
            "name": "w",
            "desc": "宽度"
          },
          {
            "type": "wh_t",
            "name": "h",
            "desc": "高度"
          }
        ],
        "annotation": {
          "constructor": true,
          "scriptable": true
        },
        "desc": " 创建color_picker对象\r\n\r\n",
        "name": "color_picker_create",
        "return": {
          "type": "widget_t*",
          "desc": "对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "const char*",
            "name": "color",
            "desc": "颜色。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 设置颜色。\r\n\r\n\r\n",
        "name": "color_picker_set_color",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "color_picker对象。"
          }
        ],
        "annotation": {
          "cast": true,
          "scriptable": true
        },
        "desc": " 转换为color_picker对象(供脚本语言使用)。\r\n\r\n\r\n",
        "name": "color_picker_cast",
        "return": {
          "type": "widget_t*",
          "desc": "color_picker对象。"
        }
      }
    ],
    "events": [
      {
        "name": "EVT_VALUE_WILL_CHANGE",
        "desc": " 值(颜色)即将改变事件。\r\n",
        "type": "event_t"
      },
      {
        "name": "EVT_VALUE_CHANGED",
        "desc": " 值(颜色)改变事件。\r\n",
        "type": "event_t"
      }
    ],
    "properties": [
      {
        "name": "value",
        "desc": " 颜色。\r\n",
        "type": "const char*",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      }
    ],
    "header": "color_picker/color_picker.h",
    "desc": " 颜色选择器。\r\n\r\n color\\_picker\\_t是[widget\\_t](widget_t.md)的子类控件，widget\\_t的函数均适用于color\\_picker\\_t控件。\r\n\r\n 在xml中使用\"color\\_picker\"标签创建颜色选择器控件。如：\r\n\r\n ```xml\r\n <color_picker x=\"0\" y=\"0\" w=\"100%\" h=\"100%\" value=\"orange\">\r\n  <color_component x=\"0\" y=\"0\" w=\"200\" h=\"200\" name=\"sv\"/>\r\n  <color_component x=\"210\" y=\"0\" w=\"20\" h=\"200\" name=\"h\"/>\r\n  <color_tile x=\"0\" y=\"210\" w=\"50%\" h=\"20\" name=\"new\" bg_color=\"green\"/>\r\n  <color_tile x=\"right\" y=\"210\" w=\"50%\" h=\"20\" name=\"old\" bg_color=\"blue\"/>\r\n </color_picker>\r\n ```\r\n\r\n > 更多用法请参考：\r\n [color\\_picker](https://github.com/zlgopen/awtk/blob/master/demos/assets/raw/ui/color_picker.xml)\r\n\r\n 其中的子控件必须按下列规则命名：\r\n\r\n * r 红色分量。可以是spin_box、edit和slider。\r\n * g 绿色分量。可以是spin_box、edit和slider。\r\n * b 蓝色分量。可以是spin_box、edit和slider。\r\n * h Hue分量。可以是spin_box、edit、slider和color_component。\r\n * s Saturation分量。可以是spin_box、edit和slider。\r\n * v Value/Brightness分量。可以是spin_box、edit和slider。\r\n * sv Saturation和Value/Brightness分量。可以是color_component。\r\n * old 旧的值。可以是spin_box、edit和color_tile。\r\n * new 新的值。可以是spin_box、edit和color_tile。\r\n\r\n",
    "name": "color_picker_t",
    "parent": "widget_t",
    "annotation": {
      "scriptable": true
    },
    "level": 2
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "parent",
            "desc": "父控件"
          },
          {
            "type": "xy_t",
            "name": "x",
            "desc": "x坐标"
          },
          {
            "type": "xy_t",
            "name": "y",
            "desc": "y坐标"
          },
          {
            "type": "wh_t",
            "name": "w",
            "desc": "宽度"
          },
          {
            "type": "wh_t",
            "name": "h",
            "desc": "高度"
          }
        ],
        "annotation": {
          "constructor": true,
          "scriptable": true
        },
        "desc": " 创建view对象\r\n\r\n",
        "name": "view_create",
        "return": {
          "type": "widget_t*",
          "desc": "对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "view对象。"
          }
        ],
        "annotation": {
          "cast": true,
          "scriptable": true
        },
        "desc": " 转换为view对象(供脚本语言使用)。\r\n\r\n",
        "name": "view_cast",
        "return": {
          "type": "widget_t*",
          "desc": "view对象。"
        }
      }
    ],
    "events": [],
    "properties": [],
    "header": "widgets/view.h",
    "desc": " 一个通用的容器控件。\r\n\r\n 它本身不提供布局功能，仅提供具有语义的标签，让xml更具有可读性。\r\n 子控件的布局可用layout\\_children属性指定。\r\n 请参考[布局参数](https://github.com/zlgopen/awtk/blob/master/docs/layout.md)。\r\n\r\n view\\_t是[widget\\_t](widget_t.md)的子类控件，widget\\_t的函数均适用于view\\_t控件。\r\n\r\n 在xml中使用\"view\"标签创建view。如：\r\n\r\n ```xml\r\n  <view x=\"0\" y=\"0\" w=\"100%\" h=\"100%\" children_layout=\"default(c=2,r=2,m=5,s=5)\">\r\n   </view>\r\n ```\r\n\r\n 可用通过style来设置控件的显示风格，如背景颜色等。如：\r\n\r\n ```xml\r\n <style name=\"default\" border_color=\"#a0a0a0\">\r\n   <normal     bg_color=\"#f0f0f0\" />\r\n </style>\r\n ```\r\n",
    "name": "view_t",
    "parent": "widget_t",
    "annotation": {
      "scriptable": true
    },
    "level": 2
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "parent",
            "desc": "父控件"
          },
          {
            "type": "xy_t",
            "name": "x",
            "desc": "x坐标"
          },
          {
            "type": "xy_t",
            "name": "y",
            "desc": "y坐标"
          },
          {
            "type": "wh_t",
            "name": "w",
            "desc": "宽度"
          },
          {
            "type": "wh_t",
            "name": "h",
            "desc": "高度"
          }
        ],
        "annotation": {
          "constructor": true,
          "scriptable": true
        },
        "desc": " 创建tab_button对象\r\n\r\n",
        "name": "tab_button_create",
        "return": {
          "type": "widget_t*",
          "desc": "对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "tab_button对象。"
          }
        ],
        "annotation": {
          "cast": true,
          "scriptable": true
        },
        "desc": " 转换tab_button对象(供脚本语言使用)。\r\n\r\n",
        "name": "tab_button_cast",
        "return": {
          "type": "widget_t*",
          "desc": "tab_button对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "tab_button对象。"
          },
          {
            "type": "uint32_t",
            "name": "value",
            "desc": "值"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 设置控件的值。\r\n\r\n",
        "name": "tab_button_set_value",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "tab_button对象。"
          },
          {
            "type": "char*",
            "name": "name",
            "desc": "当前项的图标。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 设置控件的图标。\r\n\r\n",
        "name": "tab_button_set_icon",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "tab_button对象。"
          },
          {
            "type": "char*",
            "name": "name",
            "desc": "当前项的图标。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 设置控件的active图标。\r\n\r\n",
        "name": "tab_button_set_active_icon",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      }
    ],
    "events": [
      {
        "name": "EVT_VALUE_WILL_CHANGE",
        "desc": " 值(激活状态)即将改变事件。\r\n",
        "type": "event_t"
      },
      {
        "name": "EVT_VALUE_CHANGED",
        "desc": " 值(激活状态)改变事件。\r\n",
        "type": "event_t"
      }
    ],
    "properties": [
      {
        "name": "value",
        "desc": " 值。\r\n",
        "type": "bool_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "active_icon",
        "desc": " 当前项的图标的名称。\r\n",
        "type": "char*",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "icon",
        "desc": " 非当前项的图标的名称。\r\n",
        "type": "char*",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      }
    ],
    "header": "widgets/tab_button.h",
    "desc": " 标签按钮控件。\r\n\r\n 标签按钮有点类似单选按钮，但点击标签按钮之后会自动切换当前的标签页。\r\n\r\n tab\\_button\\_t是[widget\\_t](widget_t.md)的子类控件，widget\\_t的函数均适用于tab\\_button\\_t控件。\r\n\r\n 在xml中使用\"tab\\_button\"标签创建标签按钮控件。如：\r\n\r\n ```xml\r\n   <tab_button_group x=\"c\" y=\"bottom:10\" w=\"90%\" h=\"30\" compact=\"true\" >\r\n     <tab_button text=\"General\"/>\r\n     <tab_button text=\"Network\" value=\"true\" />\r\n     <tab_button text=\"Security\"/>\r\n   </tab_button_group>\r\n ```\r\n\r\n 标签按钮一般放在标签按钮分组中，布局由标签按钮分组控件决定，不需要指定自己的布局参数和坐标。\r\n\r\n > 更多用法请参考：\r\n [tab control](https://github.com/zlgopen/awtk/blob/master/demos/assets/raw/ui/)\r\n\r\n 可用通过style来设置控件的显示风格，如字体的大小和颜色等等。如：\r\n\r\n ```xml\r\n <tab_button>\r\n  <style name=\"default\" border_color=\"#a0a0a0\"  text_color=\"black\">\r\n   <normal     bg_color=\"#d0d0d0\" />\r\n   <pressed    bg_color=\"#f0f0f0\" />\r\n   <over       bg_color=\"#e0e0e0\" />\r\n   <normal_of_active     bg_color=\"#f0f0f0\" />\r\n   <pressed_of_active    bg_color=\"#f0f0f0\" />\r\n   <over_of_active       bg_color=\"#f0f0f0\" />\r\n </style>\r\n </tab_button>\r\n ```\r\n\r\n",
    "name": "tab_button_t",
    "parent": "widget_t",
    "annotation": {
      "scriptable": true
    },
    "level": 2
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "parent",
            "desc": "父控件"
          },
          {
            "type": "xy_t",
            "name": "x",
            "desc": "x坐标"
          },
          {
            "type": "xy_t",
            "name": "y",
            "desc": "y坐标"
          },
          {
            "type": "wh_t",
            "name": "w",
            "desc": "宽度"
          },
          {
            "type": "wh_t",
            "name": "h",
            "desc": "高度"
          }
        ],
        "annotation": {
          "constructor": true,
          "scriptable": true
        },
        "desc": " 创建guage_pointer对象\r\n\r\n",
        "name": "guage_pointer_create",
        "return": {
          "type": "widget_t*",
          "desc": "对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "guage_pointer对象。"
          }
        ],
        "annotation": {
          "cast": true,
          "scriptable": true
        },
        "desc": " 转换为guage_pointer对象(供脚本语言使用)。\r\n\r\n",
        "name": "guage_pointer_cast",
        "return": {
          "type": "widget_t*",
          "desc": "guage_pointer对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "int32_t",
            "name": "angle",
            "desc": "指针角度。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 设置指针角度。12点钟方向为0度，顺时钟方向为正，单位为度。\r\n\r\n",
        "name": "guage_pointer_set_angle",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "const char*",
            "name": "image",
            "desc": "指针的图片。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 设置指针的图片。\r\n\r\n",
        "name": "guage_pointer_set_image",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      }
    ],
    "events": [],
    "properties": [
      {
        "name": "angle",
        "desc": " 指针角度。12点钟方向为0度，顺时钟方向为正，单位为度。\r\n",
        "type": "int32_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "image",
        "desc": " 指针图片。\r\n\r\n 图片须垂直向上，图片的中心点为旋转方向。\r\n\r\n",
        "type": "char*",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      }
    ],
    "header": "guage/guage_pointer.h",
    "desc": " 仪表指针控件。\r\n\r\n 仪表指针就是一张旋转的图片，图片可以是普通图片也可以是SVG图片。\r\n\r\n 在嵌入式平台上，对于旋转的图片，SVG图片的效率比位图高数倍，所以推荐使用SVG图片。\r\n\r\n guage\\_pointer\\_t是[widget\\_t](widget_t.md)的子类控件，widget\\_t的函数均适用于guage\\_pointer\\_t控件。\r\n\r\n 在xml中使用\"guage\\_pointer\"标签创建仪表指针控件。如：\r\n\r\n ```xml\r\n <guage_pointer x=\"c\" y=\"50\" w=\"24\" h=\"140\" value=\"-128\" image=\"guage_pointer\" />\r\n ```\r\n\r\n > 更多用法请参考：\r\n [guage.xml](https://github.com/zlgopen/awtk/blob/master/demos/assets/raw/ui/guage.xml)\r\n\r\n 在c代码中使用函数guage\\_pointer\\_create创建仪表指针控件。如：\r\n\r\n ```c\r\n  widget_t* guage_pointer = guage_pointer_create(guage, 10, 10, 100, 30);\r\n  guage_pointer_set_image(guage_pointer, \"guage_pointer\");\r\n ```\r\n\r\n > 创建之后，需要用guage\\_pointer\\_set\\_image设置仪表指针图片。\r\n\r\n\r\n",
    "name": "guage_pointer_t",
    "parent": "widget_t",
    "annotation": {
      "scriptable": true
    },
    "level": 2
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "parent",
            "desc": "父控件"
          },
          {
            "type": "xy_t",
            "name": "x",
            "desc": "x坐标"
          },
          {
            "type": "xy_t",
            "name": "y",
            "desc": "y坐标"
          },
          {
            "type": "wh_t",
            "name": "w",
            "desc": "宽度"
          },
          {
            "type": "wh_t",
            "name": "h",
            "desc": "高度"
          }
        ],
        "annotation": {
          "constructor": true,
          "scriptable": true
        },
        "desc": " 创建guage对象\r\n\r\n",
        "name": "guage_create",
        "return": {
          "type": "widget_t*",
          "desc": "对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "guage对象。"
          }
        ],
        "annotation": {
          "cast": true,
          "scriptable": true
        },
        "desc": " 转换为guage对象(供脚本语言使用)。\r\n\r\n",
        "name": "guage_cast",
        "return": {
          "type": "widget_t*",
          "desc": "guage对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "image对象。"
          },
          {
            "type": "char*",
            "name": "name",
            "desc": "图片名称，该图片必须存在于资源管理器。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 设置背景图片的名称。\r\n\r\n",
        "name": "guage_set_image",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "image对象。"
          },
          {
            "type": "image_draw_type_t",
            "name": "draw_type",
            "desc": "显示方式。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 设置图片的显示方式。\r\n\r\n > 绘制方式的属性值和枚举值:\r\n [image\\_draw\\_type\\_name\\_value](https://github.com/zlgopen/awtk/blob/master/src/base/enums.c#L98)\r\n\r\n\r\n",
        "name": "guage_set_draw_type",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      }
    ],
    "events": [],
    "properties": [
      {
        "name": "image",
        "desc": " 背景图片。\r\n",
        "type": "char*",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "draw_type",
        "desc": " 图片的绘制方式。\r\n",
        "type": "image_draw_type_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      }
    ],
    "header": "guage/guage.h",
    "desc": " 表盘控件。\r\n\r\n 表盘控件就是一张图片。\r\n\r\n guage\\_t是[widget\\_t](widget_t.md)的子类控件，widget\\_t的函数均适用于guage\\_t控件。\r\n\r\n 在xml中使用\"guage\"标签创建表盘控件。如：\r\n\r\n ```xml\r\n <guage x=\"c\" y=\"10\" w=\"240\" h=\"240\" image=\"guage_bg\" >\r\n ```\r\n\r\n > 更多用法请参考：\r\n [guage.xml](https://github.com/zlgopen/awtk/blob/master/demos/assets/raw/ui/guage.xml)\r\n\r\n 在c代码中使用函数guage\\_create创建表盘控件。如：\r\n\r\n ```c\r\n  widget_t* guage = guage_create(win, 10, 10, 200, 200);\r\n  guage_set_image(guage, \"guage_bg\");\r\n ```\r\n\r\n 可用通过style来设置控件的显示风格，如背景和边框等。如：\r\n\r\n ```xml\r\n <guage>\r\n  <style name=\"border\">\r\n   <normal border_color=\"#000000\" bg_color=\"#e0e0e0\" text_color=\"black\"/>\r\n  </style>\r\n </guage>\r\n ```\r\n\r\n > 更多用法请参考：\r\n [theme default](https://github.com/zlgopen/awtk/blob/master/demos/assets/raw/styles/default.xml)\r\n\r\n",
    "name": "guage_t",
    "parent": "widget_t",
    "annotation": {
      "scriptable": true
    },
    "level": 2
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "parent",
            "desc": "父控件"
          },
          {
            "type": "xy_t",
            "name": "x",
            "desc": "x坐标"
          },
          {
            "type": "xy_t",
            "name": "y",
            "desc": "y坐标"
          },
          {
            "type": "wh_t",
            "name": "w",
            "desc": "宽度"
          },
          {
            "type": "wh_t",
            "name": "h",
            "desc": "高度"
          }
        ],
        "annotation": {
          "constructor": true,
          "scriptable": true
        },
        "desc": " 创建image_animation对象\r\n\r\n",
        "name": "image_animation_create",
        "return": {
          "type": "widget_t*",
          "desc": "对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "image_animation对象。"
          },
          {
            "type": "bool_t",
            "name": "loop",
            "desc": "是否循环播放。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 设置是否循环播放。\r\n\r\n",
        "name": "image_animation_set_loop",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "image_animation对象。"
          },
          {
            "type": "const char*",
            "name": "image",
            "desc": "图片前缀。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 设置图片前缀。\r\n\r\n",
        "name": "image_animation_set_image",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "image_animation对象。"
          },
          {
            "type": "uint32_t",
            "name": "interval",
            "desc": "间隔时间(毫秒)。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 设置播放间隔时间。\r\n\r\n",
        "name": "image_animation_set_interval",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "image_animation对象。"
          },
          {
            "type": "uint32_t",
            "name": "delay",
            "desc": "延迟播放时间(毫秒)。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 设置延迟播放时间(仅适用于自动播放)。\r\n\r\n",
        "name": "image_animation_set_delay",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "image_animation对象。"
          },
          {
            "type": "bool_t",
            "name": "auto_play",
            "desc": "是否自动播放。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 设置是否自动播放。\r\n\r\n",
        "name": "image_animation_set_auto_play",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "image_animation对象。"
          },
          {
            "type": "const char*",
            "name": "sequence",
            "desc": "播放序列。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 设置播放序列。比如image为\"fire\"，sequence为\"123\", 将依次播放\"fire1\", \"fire2\", \"fire3\"。\r\n\r\n",
        "name": "image_animation_set_sequence",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "image_animation对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 播放。\r\n\r\n",
        "name": "image_animation_play",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "image_animation对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 停止(并重置index为0)。\r\n\r\n",
        "name": "image_animation_stop",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "image_animation对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 暂停。\r\n\r\n",
        "name": "image_animation_pause",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "image_animation对象。"
          }
        ],
        "annotation": {
          "cast": true,
          "scriptable": true
        },
        "desc": " 转换为image_animation对象(供脚本语言使用)。\r\n\r\n",
        "name": "image_animation_cast",
        "return": {
          "type": "widget_t*",
          "desc": "image_animation对象。"
        }
      }
    ],
    "events": [],
    "properties": [
      {
        "name": "image",
        "desc": " 图片名称的前缀。\r\n",
        "type": "char*",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "sequence",
        "desc": " 播放的序列，字符可选值为:0-9,a-z,A-Z。\r\n",
        "type": "char*",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "loop",
        "desc": " 是否循环播放。\r\n",
        "type": "bool_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "auto_play",
        "desc": " 是否自动播放。\r\n",
        "type": "bool_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "interval",
        "desc": " 每张图片播放的时间(毫秒)。\r\n",
        "type": "uint32_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "delay",
        "desc": " 自动播放时延迟播放的时间(毫秒)。\r\n",
        "type": "uint32_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      }
    ],
    "header": "image_animation/image_animation.h",
    "desc": " 图片动画控件，指定一个图片前缀，依次显示指定序列的图片，从而形成动画效果。\r\n\r\n image\\_animation\\_t是[widget\\_t](widget_t.md)的子类控件，widget\\_t的函数均适用于image\\_animation\\_t控件。\r\n\r\n 在xml中使用\"image\\_animation\"标签创建图片动画控件。如：\r\n\r\n ```xml\r\n <image_animation image=\"ani\" sequence=\"123456789abc\" auto_play=\"true\" interval=\"50\"/>\r\n ```\r\n\r\n > 更多用法请参考：\r\n [image_animation.xml](https://github.com/zlgopen/awtk/blob/master/demos/assets/raw/ui/image_animation.xml)\r\n\r\n 在c代码中使用函数image\\_animation\\_create创建图片动画控件。如：\r\n\r\n ```c\r\n image_animation = image_animation_create(win, 10, 10, 200, 200);\r\n image_animation_set_image(image_animation, \"ani\");\r\n image_animation_set_interval(image_animation, 50);\r\n image_animation_set_sequence(image_animation, \"123456789abc\");\r\n image_animation_play(image_animation);\r\n ```\r\n\r\n > 完整示例请参考：\r\n [image_animation\r\n demo](https://github.com/zlgopen/awtk-c-demos/blob/master/demos/image_animation.c)\r\n\r\n 可用通过style来设置控件的显示风格，如背景颜色和边框等等，不过一般情况并不需要。\r\n\r\n",
    "name": "image_animation_t",
    "parent": "widget_t",
    "annotation": {
      "scriptable": true
    },
    "level": 2
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "parent",
            "desc": "父控件"
          },
          {
            "type": "xy_t",
            "name": "x",
            "desc": "x坐标"
          },
          {
            "type": "xy_t",
            "name": "y",
            "desc": "y坐标"
          },
          {
            "type": "wh_t",
            "name": "w",
            "desc": "宽度"
          },
          {
            "type": "wh_t",
            "name": "h",
            "desc": "高度"
          }
        ],
        "annotation": {
          "constructor": true,
          "scriptable": true
        },
        "desc": " 创建image_value对象\r\n\r\n",
        "name": "image_value_create",
        "return": {
          "type": "widget_t*",
          "desc": "对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "image_value对象。"
          },
          {
            "type": "const char*",
            "name": "image",
            "desc": "图片前缀。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 设置图片前缀。\r\n\r\n",
        "name": "image_value_set_image",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "image_value对象。"
          },
          {
            "type": "const char*",
            "name": "format",
            "desc": "格式。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 设置格式。\r\n\r\n",
        "name": "image_value_set_format",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "image_value对象。"
          },
          {
            "type": "float_t",
            "name": "value",
            "desc": "值。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 设置值。\r\n\r\n",
        "name": "image_value_set_value",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "image_value对象。"
          }
        ],
        "annotation": {
          "cast": true,
          "scriptable": true
        },
        "desc": " 转换为image_value对象(供脚本语言使用)。\r\n\r\n",
        "name": "image_value_cast",
        "return": {
          "type": "widget_t*",
          "desc": "image_value对象。"
        }
      }
    ],
    "events": [],
    "properties": [
      {
        "name": "image",
        "desc": " 图片名称的前缀。\r\n",
        "type": "char*",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "format",
        "desc": " 数值到字符串转换时的格式，缺省为\"%d\"。\r\n",
        "type": "char*",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "value",
        "desc": " 值。\r\n",
        "type": "float_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      }
    ],
    "header": "image_value/image_value.h",
    "desc": " 图片值控件。\r\n\r\n 可以用图片来表示如电池电量、WIFI信号强度和其它各种数值的值。\r\n\r\n 其原理如下：\r\n\r\n  * 1.把value以format为格式转换成字符串。\r\n  * 2.把每个字符与image(图片文件名前缀)映射成一个图片名。\r\n  * 3.最后把这些图片显示出来。\r\n\r\nimage\\_value\\_t是[widget\\_t](widget_t.md)的子类控件，widget\\_t的函数均适用于image\\_value\\_t控件。\r\n\r\n在xml中使用\"image\\_value\"标签创建图片值控件。如：\r\n\r\n ```xml\r\n <image_value  value=\"0\" image=\"num_\" />\r\n ```\r\n\r\n > 更多用法请参考：\r\n [image\\_value](https://github.com/zlgopen/awtk/blob/master/demos/assets/raw/ui/image_value.xml)\r\n\r\n 在c代码中使用函数image\\_value\\_create创建图片值控件。如：\r\n\r\n ```c\r\n image_value = image_value_create(win, 10, 10, 200, 200);\r\n image_value_set_image(image_value, \"num_\");\r\n image_value_set_value(image_value, 100);\r\n ```\r\n\r\n > 完整示例请参考：\r\n [image_value demo](https://github.com/zlgopen/awtk-c-demos/blob/master/demos/image_value.c)\r\n\r\n 可用通过style来设置控件的显示风格，如背景颜色和边框等等，不过一般情况并不需要。\r\n\r\n",
    "name": "image_value_t",
    "parent": "widget_t",
    "annotation": {
      "scriptable": true
    },
    "level": 2
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "parent",
            "desc": "父控件"
          },
          {
            "type": "xy_t",
            "name": "x",
            "desc": "x坐标"
          },
          {
            "type": "xy_t",
            "name": "y",
            "desc": "y坐标"
          },
          {
            "type": "wh_t",
            "name": "w",
            "desc": "宽度"
          },
          {
            "type": "wh_t",
            "name": "h",
            "desc": "高度"
          }
        ],
        "annotation": {
          "constructor": true
        },
        "desc": " 创建candidates对象\r\n\r\n",
        "name": "candidates_create",
        "return": {
          "type": "widget_t*",
          "desc": "对象。"
        }
      }
    ],
    "events": [],
    "properties": [],
    "header": "keyboard/candidates.h",
    "desc": " 输入法候选字词控件。\r\n",
    "name": "candidates_t",
    "parent": "widget_t",
    "level": 2
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "event_t*",
            "name": "event",
            "desc": "event对象。"
          }
        ],
        "annotation": {
          "cast": true,
          "scriptable": true
        },
        "desc": " 把event对象转window_event_t对象。主要给脚本语言使用。\n\n\n",
        "name": "window_event_cast",
        "return": {
          "type": "window_event_t*",
          "desc": "对象。"
        }
      },
      {
        "params": [
          {
            "type": "pointer_event_t*",
            "name": "evt",
            "desc": "指针事件对象。"
          },
          {
            "type": "system_info_t*",
            "name": "info",
            "desc": "系统信息。"
          }
        ],
        "annotation": {},
        "desc": " 根据屏幕旋转方向修正pointer_event中的坐标。\n\n\n",
        "name": "pointer_event_rotate",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      }
    ],
    "events": [],
    "properties": [
      {
        "name": "window",
        "desc": " canvas。\n\n",
        "type": "widget_t*",
        "annotation": {
          "readable": true,
          "scriptable": true
        }
      }
    ],
    "header": "base/events.h",
    "desc": " 窗口事件，由窗口管理器触发。\n\n",
    "name": "window_event_t",
    "annotation": {
      "scriptable": true
    },
    "parent": "event_t",
    "level": 2
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "ui_binary_writer_t*",
            "name": "writer",
            "desc": "writer对象。"
          },
          {
            "type": "wbuffer_t*",
            "name": "wbuffer",
            "desc": "保存结果的buffer。"
          }
        ],
        "annotation": {
          "constructor": true
        },
        "desc": "\n 初始化ui\\_binary\\_writer对象。\n\n\n\n",
        "name": "ui_binary_writer_init",
        "return": {
          "type": "ui_builder_t*",
          "desc": "返回ui\\_builder对象。"
        }
      }
    ],
    "events": [],
    "properties": [],
    "header": "ui_loader/ui_binary_writer.h",
    "desc": "\n 生成二进制格式的UI描述数据。\n\n\n",
    "name": "ui_binary_writer_t",
    "parent": "ui_builder_t",
    "level": 2
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "const char*",
            "name": "name",
            "desc": "窗口的缺省名称。"
          }
        ],
        "annotation": {
          "constructor": true
        },
        "desc": "\n 获取缺省的ui\\_builder对象。\n\n\n\n",
        "name": "ui_builder_default",
        "return": {
          "type": "ui_builder_t*",
          "desc": "返回ui\\_builder对象。"
        }
      }
    ],
    "events": [],
    "properties": [],
    "header": "ui_loader/ui_builder_default.h",
    "desc": "\n\n 构建widget树。\n\n\n",
    "name": "ui_builder_default_t",
    "parent": "ui_builder_t",
    "annotation": {
      "fake": true
    },
    "level": 2
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [],
        "annotation": {
          "constructor": true
        },
        "desc": "\n 获取二进制格式格式的UI资源加载器对象。\n\n\n\n",
        "name": "default_ui_loader",
        "return": {
          "type": "ui_loader_t*",
          "desc": "返回UI加载器对象。"
        }
      }
    ],
    "events": [],
    "properties": [],
    "header": "ui_loader/ui_loader_default.h",
    "desc": "\n 二进制格式的UI资源加载器。\n\n\n\n",
    "name": "ui_loader_default_t",
    "parent": "ui_loader_t",
    "annotation": {
      "fake": true
    },
    "level": 2
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [],
        "annotation": {
          "constructor": true
        },
        "desc": "\n 获取XML格式的UI资源加载器对象。\n\n\n\n",
        "name": "xml_ui_loader",
        "return": {
          "type": "ui_loader_t*",
          "desc": "返回UI加载器对象。"
        }
      }
    ],
    "events": [],
    "properties": [],
    "header": "ui_loader/ui_loader_xml.h",
    "desc": "\n XML格式的UI资源加载器。\n\n\n\n",
    "name": "ui_loader_xml_t",
    "parent": "ui_loader_t",
    "annotation": {
      "fake": true
    },
    "level": 2
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "ui_xml_writer_t*",
            "name": "writer",
            "desc": "writer对象。"
          },
          {
            "type": "str_t*",
            "name": "str",
            "desc": "保存结果的str。"
          }
        ],
        "annotation": {
          "constructor": true
        },
        "desc": "\n 初始化ui\\_xml\\_writer对象。\n\n\n\n",
        "name": "ui_xml_writer_init",
        "return": {
          "type": "ui_builder_t*",
          "desc": "返回ui\\_builder对象。"
        }
      }
    ],
    "events": [],
    "properties": [],
    "header": "ui_loader/ui_xml_writer.h",
    "desc": "\n 生成XML格式的UI描述数据。\n\n\n",
    "name": "ui_xml_writer_t",
    "parent": "ui_builder_t",
    "level": 2
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "parent",
            "desc": "父控件"
          },
          {
            "type": "xy_t",
            "name": "x",
            "desc": "x坐标"
          },
          {
            "type": "xy_t",
            "name": "y",
            "desc": "y坐标"
          },
          {
            "type": "wh_t",
            "name": "w",
            "desc": "宽度"
          },
          {
            "type": "wh_t",
            "name": "h",
            "desc": "高度"
          }
        ],
        "annotation": {
          "constructor": true,
          "scriptable": true
        },
        "desc": " 创建progress_circle对象\r\n\r\n\r\n",
        "name": "progress_circle_create",
        "return": {
          "type": "widget_t*",
          "desc": "对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "progress_circle对象。"
          }
        ],
        "annotation": {
          "cast": true,
          "scriptable": true
        },
        "desc": " 转换为progress_circle对象(供脚本语言使用)。\r\n\r\n\r\n",
        "name": "progress_circle_cast",
        "return": {
          "type": "widget_t*",
          "desc": "progress_circle对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "float_t",
            "name": "value",
            "desc": "值。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 设置值。\r\n\r\n\r\n",
        "name": "progress_circle_set_value",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "uint32_t",
            "name": "max",
            "desc": "最大值。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 设置最大值。\r\n\r\n\r\n",
        "name": "progress_circle_set_max",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "uint32_t",
            "name": "line_width",
            "desc": "环线的厚度。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 设置环线的厚度。\r\n\r\n\r\n",
        "name": "progress_circle_set_line_width",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "int32_t",
            "name": "start_angle",
            "desc": "起始角度。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 设置起始角度。\r\n\r\n\r\n",
        "name": "progress_circle_set_start_angle",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "const char*",
            "name": "unit",
            "desc": "单位。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 设置单位。\r\n\r\n\r\n",
        "name": "progress_circle_set_unit",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "bool_t",
            "name": "show_text",
            "desc": "是否显示文本。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 设置是否显示文本。\r\n\r\n\r\n",
        "name": "progress_circle_set_show_text",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "bool_t",
            "name": "counter_clock_wise",
            "desc": "是否为逆时针方向。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 设置是否为逆时针方向。\r\n\r\n\r\n",
        "name": "progress_circle_set_counter_clock_wise",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      }
    ],
    "events": [
      {
        "name": "EVT_VALUE_WILL_CHANGE",
        "desc": " 值即将改变事件。\r\n",
        "type": "event_t"
      },
      {
        "name": "EVT_VALUE_CHANGED",
        "desc": " 值改变事件。\r\n",
        "type": "event_t"
      }
    ],
    "properties": [
      {
        "name": "value",
        "desc": " 值(缺省为0)。\r\n",
        "type": "float_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "max",
        "desc": " 最大值(缺省为100)。\r\n",
        "type": "uint32_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "start_angle",
        "desc": " 起始角度(单位为度，缺省-90)。\r\n",
        "type": "int32_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "line_width",
        "desc": " 环线的厚度(缺省为8)。\r\n",
        "type": "uint32_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "unit",
        "desc": " 单元(缺省无)。\r\n",
        "type": "char*",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "counter_clock_wise",
        "desc": " 是否为逆时针方向(缺省为FALSE)。\r\n",
        "type": "bool_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "show_text",
        "desc": " 是否显示文本(缺省为TRUE)。\r\n",
        "type": "bool_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      }
    ],
    "header": "progress_circle/progress_circle.h",
    "desc": " 进度圆环控件。\r\n\r\n progress\\_circle\\_t是[widget\\_t](widget_t.md)的子类控件，widget\\_t的函数均适用于progress\\_circle\\_t控件。\r\n\r\n 在xml中使用\"progress\\_circle\"标签创建进度圆环控件。如：\r\n\r\n ```xml\r\n  <progress_circle max=\"360\" show_text=\"true\" start_angle=\"90\" />\r\n ```\r\n\r\n > 更多用法请参考：\r\n [progress_circle.xml](https://github.com/zlgopen/awtk/blob/master/demos/assets/raw/ui/progress_circle.xml)\r\n\r\n 在c代码中使用函数progress\\_circle\\_create创建进度圆环控件。如：\r\n\r\n ```c\r\n  progress_circle = progress_circle_create(win, 10, 10, 200, 200);\r\n  progress_circle_set_max(progress_circle, 360);\r\n  widget_set_value(progress_circle, 128);\r\n ```\r\n\r\n > 完整示例请参考：\r\n [progress_circle\r\n demo](https://github.com/zlgopen/awtk-c-demos/blob/master/demos/progress_circle.c)\r\n\r\n 可用通过style来设置控件的显示风格，如字体的大小和颜色等等。如：\r\n\r\n ```xml\r\n <style name=\"default\">\r\n   <normal text_color=\"green\" fg_color=\"black\" />\r\n </style>\r\n ```\r\n\r\n > 更多用法请参考：\r\n [theme\r\n default](https://github.com/zlgopen/awtk/blob/master/demos/assets/raw/styles/default.xml#L467)\r\n\r\n",
    "name": "progress_circle_t",
    "parent": "widget_t",
    "annotation": {
      "scriptable": true
    },
    "level": 2
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "parent",
            "desc": "父控件"
          },
          {
            "type": "xy_t",
            "name": "x",
            "desc": "x坐标"
          },
          {
            "type": "xy_t",
            "name": "y",
            "desc": "y坐标"
          },
          {
            "type": "wh_t",
            "name": "w",
            "desc": "宽度"
          },
          {
            "type": "wh_t",
            "name": "h",
            "desc": "高度"
          }
        ],
        "annotation": {
          "constructor": true,
          "scriptable": true
        },
        "desc": " 创建rich_text对象\n\n\n",
        "name": "rich_text_create",
        "return": {
          "type": "widget_t*",
          "desc": "对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "char*",
            "name": "text",
            "desc": "文本。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 设置文本。\n\n\n",
        "name": "rich_text_set_text",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      }
    ],
    "events": [],
    "properties": [
      {
        "name": "line_gap",
        "desc": " 行间距。\n\n",
        "type": "int32_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      }
    ],
    "header": "rich_text/rich_text.h",
    "desc": " 图文混排控件，实现简单的图文混排。\n\n rich\\_text\\_t是[widget\\_t](widget_t.md)的子类控件，widget\\_t的函数均适用于rich\\_text\\_t控件。\n\n 在xml中使用\"rich\\_text\"标签创建图文混排控件。如：\n\n ```xml\n <rich_text x=\"0\" y=\"0\" w=\"100%\" h=\"60\"\n text=\"<image name=&quota;bricks&quota;/><font align_v=&quota;middle&quota;>hello awtk!</font>\" />\n ```\n >\n\n > 更多用法请参考：\n [rich_text.xml](https://github.com/zlgopen/awtk/blob/master/demos/assets/raw/ui/rich_text.xml)\n\n 在c代码中使用函数rich\\_text\\_create创建图文混排控件。如：\n\n ```c\n  widget_t* rich_text = rich_text_create(win, 0, 0, 0, 0);\n  widget_set_text_utf8(rich_text,\n                    \"<image name=\\\"bricks\\\"/><font color=\\\"gold\\\" align_v=\\\"bottom\\\" \"\n                    \"size=\\\"24\\\">hello awtk!</font><font color=\\\"green\\\" size=\\\"20\\\">ProTip! The \"\n                    \"feed shows you events from people you follow and repositories you watch. \"\n                    \"nhello world. </font><font color=\\\"red\\\" \"\n                    \"size=\\\"20\\\">确定取消中文字符测试。确定。取消。中文字符测试。</font>\");\n\n widget_set_self_layout_params(rich_text, \"center\", \"middle\", \"100%\", \"100%\");\n ```\n\n > 完整示例请参考：\n [rich_text demo](https://github.com/zlgopen/awtk-c-demos/blob/master/demos/rich_text.c)\n\n 可用通过style来设置控件的显示风格，如背景颜色等等。而字体的大小和颜色则由文本内部的属性决定。\n\n 目前支持image和font两个tag：\n\n * image 支持的属性有：\n   * name 图片的名称。\n   * w 图片的宽度。\n   * h 图片的高度。\n\n * font 支持的属性有：\n   * color 颜色。\n   * size 大小。\n   * align_v 垂直方向对齐的方式(top|middle|bottom)。\n   * bold 粗体(暂不支持)\n   * italic 斜体(暂不支持)\n   * underline 下划线(暂不支持)\n\n\n",
    "name": "rich_text_t",
    "parent": "widget_t",
    "annotation": {
      "scriptable": true
    },
    "level": 2
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "parent",
            "desc": "父控件"
          },
          {
            "type": "xy_t",
            "name": "x",
            "desc": "x坐标"
          },
          {
            "type": "xy_t",
            "name": "y",
            "desc": "y坐标"
          },
          {
            "type": "wh_t",
            "name": "w",
            "desc": "宽度"
          },
          {
            "type": "wh_t",
            "name": "h",
            "desc": "高度"
          }
        ],
        "annotation": {
          "constructor": true,
          "scriptable": true
        },
        "desc": " 创建list_item对象\r\n\r\n",
        "name": "list_item_create",
        "return": {
          "type": "widget_t*",
          "desc": "对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "list_item对象。"
          }
        ],
        "annotation": {
          "cast": true,
          "scriptable": true
        },
        "desc": " 转换为list_item对象(供脚本语言使用)。\r\n\r\n",
        "name": "list_item_cast",
        "return": {
          "type": "widget_t*",
          "desc": "list_item对象。"
        }
      }
    ],
    "events": [],
    "properties": [],
    "header": "scroll_view/list_item.h",
    "desc": " 列表项控件。\r\n\r\n 列表项控件是一个简单的容器控件，一般作为列表视图中滚动视图的子控件。\r\n\r\n list\\_item\\_t是[widget\\_t](widget_t.md)的子类控件，widget\\_t的函数均适用于list\\_item\\_t控件。\r\n\r\n 在xml中使用\"list\\_item\"标签创建列表项控件。如：\r\n\r\n ```xml\r\n <list_view x=\"0\"  y=\"30\" w=\"100%\" h=\"-80\" item_height=\"60\">\r\n   <scroll_view name=\"view\" x=\"0\"  y=\"0\" w=\"100%\" h=\"100%\">\r\n     <list_item style=\"odd\" children_layout=\"default(rows=1,cols=0)\">\r\n       <image draw_type=\"icon\" w=\"30\" image=\"earth\"/>\r\n       <label w=\"-30\" text=\"1.Hello AWTK !\">\r\n         <switch x=\"r:10\" y=\"m\" w=\"60\" h=\"20\"/>\r\n       </label>\r\n     </list_item>\r\n     ...\r\n   </scroll_view>\r\n  </list_view>\r\n ```\r\n\r\n > 更多用法请参考：[list\\_view\\_m.xml](\r\nhttps://github.com/zlgopen/awtk/blob/master/demos/assets/raw/ui/list_view_m.xml)\r\n\r\n 在c代码中使用函数list\\_item\\_create创建列表项控件。如：\r\n\r\n ```c\r\n  widget_t* list_item = list_item_create(scroll_view, 0, 0, 0, 0);\r\n ```\r\n\r\n > 列表项控件大小一般由列表控制，不需指定xywh参数。\r\n\r\n 可以用style来实现可点击或不可点击的效果。如：\r\n\r\n ```xml\r\n <style name=\"odd_clickable\" border_color=\"#a0a0a0\"  border=\"bottom\" text_color=\"black\">\r\n   <normal     bg_color=\"#f5f5f5\" />\r\n   <pressed    bg_color=\"#c0c0c0\" />\r\n   <over       bg_color=\"#f5f5f5\" />\r\n </style>\r\n ```\r\n\r\n > 更多用法请参考：[theme default](\r\nhttps://github.com/zlgopen/awtk/blob/master/demos/assets/raw/styles/default.xml#L372)\r\n\r\n",
    "name": "list_item_t",
    "parent": "widget_t",
    "annotation": {
      "scriptable": true
    },
    "level": 2
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "parent",
            "desc": "父控件"
          },
          {
            "type": "xy_t",
            "name": "x",
            "desc": "x坐标"
          },
          {
            "type": "xy_t",
            "name": "y",
            "desc": "y坐标"
          },
          {
            "type": "wh_t",
            "name": "w",
            "desc": "宽度"
          },
          {
            "type": "wh_t",
            "name": "h",
            "desc": "高度"
          }
        ],
        "annotation": {
          "constructor": true,
          "scriptable": true
        },
        "desc": " 创建app_bar对象\r\n\r\n",
        "name": "app_bar_create",
        "return": {
          "type": "widget_t*",
          "desc": "对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "app_bar对象。"
          }
        ],
        "annotation": {
          "cast": true,
          "scriptable": true
        },
        "desc": " 转换为app_bar对象(供脚本语言使用)。\r\n\r\n",
        "name": "app_bar_cast",
        "return": {
          "type": "widget_t*",
          "desc": "app_bar对象。"
        }
      }
    ],
    "events": [],
    "properties": [],
    "header": "widgets/app_bar.h",
    "desc": " app_bar控件。\r\n\r\n 一个简单的容器控件，一般在窗口的顶部，用于显示本窗口的状态和信息。\r\n\r\n 它本身不提供布局功能，仅提供具有语义的标签，让xml更具有可读性。\r\n 子控件的布局可用layout\\_children属性指定。\r\n 请参考[布局参数](https://github.com/zlgopen/awtk/blob/master/docs/layout.md)。\r\n\r\n app\\_bar\\_t是[widget\\_t](widget_t.md)的子类控件，widget\\_t的函数均适用于app\\_bar\\_t控件。\r\n\r\n 在xml中使用\"app\\_bar\"标签创建app\\_bar。如：\r\n\r\n ```xml\r\n <app_bar x=\"0\" y=\"0\" w=\"100%\" h=\"30\" >\r\n   <label x=\"0\" y=\"0\" w=\"100%\" h=\"100%\" text=\"Basic Controls\" />\r\n </app_bar>\r\n ```\r\n\r\n 在c代码中使用函数app\\_bar\\_create创建app\\_bar。如：\r\n\r\n ```c\r\n  widget_t* app_bar = app_bar_create(win, 0, 0, 320, 30);\r\n ```\r\n\r\n 可用通过style来设置控件的显示风格，如背景颜色等。如：\r\n\r\n ```xml\r\n <style name=\"default\" border_color=\"#a0a0a0\">\r\n   <normal     bg_color=\"#f0f0f0\" />\r\n </style>\r\n ```\r\n\r\n",
    "name": "app_bar_t",
    "parent": "widget_t",
    "annotation": {
      "scriptable": true
    },
    "level": 2
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "parent",
            "desc": "父控件"
          },
          {
            "type": "xy_t",
            "name": "x",
            "desc": "x坐标"
          },
          {
            "type": "xy_t",
            "name": "y",
            "desc": "y坐标"
          },
          {
            "type": "wh_t",
            "name": "w",
            "desc": "宽度"
          },
          {
            "type": "wh_t",
            "name": "h",
            "desc": "高度"
          }
        ],
        "annotation": {
          "constructor": true,
          "scriptable": true
        },
        "desc": " 创建button_group对象\r\n\r\n",
        "name": "button_group_create",
        "return": {
          "type": "widget_t*",
          "desc": "对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "button_group对象。"
          }
        ],
        "annotation": {
          "cast": true,
          "scriptable": true
        },
        "desc": " 转换为button_group对象(供脚本语言使用)。\r\n\r\n",
        "name": "button_group_cast",
        "return": {
          "type": "widget_t*",
          "desc": "button_group对象。"
        }
      }
    ],
    "events": [],
    "properties": [],
    "header": "widgets/button_group.h",
    "desc": " Button Group控件。一个简单的容器控件，用于容纳一组按钮控件。\r\n\r\n 它本身不提供布局功能，仅提供具有语义的标签，让xml更具有可读性。\r\n 子控件的布局可用layout\\_children属性指定。\r\n 请参考[布局参数](https://github.com/zlgopen/awtk/blob/master/docs/layout.md)。\r\n\r\n button\\_group\\_t是[widget\\_t](widget_t.md)的子类控件，widget\\_t的函数均适用于button\\_group\\_t控件。\r\n\r\n 在xml中使用\"button\\_group\"标签创建button\\_group。如：\r\n\r\n ```xml\r\n <button_group x=\"0\" y=\"m\" w=\"100%\" h=\"40\" children_layout=\"default(c=4,r=1,s=5,m=5)\">\r\n   <button name=\"open:basic\" text=\"Basic\"/>\r\n   <button name=\"open:button\" text=\"Buttons\"/>\r\n   <button name=\"open:edit\" text=\"Edits\"/>\r\n   <button name=\"open:keyboard\" text=\"KeyBoard\"/>\r\n </button_group>\r\n ```\r\n\r\n 可用通过style来设置控件的显示风格，如背景颜色等。如：\r\n\r\n ```xml\r\n <style name=\"default\" border_color=\"#a0a0a0\">\r\n   <normal     bg_color=\"#f0f0f0\" />\r\n </style>\r\n ```\r\n",
    "name": "button_group_t",
    "parent": "widget_t",
    "annotation": {
      "scriptable": true
    },
    "level": 2
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "parent",
            "desc": "父控件"
          },
          {
            "type": "xy_t",
            "name": "x",
            "desc": "x坐标"
          },
          {
            "type": "xy_t",
            "name": "y",
            "desc": "y坐标"
          },
          {
            "type": "wh_t",
            "name": "w",
            "desc": "宽度"
          },
          {
            "type": "wh_t",
            "name": "h",
            "desc": "高度"
          }
        ],
        "annotation": {
          "constructor": true,
          "scriptable": true
        },
        "desc": " 创建button对象\r\n\r\n",
        "name": "button_create",
        "return": {
          "type": "widget_t*",
          "desc": "对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "button对象。"
          }
        ],
        "annotation": {
          "cast": true,
          "scriptable": true
        },
        "desc": " 转换为button对象(供脚本语言使用)。\r\n\r\n",
        "name": "button_cast",
        "return": {
          "type": "widget_t*",
          "desc": "button对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "int32_t",
            "name": "repeat",
            "desc": "触发EVT_CLICK事件的时间间隔(毫秒)。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 设置触发EVT\\_CLICK事件的时间间隔。为0则不重复触发EVT\\_CLICK事件。\r\n\r\n",
        "name": "button_set_repeat",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      }
    ],
    "events": [
      {
        "name": "EVT_CLICK",
        "desc": " 点击事件。\r\n",
        "type": "pointer_event_t"
      },
      {
        "name": "EVT_LONG_PRESS",
        "desc": " 长按事件。\r\n",
        "type": "pointer_event_t"
      }
    ],
    "properties": [
      {
        "name": "repeat",
        "desc": " 重复触发EVT\\_CLICK事件的时间间隔。\r\n 为0则不重复触发EVT\\_CLICK事件。\r\n",
        "type": "int32_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      }
    ],
    "header": "widgets/button.h",
    "desc": " 按钮控件。\r\n\r\n 点击按钮之后会触发EVT\\_CLICK事件，注册EVT\\_CLICK事件以执行特定操作。\r\n\r\n 按钮控件也可以作为容器使用，使用图片和文本作为其子控件，可以实现很多有趣的效果。\r\n\r\n button\\_t是[widget\\_t](widget_t.md)的子类控件，widget\\_t的函数均适用于button\\_t控件。\r\n\r\n 在xml中使用\"button\"标签创建按钮控件。如：\r\n\r\n ```xml\r\n <button x=\"c\" y=\"m\" w=\"80\" h=\"30\" text=\"OK\"/>\r\n ```\r\n\r\n > 更多用法请参考：[button.xml](\r\n https://github.com/zlgopen/awtk/blob/master/demos/assets/raw/ui/button.xml)\r\n\r\n 在c代码中使用函数button\\_create创建按钮控件。如：\r\n\r\n ```c\r\n  widget_t* button = button_create(win, 10, 10, 128, 30);\r\n  widget_set_text(button, L\"OK\");\r\n  widget_on(button, EVT_CLICK, on_click, NULL);\r\n ```\r\n\r\n > 创建之后，需要用widget\\_set\\_text或widget\\_set\\_text\\_utf8设置文本内容。\r\n\r\n > 完整示例请参考：[button demo](\r\n https://github.com/zlgopen/awtk-c-demos/blob/master/demos/button.c)\r\n\r\n 可用通过style来设置控件的显示风格，如字体的大小和颜色等等。如：\r\n\r\n ```xml\r\n  <style name=\"default\" border_color=\"#a0a0a0\"  text_color=\"black\">\r\n   <normal     bg_color=\"#f0f0f0\" />\r\n   <pressed    bg_color=\"#c0c0c0\" x_offset=\"1\" y_offset=\"1\"/>\r\n   <over       bg_color=\"#e0e0e0\" />\r\n   <disable    bg_color=\"gray\" text_color=\"#d0d0d0\" />\r\n </style>\r\n ```\r\n\r\n > 更多用法请参考：[theme default](\r\n https://github.com/zlgopen/awtk/blob/master/demos/assets/raw/styles/default.xml#L31)\r\n\r\n",
    "name": "button_t",
    "parent": "widget_t",
    "annotation": {
      "scriptable": true
    },
    "level": 2
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "parent",
            "desc": "父控件"
          },
          {
            "type": "xy_t",
            "name": "x",
            "desc": "x坐标"
          },
          {
            "type": "xy_t",
            "name": "y",
            "desc": "y坐标"
          },
          {
            "type": "wh_t",
            "name": "w",
            "desc": "宽度"
          },
          {
            "type": "wh_t",
            "name": "h",
            "desc": "高度"
          }
        ],
        "annotation": {
          "constructor": true
        },
        "desc": " 创建calibration_win对象\r\n\r\n",
        "name": "calibration_win_create",
        "return": {
          "type": "widget_t*",
          "desc": "对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "widget对象。"
          },
          {
            "type": "calibration_win_on_done_t",
            "name": "on_done",
            "desc": "回调函数。"
          },
          {
            "type": "void*",
            "name": "ctx",
            "desc": "回调函数的上下文。"
          }
        ],
        "annotation": {},
        "desc": " 设置校准完成的处理函数。\r\n\r\n",
        "name": "calibration_win_set_on_done",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "widget对象。"
          },
          {
            "type": "calibration_win_on_click_t",
            "name": "on_click",
            "desc": "回调函数。"
          },
          {
            "type": "void*",
            "name": "ctx",
            "desc": "回调函数的上下文。"
          }
        ],
        "annotation": {},
        "desc": " 设置校准点击事件的处理函数。\r\n\r\n",
        "name": "calibration_win_set_on_click",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      }
    ],
    "events": [],
    "properties": [],
    "header": "widgets/calibration_win.h",
    "desc": " 电阻屏校准窗口。\r\n\r\n calibration\\_win\\_t是[window\\_base\\_t](window_base_t.md)的子类控件，\r\n window\\_base\\_t的函数均适用于calibration\\_win\\_t控件。\r\n\r\n 在xml中使用\"calibration\\_win\"标签创建电阻屏校准窗口。如：\r\n\r\n ```xml\r\n <calibration_win name=\"cali\" w=\"100%\" h=\"100%\" text=\"Please click the center of cross\">\r\n </calibration_win>\r\n ```\r\n\r\n > 更多用法请参考：\r\n [window.xml](https://github.com/zlgopen/awtk/blob/master/demos/assets/raw/ui/calibration_win.xml)\r\n\r\n 在c代码中使用函数calibration\\_win\\_create创建窗口。如：\r\n\r\n ```c\r\n  widget_t* win = calibration_win_create(NULL, 0, 0, 320, 480);\r\n ```\r\n\r\n 通过calibration\\_win\\_set\\_on\\_done注册回调函数，用于保存校准数据。\r\n\r\n",
    "name": "calibration_win_t",
    "parent": "widget_t",
    "level": 2
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "parent",
            "desc": "父控件"
          },
          {
            "type": "xy_t",
            "name": "x",
            "desc": "x坐标"
          },
          {
            "type": "xy_t",
            "name": "y",
            "desc": "y坐标"
          },
          {
            "type": "wh_t",
            "name": "w",
            "desc": "宽度"
          },
          {
            "type": "wh_t",
            "name": "h",
            "desc": "高度"
          }
        ],
        "annotation": {
          "constructor": true,
          "scriptable": true
        },
        "desc": " 创建check_button对象\r\n\r\n",
        "name": "check_button_create",
        "return": {
          "type": "widget_t*",
          "desc": "对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "parent",
            "desc": "父控件"
          },
          {
            "type": "xy_t",
            "name": "x",
            "desc": "x坐标"
          },
          {
            "type": "xy_t",
            "name": "y",
            "desc": "y坐标"
          },
          {
            "type": "wh_t",
            "name": "w",
            "desc": "宽度"
          },
          {
            "type": "wh_t",
            "name": "h",
            "desc": "高度"
          }
        ],
        "annotation": {
          "constructor": true,
          "scriptable": true
        },
        "desc": " 创建check_button对象\r\n\r\n",
        "name": "check_button_create_radio",
        "return": {
          "type": "widget_t*",
          "desc": "对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "check_button对象。"
          },
          {
            "type": "bool_t",
            "name": "value",
            "desc": "值"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 设置控件的值。\r\n\r\n",
        "name": "check_button_set_value",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "check_button对象。"
          }
        ],
        "annotation": {
          "cast": true,
          "scriptable": true
        },
        "desc": " 转换check_button对象(供脚本语言使用)。\r\n\r\n",
        "name": "check_button_cast",
        "return": {
          "type": "widget_t*",
          "desc": "check_button对象。"
        }
      }
    ],
    "events": [
      {
        "name": "EVT_VALUE_WILL_CHANGE",
        "desc": " 值(勾选状态)即将改变事件。\r\n",
        "type": "event_t"
      },
      {
        "name": "EVT_VALUE_CHANGED",
        "desc": " 值(勾选状态)改变事件。\r\n",
        "type": "event_t"
      }
    ],
    "properties": [
      {
        "name": "value",
        "desc": " 值。\r\n",
        "type": "bool_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      }
    ],
    "header": "widgets/check_button.h",
    "desc": " 勾选控件。\r\n",
    "name": "check_button_t",
    "parent": "widget_t",
    "annotation": {
      "scriptable": true
    },
    "level": 2
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "parent",
            "desc": "父控件"
          },
          {
            "type": "xy_t",
            "name": "x",
            "desc": "x坐标"
          },
          {
            "type": "xy_t",
            "name": "y",
            "desc": "y坐标"
          },
          {
            "type": "wh_t",
            "name": "w",
            "desc": "宽度"
          },
          {
            "type": "wh_t",
            "name": "h",
            "desc": "高度"
          }
        ],
        "annotation": {
          "constructor": true,
          "scriptable": true
        },
        "desc": " 创建color_tile对象\r\n\r\n",
        "name": "color_tile_create",
        "return": {
          "type": "widget_t*",
          "desc": "对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "color_tile对象。"
          }
        ],
        "annotation": {
          "cast": true,
          "scriptable": true
        },
        "desc": " 转换为color_tile对象(供脚本语言使用)。\r\n\r\n",
        "name": "color_tile_cast",
        "return": {
          "type": "widget_t*",
          "desc": "color_tile对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "const char*",
            "name": "color",
            "desc": "背景颜色。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 设置背景颜色。\r\n\r\n",
        "name": "color_tile_set_bg_color",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "const char*",
            "name": "color",
            "desc": "边框颜色。"
          }
        ],
        "annotation": {},
        "desc": " 设置边框颜色。\r\n\r\n",
        "name": "color_tile_set_border_color",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "color_t",
            "name": "color",
            "desc": "背景颜色。"
          }
        ],
        "annotation": {},
        "desc": " 设置背景颜色。\r\n\r\n",
        "name": "color_tile_set_value",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      }
    ],
    "events": [],
    "properties": [
      {
        "name": "bg_color",
        "desc": " 背景颜色。\r\n",
        "type": "const char*",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "border_color",
        "desc": " 边框颜色。\r\n",
        "type": "const char*",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      }
    ],
    "header": "widgets/color_tile.h",
    "desc": " 色块控件。\r\n\r\n 用来显示一个颜色块，它通过属性而不是主题来设置颜色，方便在运行时动态改变颜色。\r\n\r\n 可以使用value属性访问背景颜色的颜色值。\r\n\r\n color\\_tile\\_t是[widget\\_t](widget_t.md)的子类控件，widget\\_t的函数均适用于color\\_tile\\_t控件。\r\n\r\n 在xml中使用\"color_tile\"标签创建色块控件。如：\r\n\r\n ```xml\r\n <color_tile x=\"c\" y=\"m\" w=\"80\" h=\"30\" bg_color=\"green\" />\r\n ```\r\n\r\n > 更多用法请参考：\r\n [color_tile](https://github.com/zlgopen/awtk/blob/master/demos/assets/raw/ui/color_picker_rgb.xml)\r\n\r\n 在c代码中使用函数color_tile\\_create创建色块控件。如：\r\n\r\n ```c\r\n  widget_t* color_tile = color_tile_create(win, 10, 10, 128, 30);\r\n  color_tile_set_bg_color(color_tile, \"red\");\r\n ```\r\n > 创建之后，用color\\_tile\\_set\\_bg\\_color设置背景颜色。\r\n\r\n",
    "name": "color_tile_t",
    "parent": "widget_t",
    "annotation": {
      "scriptable": true
    },
    "level": 2
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "parent",
            "desc": "父控件"
          },
          {
            "type": "xy_t",
            "name": "x",
            "desc": "x坐标"
          },
          {
            "type": "xy_t",
            "name": "y",
            "desc": "y坐标"
          },
          {
            "type": "wh_t",
            "name": "w",
            "desc": "宽度"
          },
          {
            "type": "wh_t",
            "name": "h",
            "desc": "高度"
          }
        ],
        "annotation": {
          "constructor": true,
          "scriptable": true
        },
        "desc": " 创建column对象\r\n\r\n",
        "name": "column_create",
        "return": {
          "type": "widget_t*",
          "desc": "对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "column对象。"
          }
        ],
        "annotation": {
          "cast": true,
          "scriptable": true
        },
        "desc": " 转换为column对象(供脚本语言使用)。\r\n\r\n",
        "name": "column_cast",
        "return": {
          "type": "widget_t*",
          "desc": "column对象。"
        }
      }
    ],
    "events": [],
    "properties": [],
    "header": "widgets/column.h",
    "desc": " column。一个简单的容器控件，垂直排列其子控件。\r\n\r\n 它本身不提供布局功能，仅提供具有语义的标签，让xml更具有可读性。\r\n 子控件的布局可用layout\\_children属性指定。\r\n 请参考[布局参数](https://github.com/zlgopen/awtk/blob/master/docs/layout.md)。\r\n\r\n column\\_t是[widget\\_t](widget_t.md)的子类控件，widget\\_t的函数均适用于column\\_t控件。\r\n\r\n 在xml中使用\"column\"标签创建column。如：\r\n\r\n ```xml\r\n  <column x=\"0\" y=\"0\" w=\"100%\" h=\"100%\" children_layout=\"default(c=1,r=0)\">\r\n     <button name=\"open:basic\" text=\"Basic\"/>\r\n     <button name=\"open:button\" text=\"Buttons\"/>\r\n     <button name=\"open:edit\" text=\"Edits\"/>\r\n     <button name=\"open:keyboard\" text=\"KeyBoard\"/>\r\n   </column>\r\n ```\r\n\r\n 可用通过style来设置控件的显示风格，如背景颜色等。如：\r\n\r\n ```xml\r\n <style name=\"default\" border_color=\"#a0a0a0\">\r\n   <normal     bg_color=\"#f0f0f0\" />\r\n </style>\r\n ```\r\n",
    "name": "column_t",
    "parent": "widget_t",
    "annotation": {
      "scriptable": true
    },
    "level": 2
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "parent",
            "desc": "父控件"
          },
          {
            "type": "xy_t",
            "name": "x",
            "desc": "x坐标"
          },
          {
            "type": "xy_t",
            "name": "y",
            "desc": "y坐标"
          },
          {
            "type": "wh_t",
            "name": "w",
            "desc": "宽度"
          },
          {
            "type": "wh_t",
            "name": "h",
            "desc": "高度"
          }
        ],
        "annotation": {
          "constructor": true,
          "scriptable": true
        },
        "desc": " 创建combo_box_item对象\r\n\r\n",
        "name": "combo_box_item_create",
        "return": {
          "type": "widget_t*",
          "desc": "对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "combo_box_item对象。"
          }
        ],
        "annotation": {
          "cast": true,
          "scriptable": true
        },
        "desc": " 转换combo_box_item对象(供脚本语言使用)。\r\n\r\n",
        "name": "combo_box_item_cast",
        "return": {
          "type": "widget_t*",
          "desc": "combo_box_item对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "combo_box_item对象。"
          },
          {
            "type": "bool_t",
            "name": "checked",
            "desc": "是否被选中。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 设置控件是否被选中。\r\n\r\n",
        "name": "combo_box_item_set_checked",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "combo_box_item对象。"
          },
          {
            "type": "int32_t",
            "name": "value",
            "desc": "值"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 设置控件的值。\r\n\r\n",
        "name": "combo_box_item_set_value",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      }
    ],
    "events": [
      {
        "name": "EVT_VALUE_WILL_CHANGE",
        "desc": " 值(勾选状态)即将改变事件。\r\n",
        "type": "event_t"
      },
      {
        "name": "EVT_VALUE_CHANGED",
        "desc": " 值(勾选状态)改变事件。\r\n",
        "type": "event_t"
      }
    ],
    "properties": [
      {
        "name": "value",
        "desc": " 值。\r\n",
        "type": "int32_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "checked",
        "desc": " 是否被选中。\r\n",
        "type": "bool_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      }
    ],
    "header": "widgets/combo_box_item.h",
    "desc": " ComboBox Item控件。\r\n\r\n 本类仅供combo\\_box控件内部使用。\r\n\r\n",
    "name": "combo_box_item_t",
    "parent": "widget_t",
    "annotation": {
      "scriptable": true
    },
    "level": 2
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "parent",
            "desc": "父控件"
          },
          {
            "type": "xy_t",
            "name": "x",
            "desc": "x坐标"
          },
          {
            "type": "xy_t",
            "name": "y",
            "desc": "y坐标"
          },
          {
            "type": "wh_t",
            "name": "w",
            "desc": "宽度"
          },
          {
            "type": "wh_t",
            "name": "h",
            "desc": "高度"
          }
        ],
        "annotation": {
          "constructor": true,
          "scriptable": true
        },
        "desc": " 创建combo_box对象\r\n\r\n",
        "name": "combo_box_create",
        "return": {
          "type": "widget_t*",
          "desc": "对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "combo_box对象。"
          }
        ],
        "annotation": {
          "cast": true,
          "scriptable": true
        },
        "desc": " 转换combo_box对象(供脚本语言使用)。\r\n\r\n",
        "name": "combo_box_cast",
        "return": {
          "type": "widget_t*",
          "desc": "combo_box对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "combo_box对象。"
          },
          {
            "type": "const char*",
            "name": "open_window",
            "desc": "弹出窗口的名称。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 点击按钮时可以打开popup窗口，本函数可设置窗口的名称。\r\n\r\n",
        "name": "combo_box_set_open_window",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "combo_box对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 重置所有选项。\r\n\r\n",
        "name": "combo_box_reset_options",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "combo_box对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 获取选项个数。\r\n\r\n",
        "name": "combo_box_count_options",
        "return": {
          "type": "int32_t",
          "desc": "返回选项个数。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "combo_box对象。"
          },
          {
            "type": "uint32_t",
            "name": "index",
            "desc": "选项的索引。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 设置第index个选项为当前选中的选项。\r\n\r\n",
        "name": "combo_box_set_selected_index",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "combo_box对象。"
          },
          {
            "type": "int32_t",
            "name": "value",
            "desc": "值。"
          },
          {
            "type": "const char*",
            "name": "text",
            "desc": "文本。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 追加一个选项。\r\n\r\n",
        "name": "combo_box_append_option",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "combo_box对象。"
          },
          {
            "type": "const char*",
            "name": "options",
            "desc": "选项。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 设置选项。\r\n\r\n",
        "name": "combo_box_set_options",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "combo_box对象。"
          },
          {
            "type": "uint32_t",
            "name": "index",
            "desc": "选项的索引。"
          }
        ],
        "annotation": {},
        "desc": " 获取第index个选项。\r\n\r\n",
        "name": "combo_box_get_option",
        "return": {
          "type": "combo_box_option_t*",
          "desc": "返回index个选项。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "combo_box对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 获取combo_box的值。\r\n\r\n",
        "name": "combo_box_get_value",
        "return": {
          "type": "int32_t",
          "desc": "返回值。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "combo_box对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 获取combo_box的文本。\r\n\r\n",
        "name": "combo_box_get_text",
        "return": {
          "type": "const char*",
          "desc": "返回文本。"
        }
      }
    ],
    "events": [
      {
        "name": "EVT_VALUE_WILL_CHANGE",
        "desc": " 值即将改变事件。\r\n",
        "type": "event_t"
      },
      {
        "name": "EVT_VALUE_CHANGED",
        "desc": " 值改变事件。\r\n",
        "type": "event_t"
      }
    ],
    "properties": [
      {
        "name": "open_window",
        "desc": " 为点击按钮时，要打开窗口的名称。\r\n",
        "type": "char*",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "selected_index",
        "desc": " 当前选中的选项。\r\n",
        "type": "int32_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "value",
        "desc": " 值。\r\n",
        "type": "int32_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "options",
        "desc": " 设置可选项(冒号分隔值和文本，分号分隔选项，如:1:red;2:green;3:blue)。\r\n",
        "type": "char*",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      }
    ],
    "header": "widgets/combo_box.h",
    "desc": " 下拉列表控件。\r\n\r\n 点击右边的按钮，可弹出一个下拉列表，从中选择一项作为当前的值。\r\n\r\n combo\\_box\\_t是[edit\\_t](edit_t.md)的子类控件，edit\\_t的函数均适用于combo\\_box\\_t控件。\r\n\r\n 在xml中使用\"combo_box\"标签创建下拉列表控件。\r\n\r\n 列表选项可以直接写在\"options\"属性中。如：\r\n\r\n ```xml\r\n <combo_box readonly=\"true\" x=\"10\" y=\"bottom:5\" w=\"200\" h=\"30\" tr_text=\"ok\"\r\noptions=\"1:ok;2:cancel;\"/>\r\n ```\r\n\r\n 列表选项也可以放在独立的窗口中，用属性\"open_window\"指定窗口的名称。如：\r\n\r\n ```xml\r\n <combo_box open_window=\"language\" readonly=\"true\" x=\"10\" y=\"bottom:50\" w=\"200\" h=\"30\"\r\ntr_text=\"english\"/>\r\n ```\r\n\r\n language.xml:\r\n\r\n ```xml\r\n <popup close_when_click_outside=\"true\" h=\"80\" >\r\n  <list_view x=\"0\"  y=\"0\" w=\"100%\" h=\"100%\" item_height=\"30\">\r\n   <scroll_view name=\"view\" x=\"0\"  y=\"0\" w=\"-12\" h=\"100%\">\r\n     <combo_box_item tr_text=\"english\"/>\r\n     <combo_box_item tr_text=\"chinese\" />\r\n   </scroll_view>\r\n   <scroll_bar_d name=\"bar\" x=\"right\" y=\"0\" w=\"12\" h=\"100%\" value=\"0\"/>\r\n </list_view>\r\n </popup>\r\n ```\r\n\r\n >\r\n 更多用法请参考：[combo_box.xml](https://github.com/zlgopen/awtk/blob/master/demos/assets/raw/ui/combo_box.xml)\r\n\r\n 在c代码中使用函数combo\\_box\\_create创建下拉列表控件。如：\r\n\r\n ```c\r\n  widget_t* combo_box = combo_box_create(win, 10, 10, 128, 30);\r\n\r\n  combo_box_set_options(combo_box, \"left;center;right;\");\r\n  combo_box_set_selected_index(combo_box, 1);\r\n\r\n ```\r\n\r\n 创建之后：\r\n\r\n * 用combo\\_box\\_set\\_options设置可选项目。\r\n * 用combo\\_box\\_set\\_selected\\_index设置缺省项。\r\n\r\n> 完整示例请参考：[combo_box\r\ndemo](https://github.com/zlgopen/awtk-c-demos/blob/master/demos/combo_box.c)\r\n\r\n 可用通过style来设置控件的显示风格，如字体的大小和颜色等等。如：\r\n\r\n ```xml\r\n <combo_box>\r\n <style name=\"default\" border_color=\"#a0a0a0\"  text_color=\"black\" text_align_h=\"left\">\r\n   <normal     bg_color=\"#f0f0f0\" />\r\n   <focused    bg_color=\"#f0f0f0\" border_color=\"black\"/>\r\n   <empty      bg_color=\"#f0f0f0\" text_color=\"#a0a0a0\" />\r\n </style>\r\n </combo_box>\r\n ```\r\n\r\n > 更多用法请参考：[theme\r\ndefault](https://github.com/zlgopen/awtk/blob/master/demos/assets/raw/styles/default.xml#L422)\r\n\r\n",
    "name": "combo_box_t",
    "parent": "widget_t",
    "annotation": {
      "scriptable": true
    },
    "level": 2
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "parent",
            "desc": "父控件"
          },
          {
            "type": "xy_t",
            "name": "x",
            "desc": "x坐标"
          },
          {
            "type": "xy_t",
            "name": "y",
            "desc": "y坐标"
          },
          {
            "type": "wh_t",
            "name": "w",
            "desc": "宽度"
          },
          {
            "type": "wh_t",
            "name": "h",
            "desc": "高度"
          }
        ],
        "annotation": {
          "constructor": true,
          "scriptable": true
        },
        "desc": " 创建dialog客户区对象。\r\n\r\n",
        "name": "dialog_client_create",
        "return": {
          "type": "widget_t*",
          "desc": "dialog对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "dialog_client对象。"
          }
        ],
        "annotation": {
          "cast": true,
          "scriptable": true
        },
        "desc": " 转换为dialog_client对象(供脚本语言使用)。\r\n\r\n",
        "name": "dialog_client_cast",
        "return": {
          "type": "widget_t*",
          "desc": "dialog_client对象。"
        }
      }
    ],
    "events": [],
    "properties": [],
    "header": "widgets/dialog_client.h",
    "desc": " 对话框客户区控件。\r\n\r\n 它本身不提供布局功能，仅提供具有语义的标签，让xml更具有可读性。\r\n 子控件的布局可用layout\\_children属性指定。\r\n 请参考[布局参数](https://github.com/zlgopen/awtk/blob/master/docs/layout.md)。\r\n\r\n dialog\\_client\\_t是[widget\\_t](widget_t.md)的子类控件，widget\\_t的函数均适用于dialog\\_client\\_t控件。\r\n\r\n 在xml中使用\"dialog\\_client\"标签创建dialog\\_client。如：\r\n\r\n ```xml\r\n <dialog anim_hint=\"center_scale(duration=300)\" x=\"c\" y=\"m\" w=\"80%\" h=\"160\" text=\"Dialog\">\r\n <dialog_title x=\"0\" y=\"0\" w=\"100%\" h=\"30\" text=\"Hello AWTK\" />\r\n <dialog_client x=\"0\" y=\"bottom\" w=\"100%\" h=\"-30\">\r\n   <label name=\"\" x=\"center\" y=\"middle:-20\" w=\"200\" h=\"30\" text=\"Are you ready?\"/>\r\n   <button name=\"quit\" x=\"10\" y=\"bottom:10\" w=\"40%\" h=\"30\" text=\"确定\"/>\r\n   <button name=\"quit\" x=\"right:10\" y=\"bottom:10\" w=\"40%\" h=\"30\" text=\"取消\"/>\r\n </dialog_client>\r\n </dialog>\r\n ```\r\n\r\n 在c代码中，用dialog\\_create\\_simple创建对话框时，自动创建dialog客户区对象。\r\n\r\n",
    "name": "dialog_client_t",
    "parent": "widget_t",
    "annotation": {
      "scriptable": true
    },
    "level": 2
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "parent",
            "desc": "父控件"
          },
          {
            "type": "xy_t",
            "name": "x",
            "desc": "x坐标"
          },
          {
            "type": "xy_t",
            "name": "y",
            "desc": "y坐标"
          },
          {
            "type": "wh_t",
            "name": "w",
            "desc": "宽度"
          },
          {
            "type": "wh_t",
            "name": "h",
            "desc": "高度"
          }
        ],
        "annotation": {
          "constructor": true,
          "scriptable": true
        },
        "desc": " 创建dialog对象。\r\n\r\n",
        "name": "dialog_title_create",
        "return": {
          "type": "widget_t*",
          "desc": "dialog对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "dialog_title对象。"
          }
        ],
        "annotation": {
          "cast": true,
          "scriptable": true
        },
        "desc": " 转换为dialog_title对象(供脚本语言使用)。\r\n\r\n",
        "name": "dialog_title_cast",
        "return": {
          "type": "widget_t*",
          "desc": "dialog_title对象。"
        }
      }
    ],
    "events": [],
    "properties": [],
    "header": "widgets/dialog_title.h",
    "desc": " 对话框标题控件。\r\n\r\n 它本身不提供布局功能，仅提供具有语义的标签，让xml更具有可读性。\r\n 子控件的布局可用layout\\_children属性指定。\r\n 请参考[布局参数](https://github.com/zlgopen/awtk/blob/master/docs/layout.md)。\r\n\r\n dialog\\_title\\_t是[widget\\_t](widget_t.md)的子类控件，widget\\_t的函数均适用于dialog\\_title\\_t控件。\r\n\r\n 在xml中使用\"dialog\\_title\"标签创建dialog\\_title。如：\r\n\r\n ```xml\r\n <dialog anim_hint=\"center_scale(duration=300)\" x=\"c\" y=\"m\" w=\"80%\" h=\"160\" text=\"Dialog\">\r\n <dialog_title x=\"0\" y=\"0\" w=\"100%\" h=\"30\" text=\"Hello AWTK\" />\r\n <dialog_client x=\"0\" y=\"bottom\" w=\"100%\" h=\"-30\">\r\n   <label name=\"\" x=\"center\" y=\"middle:-20\" w=\"200\" h=\"30\" text=\"Are you ready?\"/>\r\n   <button name=\"quit\" x=\"10\" y=\"bottom:10\" w=\"40%\" h=\"30\" text=\"确定\"/>\r\n   <button name=\"quit\" x=\"right:10\" y=\"bottom:10\" w=\"40%\" h=\"30\" text=\"取消\"/>\r\n </dialog_client>\r\n </dialog>\r\n ```\r\n\r\n 在c代码中，用dialog\\_create\\_simple创建对话框时，自动创建dialog标题对象。\r\n\r\n",
    "name": "dialog_title_t",
    "parent": "widget_t",
    "annotation": {
      "scriptable": true
    },
    "level": 2
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "parent",
            "desc": "父控件"
          },
          {
            "type": "xy_t",
            "name": "x",
            "desc": "x坐标"
          },
          {
            "type": "xy_t",
            "name": "y",
            "desc": "y坐标"
          },
          {
            "type": "wh_t",
            "name": "w",
            "desc": "宽度"
          },
          {
            "type": "wh_t",
            "name": "h",
            "desc": "高度"
          }
        ],
        "annotation": {
          "constructor": true,
          "scriptable": true
        },
        "desc": " 创建dialog对象。\r\n\r\n",
        "name": "dialog_create",
        "return": {
          "type": "widget_t*",
          "desc": "dialog对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "parent",
            "desc": "父控件"
          },
          {
            "type": "xy_t",
            "name": "x",
            "desc": "x坐标"
          },
          {
            "type": "xy_t",
            "name": "y",
            "desc": "y坐标"
          },
          {
            "type": "wh_t",
            "name": "w",
            "desc": "宽度"
          },
          {
            "type": "wh_t",
            "name": "h",
            "desc": "高度"
          }
        ],
        "annotation": {
          "constructor": true,
          "scriptable": true
        },
        "desc": " 创建dialog对象，同时创建title/client。\r\n\r\n",
        "name": "dialog_create_simple",
        "return": {
          "type": "widget_t*",
          "desc": "dialog对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "dialog对象。"
          }
        ],
        "annotation": {
          "cast": true,
          "scriptable": true
        },
        "desc": " 转换dialog对象(供脚本语言使用)。\r\n\r\n",
        "name": "dialog_cast",
        "return": {
          "type": "widget_t*",
          "desc": "dialog对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "dialog对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 获取title控件。\r\n\r\n",
        "name": "dialog_get_title",
        "return": {
          "type": "widget_t*",
          "desc": "title对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "dialog对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 获取client控件。\r\n\r\n",
        "name": "dialog_get_client",
        "return": {
          "type": "widget_t*",
          "desc": "client对象。"
        }
      },
      {
        "params": [
          {
            "type": "const char*",
            "name": "name",
            "desc": "dialog的名称。"
          }
        ],
        "annotation": {
          "constructor": true,
          "scriptable": true
        },
        "desc": " 从资源文件中加载并创建Dialog对象。\r\n\r\n 本函数在ui\\_loader/ui\\_builder_default里实现。\r\n\r\n",
        "name": "dialog_open",
        "return": {
          "type": "widget_t*",
          "desc": "对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "dialog对象。"
          },
          {
            "type": "char*",
            "name": "title",
            "desc": "标题。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 设置对话框的标题文本。\r\n\r\n",
        "name": "dialog_set_title",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "dialog对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 模态显示对话框。\r\n dialog_modal返回后，dialog对象将在下一个idle函数中回收。\r\n 也就是在dialog_modal调用完成后仍然可以访问dialog中控件，直到本次事件结束。\r\n\r\n",
        "name": "dialog_modal",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "dialog对象。"
          },
          {
            "type": "uint32_t",
            "name": "code",
            "desc": "退出码，作为dialog_modal的返回值。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 退出模态显示，关闭对话框。\r\n\r\n> 比如，在对话框中关闭按钮的事件处理函数中，调用本函数关闭对话框。\r\n\r\n\r\n",
        "name": "dialog_quit",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      }
    ],
    "events": [],
    "properties": [],
    "header": "widgets/dialog.h",
    "desc": " 对话框。\r\n\r\n 对话框是一种特殊的窗口，大小和位置可以自由设置。\r\n AWTK中的对话框是模态的，也就是说用户不能操作对话框后面的窗口。\r\n\r\n 对话框通常由对话框标题和对话框客户区两部分组成：\r\n\r\n ```graphviz\r\n   [default_style]\r\n\r\n   dialog_title_t -> dialog_t[arrowhead = \"ediamond\"]\r\n   dialog_client_t -> dialog_t[arrowhead = \"ediamond\"]\r\n ```\r\n\r\n dialog\\_t是[window\\_base\\_t](window_base_t.md)的子类控件，window\\_base\\_t的函数均适用于dialog\\_t控件。\r\n\r\n 在xml中使用\"dialog\"标签创建对话框。如：\r\n\r\n ```xml\r\n <dialog anim_hint=\"center_scale(duration=300)\" x=\"c\" y=\"m\" w=\"80%\" h=\"160\" text=\"Dialog\">\r\n <dialog_title x=\"0\" y=\"0\" w=\"100%\" h=\"30\" text=\"Hello AWTK\" />\r\n <dialog_client x=\"0\" y=\"bottom\" w=\"100%\" h=\"-30\">\r\n   <label name=\"\" x=\"center\" y=\"middle:-20\" w=\"200\" h=\"30\" text=\"Are you ready?\"/>\r\n   <button name=\"quit\" x=\"10\" y=\"bottom:10\" w=\"40%\" h=\"30\" text=\"确定\"/>\r\n   <button name=\"quit\" x=\"right:10\" y=\"bottom:10\" w=\"40%\" h=\"30\" text=\"取消\"/>\r\n </dialog_client>\r\n </dialog>\r\n ```\r\n\r\n 如果你不需要对话框的标题，可以这样写：\r\n\r\n ```xml\r\n <dialog anim_hint=\"center_scale(duration=300)\" x=\"c\" y=\"m\" w=\"80%\" h=\"160\" text=\"Dialog\">\r\n   <label name=\"\" x=\"center\" y=\"middle:-20\" w=\"200\" h=\"30\" text=\"Are you ready?\"/>\r\n   <button name=\"quit\" x=\"10\" y=\"bottom:10\" w=\"40%\" h=\"30\" text=\"确定\"/>\r\n   <button name=\"quit\" x=\"right:10\" y=\"bottom:10\" w=\"40%\" h=\"30\" text=\"取消\"/>\r\n </dialog>\r\n ```\r\n\r\n 与窗口不同的是，打开对话框之后，还需要调用dialog\\_modal。\r\n\r\n ```c\r\n  widget_t* dlg = dialog_open(name);\r\n\r\n  ret = dialog_modal(dlg);\r\n ```\r\n\r\n >\r\n 更多用法请参考：[dialog.xml](https://github.com/zlgopen/awtk/blob/master/demos/assets/raw/ui/)\r\n\r\n 在c代码中使用函数dialog\\_create创建对话框。如：\r\n\r\n ```c\r\n   widget_t* ok = NULL;\r\n   widget_t* cancel = NULL;\r\n   widget_t* label = NULL;\r\n\r\n   widget_t* dlg = dialog_create_simple(NULL, 0, 0, 240, 160);\r\n\r\n   dialog_set_title(dlg, \"Dialog\");\r\n\r\n   ok = button_create(dialog_get_client(dlg), 20, 80, 80, 30);\r\n   widget_set_text(ok, L\"Go\");\r\n\r\n   cancel = button_create(dialog_get_client(dlg), 140, 80, 80, 30);\r\n   widget_set_text(cancel, L\"Cancel\");\r\n\r\n   label = label_create(dialog_get_client(dlg), 10, 30, 200, 30);\r\n   widget_set_text(label, L\"AWTK is cool!\");\r\n\r\n   widget_on(ok, EVT_CLICK, on_dialog_btn_click, (char*)NULL + 1);\r\n   widget_on(cancel, EVT_CLICK, on_dialog_btn_click, (char*)NULL + 2);\r\n\r\n   code = dialog_modal(dlg);\r\n\r\n   log_debug(\"code=%d\\n\", code);\r\n ```\r\n\r\n > 创建之后，再创建子控件，最后调用dialog\\_modal显示对话框。对话框关闭之后dialog\\_modal才会返回。\r\n\r\n > 完整示例请参考：[dialog\r\n demo](https://github.com/zlgopen/awtk-c-demos/blob/master/demos/dialog.c)\r\n\r\n 可用通过style来设置控件的显示风格，如字体的大小和颜色等等。如：\r\n\r\n ```xml\r\n <style name=\"default\">\r\n   <normal border_color=\"#606060\" />\r\n </style>\r\n ```\r\n\r\n > 更多用法请参考：[theme\r\n default](https://github.com/zlgopen/awtk/blob/master/demos/assets/raw/styles/default.xml#L324)\r\n\r\n",
    "name": "dialog_t",
    "parent": "widget_t",
    "annotation": {
      "scriptable": true
    },
    "level": 2
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "parent",
            "desc": "父控件"
          },
          {
            "type": "xy_t",
            "name": "x",
            "desc": "x坐标"
          },
          {
            "type": "xy_t",
            "name": "y",
            "desc": "y坐标"
          },
          {
            "type": "wh_t",
            "name": "w",
            "desc": "宽度"
          },
          {
            "type": "wh_t",
            "name": "h",
            "desc": "高度"
          }
        ],
        "annotation": {
          "constructor": true,
          "scriptable": true
        },
        "desc": " 创建dragger对象。\r\n\r\n",
        "name": "dragger_create",
        "return": {
          "type": "widget_t*",
          "desc": "对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "dragger对象。"
          }
        ],
        "annotation": {
          "cast": true,
          "scriptable": true
        },
        "desc": " 转换为dragger对象(供脚本语言使用)。\r\n\r\n",
        "name": "dragger_cast",
        "return": {
          "type": "widget_t*",
          "desc": "dragger对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "dragger控件。"
          },
          {
            "type": "xy_t",
            "name": "x_min",
            "desc": "x坐标最小值。"
          },
          {
            "type": "xy_t",
            "name": "y_min",
            "desc": "y坐标最小值。"
          },
          {
            "type": "xy_t",
            "name": "x_max",
            "desc": "x坐标最大值。"
          },
          {
            "type": "xy_t",
            "name": "y_max",
            "desc": "y坐标最大值。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 设置拖动的范围。\r\n\r\n",
        "name": "dragger_set_range",
        "return": {
          "type": "widget_t*",
          "desc": "对象。"
        }
      }
    ],
    "events": [],
    "properties": [
      {
        "name": "x_min",
        "desc": " x坐标的最小值。\r\n",
        "type": "xy_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "y_min",
        "desc": " y坐标的最小值。\r\n",
        "type": "xy_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "x_max",
        "desc": " x坐标的最大值。\r\n",
        "type": "xy_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "y_max",
        "desc": " y坐标的最大值。\r\n",
        "type": "xy_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      }
    ],
    "header": "widgets/dragger.h",
    "desc": " dragger控件。\r\n",
    "name": "dragger_t",
    "parent": "widget_t",
    "annotation": {
      "scriptable": true
    },
    "level": 2
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "parent",
            "desc": "父控件"
          },
          {
            "type": "xy_t",
            "name": "x",
            "desc": "x坐标"
          },
          {
            "type": "xy_t",
            "name": "y",
            "desc": "y坐标"
          },
          {
            "type": "wh_t",
            "name": "w",
            "desc": "宽度"
          },
          {
            "type": "wh_t",
            "name": "h",
            "desc": "高度"
          }
        ],
        "annotation": {
          "constructor": true,
          "scriptable": true
        },
        "desc": " 创建edit对象\r\n\r\n",
        "name": "edit_create",
        "return": {
          "type": "widget_t*",
          "desc": "对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "edit对象。"
          }
        ],
        "annotation": {
          "cast": true,
          "scriptable": true
        },
        "desc": " 转换为edit对象(供脚本语言使用)。\r\n\r\n",
        "name": "edit_cast",
        "return": {
          "type": "widget_t*",
          "desc": "edit对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "widget对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 获取int类型的值。\r\n\r\n",
        "name": "edit_get_int",
        "return": {
          "type": "int32_t",
          "desc": "返回int的值。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "widget对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 获取double类型的值。\r\n\r\n",
        "name": "edit_get_double",
        "return": {
          "type": "double",
          "desc": "返回double的值。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "widget对象。"
          },
          {
            "type": "int32_t",
            "name": "value",
            "desc": "值。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 设置int类型的值。\r\n\r\n",
        "name": "edit_set_int",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "widget对象。"
          },
          {
            "type": "double",
            "name": "value",
            "desc": "值。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 设置double类型的值。\r\n\r\n",
        "name": "edit_set_double",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "widget对象。"
          },
          {
            "type": "uint32_t",
            "name": "min",
            "desc": "最小长度。"
          },
          {
            "type": "uint32_t",
            "name": "max",
            "desc": "最大长度。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 设置为文本输入及其长度限制，不允许输入超过max个字符，少于min个字符时进入error状态。\r\n\r\n",
        "name": "edit_set_text_limit",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "widget对象。"
          },
          {
            "type": "int32_t",
            "name": "min",
            "desc": "最小值。"
          },
          {
            "type": "int32_t",
            "name": "max",
            "desc": "最大值。"
          },
          {
            "type": "int32_t",
            "name": "step",
            "desc": "步长。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 设置为整数输入及取值范围。\r\n\r\n",
        "name": "edit_set_int_limit",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "widget对象。"
          },
          {
            "type": "double",
            "name": "min",
            "desc": "最小值。"
          },
          {
            "type": "double",
            "name": "max",
            "desc": "最大值。"
          },
          {
            "type": "double",
            "name": "step",
            "desc": "步长。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 设置为浮点数输入及取值范围。\r\n\r\n",
        "name": "edit_set_float_limit",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "widget对象。"
          },
          {
            "type": "bool_t",
            "name": "readonly",
            "desc": "只读。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 设置编辑器是否为只读。\r\n\r\n",
        "name": "edit_set_readonly",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "widget对象。"
          },
          {
            "type": "bool_t",
            "name": "auto_fix",
            "desc": "自动改正。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 设置编辑器是否为自动改正。\r\n\r\n",
        "name": "edit_set_auto_fix",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "widget对象。"
          },
          {
            "type": "input_type_t",
            "name": "type",
            "desc": "输入类型。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 设置编辑器的输入类型。\r\n\r\n",
        "name": "edit_set_input_type",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "widget对象。"
          },
          {
            "type": "char*",
            "name": "tips",
            "desc": "输入提示。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 设置编辑器的输入提示。\r\n\r\n",
        "name": "edit_set_input_tips",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "widget对象。"
          },
          {
            "type": "bool_t",
            "name": "password_visible",
            "desc": "密码是否可见。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 当编辑器输入类型为密码时，设置密码是否可见。\r\n\r\n",
        "name": "edit_set_password_visible",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      }
    ],
    "events": [
      {
        "name": "EVT_VALUE_CHANGING",
        "desc": " 文本正在改变事件(编辑中)。\r\n",
        "type": "event_t"
      },
      {
        "name": "EVT_VALUE_CHANGED",
        "desc": " 文本改变事件。\r\n",
        "type": "event_t"
      }
    ],
    "properties": [
      {
        "name": "readonly",
        "desc": " 编辑器是否为只读。\r\n",
        "type": "bool_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "password_visible",
        "desc": " 密码是否可见。\r\n",
        "type": "bool_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "auto_fix",
        "desc": " 输入无效时，是否自动改正。\r\n",
        "type": "bool_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "top_margin",
        "desc": " 上边距。\r\n",
        "type": "uint8_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "bottom_margin",
        "desc": " 下边距。\r\n",
        "type": "uint8_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "left_margin",
        "desc": " 左边距。\r\n",
        "type": "uint8_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "right_margin",
        "desc": " 右边距。\r\n",
        "type": "uint8_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "tips",
        "desc": " 输入提示。\r\n",
        "type": "char*",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "input_type",
        "desc": " 输入类型。\r\n XXX：需要在min/max/step之前设置。\r\n",
        "type": "input_type_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "persitent": true,
          "design": true
        }
      },
      {
        "name": "min",
        "desc": " 最小值或最小长度。\r\n",
        "type": "float_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "persitent": true,
          "design": true
        }
      },
      {
        "name": "max",
        "desc": " 最大值或最大长度。\r\n",
        "type": "float_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "persitent": true,
          "design": true
        }
      },
      {
        "name": "step",
        "desc": " 步长。\r\n 作为数值型编辑器时，一次增加和减少时的数值。\r\n",
        "type": "float_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "persitent": true,
          "design": true
        }
      }
    ],
    "header": "widgets/edit.h",
    "desc": " 单行编辑器控件。\r\n\r\n 在基于SDL的平台，单行编辑器控件使用平台原生的输入法，对于嵌入式平台使用内置的输入法。\r\n\r\n 在使用内置的输入法时，软键盘由输入类型决定，开发者可以自定义软键盘的界面。\r\n\r\n edit\\_t是[widget\\_t](widget_t.md)的子类控件，widget\\_t的函数均适用于edit\\_t控件。\r\n\r\n edit\\_t本身可以做为容器，放入按钮等控件。有几个特殊的子控件：\r\n\r\n * 名为\"clear\"的按钮。点击时清除编辑器中的内容。\r\n * 名为\"inc\"的按钮。点击时增加编辑器的值，用于实现类似于spinbox的功能。\r\n * 名为\"dec\"的按钮。点击时减少编辑器的值，用于实现类似于spinbox的功能。\r\n * 名为\"visible\"的复选框。勾选时显示密码，反之不显示密码。\r\n\r\n在xml中使用\"edit\"标签创建编辑器控件。如：\r\n\r\n ```xml\r\n <edit x=\"c\" y=\"m\" w=\"80\" h=\"30\"\r\n   tips=\"age\" input_type=\"uint\" min=\"0\" max=\"150\" step=\"1\" auto_fix=\"true\" style=\"number\" />\r\n ```\r\n\r\n > XXX：需要在min/max/step之前设置input\\_type。\r\n\r\n >更多用法请参考：\r\n [edit.xml](https://github.com/zlgopen/awtk/blob/master/demos/assets/raw/ui/edit.xml)\r\n\r\n 在c代码中使用函数edit\\_create创建编辑器控件。如：\r\n\r\n ```c\r\n  widget_t* edit = edit_create(win, 10, 10, 128, 30);\r\n  widget_set_text(edit, L\"OK\");\r\n ```\r\n\r\n > 创建之后，可以用widget\\_set\\_text或widget\\_set\\_text\\_utf8设置文本内容。\r\n\r\n > 完整示例请参考：\r\n [edit demo](https://github.com/zlgopen/awtk-c-demos/blob/master/demos/edit.c)\r\n\r\n 可用通过style来设置控件的显示风格，如字体的大小和颜色等等。如：\r\n\r\n ```xml\r\n <style name=\"default\" border_color=\"#a0a0a0\"  text_color=\"black\" text_align_h=\"left\">\r\n   <normal     bg_color=\"#f0f0f0\" />\r\n   <focused    bg_color=\"#f0f0f0\" border_color=\"black\"/>\r\n   <disable    bg_color=\"gray\" text_color=\"#d0d0d0\" />\r\n   <error      bg_color=\"#f0f0f0\" text_color=\"red\" />\r\n   <empty      bg_color=\"#f0f0f0\" text_color=\"#a0a0a0\" />\r\n </style>\r\n ```\r\n\r\n > 更多用法请参考：\r\n [theme\r\ndefault](https://github.com/zlgopen/awtk/blob/master/demos/assets/raw/styles/default.xml#L104)\r\n\r\n",
    "name": "edit_t",
    "parent": "widget_t",
    "annotation": {
      "scriptable": true
    },
    "level": 2
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "parent",
            "desc": "父控件"
          },
          {
            "type": "xy_t",
            "name": "x",
            "desc": "x坐标"
          },
          {
            "type": "xy_t",
            "name": "y",
            "desc": "y坐标"
          },
          {
            "type": "wh_t",
            "name": "w",
            "desc": "宽度"
          },
          {
            "type": "wh_t",
            "name": "h",
            "desc": "高度"
          }
        ],
        "annotation": {
          "constructor": true,
          "scriptable": true
        },
        "desc": " 创建grid_item对象\r\n\r\n",
        "name": "grid_item_create",
        "return": {
          "type": "widget_t*",
          "desc": "对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "grid_item对象。"
          }
        ],
        "annotation": {
          "cast": true,
          "scriptable": true
        },
        "desc": " 转换为grid_item对象(供脚本语言使用)。\r\n\r\n",
        "name": "grid_item_cast",
        "return": {
          "type": "widget_t*",
          "desc": "grid_item对象。"
        }
      }
    ],
    "events": [],
    "properties": [],
    "header": "widgets/grid_item.h",
    "desc": " grid_item。一个简单的容器控件，一般作为grid的子控件。\r\n\r\n 它本身不提供布局功能，仅提供具有语义的标签，让xml更具有可读性。\r\n 子控件的布局可用layout\\_children属性指定。\r\n 请参考[布局参数](https://github.com/zlgopen/awtk/blob/master/docs/layout.md)。\r\n\r\n grid\\_item\\_t是[widget\\_t](widget_t.md)的子类控件，widget\\_t的函数均适用于grid\\_item\\_t控件。\r\n\r\n 在xml中使用\"grid\\_item\"标签创建grid\\_item。如：\r\n\r\n ```xml\r\n  <grid x=\"0\" y=\"0\" w=\"100%\" h=\"100%\" children_layout=\"default(c=2,r=2,m=5,s=5)\">\r\n    <grid_item>\r\n      <button x=\"c\" y=\"m\" w=\"80%\" h=\"30\" name=\"0\" text=\"0\"/>\r\n    </grid_item>\r\n    <grid_item>\r\n      <button x=\"c\" y=\"m\" w=\"80%\" h=\"30\" name=\"1\" text=\"1\"/>\r\n    </grid_item>\r\n    <grid_item>\r\n      <button x=\"c\" y=\"m\" w=\"80%\" h=\"30\" name=\"2\" text=\"2\"/>\r\n    </grid_item>\r\n    <grid_item>\r\n      <button x=\"c\" y=\"m\" w=\"80%\" h=\"30\" name=\"3\" text=\"3\"/>\r\n    </grid_item>\r\n  </grid>```\r\n\r\n 可用通过style来设置控件的显示风格，如背景颜色等。如：\r\n\r\n ```xml\r\n <style name=\"default\" border_color=\"#a0a0a0\">\r\n   <normal     bg_color=\"#f0f0f0\" />\r\n </style>\r\n ```\r\n",
    "name": "grid_item_t",
    "parent": "widget_t",
    "annotation": {
      "scriptable": true
    },
    "level": 2
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "parent",
            "desc": "父控件"
          },
          {
            "type": "xy_t",
            "name": "x",
            "desc": "x坐标"
          },
          {
            "type": "xy_t",
            "name": "y",
            "desc": "y坐标"
          },
          {
            "type": "wh_t",
            "name": "w",
            "desc": "宽度"
          },
          {
            "type": "wh_t",
            "name": "h",
            "desc": "高度"
          }
        ],
        "annotation": {
          "constructor": true,
          "scriptable": true
        },
        "desc": " 创建grid对象\r\n\r\n",
        "name": "grid_create",
        "return": {
          "type": "widget_t*",
          "desc": "对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "grid对象。"
          }
        ],
        "annotation": {
          "cast": true,
          "scriptable": true
        },
        "desc": " 转换为grid对象(供脚本语言使用)。\r\n\r\n",
        "name": "grid_cast",
        "return": {
          "type": "widget_t*",
          "desc": "grid对象。"
        }
      }
    ],
    "events": [],
    "properties": [],
    "header": "widgets/grid.h",
    "desc": " grid控件。一个简单的容器控件，用于网格排列一组控件。\r\n\r\n 它本身不提供布局功能，仅提供具有语义的标签，让xml更具有可读性。\r\n 子控件的布局可用layout\\_children属性指定。\r\n 请参考[布局参数](https://github.com/zlgopen/awtk/blob/master/docs/layout.md)。\r\n\r\n grid\\_t是[widget\\_t](widget_t.md)的子类控件，widget\\_t的函数均适用于grid\\_t控件。\r\n\r\n 在xml中使用\"grid\"标签创建grid。如：\r\n\r\n ```xml\r\n  <grid x=\"0\" y=\"0\" w=\"100%\" h=\"100%\" children_layout=\"default(c=2,r=2,m=5,s=5)\">\r\n     <button name=\"open:basic\" text=\"Basic\"/>\r\n     <button name=\"open:button\" text=\"Buttons\"/>\r\n     <button name=\"open:edit\" text=\"Edits\"/>\r\n     <button name=\"open:keyboard\" text=\"KeyBoard\"/>\r\n   </grid>\r\n ```\r\n\r\n 可用通过style来设置控件的显示风格，如背景颜色等。如：\r\n\r\n ```xml\r\n <style name=\"default\" border_color=\"#a0a0a0\">\r\n   <normal     bg_color=\"#f0f0f0\" />\r\n </style>\r\n ```\r\n\r\n",
    "name": "grid_t",
    "parent": "widget_t",
    "annotation": {
      "scriptable": true
    },
    "level": 2
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "parent",
            "desc": "父控件"
          },
          {
            "type": "xy_t",
            "name": "x",
            "desc": "x坐标"
          },
          {
            "type": "xy_t",
            "name": "y",
            "desc": "y坐标"
          },
          {
            "type": "wh_t",
            "name": "w",
            "desc": "宽度"
          },
          {
            "type": "wh_t",
            "name": "h",
            "desc": "高度"
          }
        ],
        "annotation": {
          "constructor": true,
          "scriptable": true
        },
        "desc": " 创建group_box对象\r\n\r\n",
        "name": "group_box_create",
        "return": {
          "type": "widget_t*",
          "desc": "对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "group_box对象。"
          }
        ],
        "annotation": {
          "cast": true,
          "scriptable": true
        },
        "desc": " 转换为group_box对象(供脚本语言使用)。\r\n\r\n",
        "name": "group_box_cast",
        "return": {
          "type": "widget_t*",
          "desc": "group_box对象。"
        }
      }
    ],
    "events": [],
    "properties": [],
    "header": "widgets/group_box.h",
    "desc": " 分组控件。\r\n\r\n 单选按钮在同一个父控件中是互斥的，所以通常将相关的单选按钮放在一个group\\_box中。\r\n\r\n 它本身不提供布局功能，仅提供具有语义的标签，让xml更具有可读性。\r\n 子控件的布局可用layout\\_children属性指定。\r\n 请参考[布局参数](https://github.com/zlgopen/awtk/blob/master/docs/layout.md)。\r\n\r\n group\\_box\\_t是[widget\\_t](widget_t.md)的子类控件，widget\\_t的函数均适用于group\\_box\\_t控件。\r\n\r\n 在xml中使用\"group\\_box\"标签创建group\\_box。如：\r\n\r\n ```xml\r\n <group_box x=\"20\" y=\"230\" w=\"50%\" h=\"90\" children_layout=\"default(r=3,c=1,ym=2,s=10)\" >\r\n   <radio_button name=\"r1\" text=\"Book\"/>\r\n   <radio_button name=\"r2\" text=\"Food\"/>\r\n   <radio_button name=\"r3\" text=\"Pencil\" value=\"true\"/>\r\n </group_box>\r\n ```\r\n\r\n 可用通过style来设置控件的显示风格，如背景颜色等。如：\r\n\r\n ```xml\r\n <style name=\"default\" border_color=\"#a0a0a0\">\r\n   <normal     bg_color=\"#f0f0f0\" />\r\n </style>\r\n ```\r\n",
    "name": "group_box_t",
    "parent": "widget_t",
    "annotation": {
      "scriptable": true
    },
    "level": 2
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "parent",
            "desc": "父控件"
          },
          {
            "type": "xy_t",
            "name": "x",
            "desc": "x坐标"
          },
          {
            "type": "xy_t",
            "name": "y",
            "desc": "y坐标"
          },
          {
            "type": "wh_t",
            "name": "w",
            "desc": "宽度"
          },
          {
            "type": "wh_t",
            "name": "h",
            "desc": "高度"
          }
        ],
        "annotation": {
          "constructor": true,
          "scriptable": true
        },
        "desc": " 创建row对象\r\n\r\n",
        "name": "row_create",
        "return": {
          "type": "widget_t*",
          "desc": "对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "row对象。"
          }
        ],
        "annotation": {
          "cast": true,
          "scriptable": true
        },
        "desc": " 转换为row对象(供脚本语言使用)。\r\n\r\n",
        "name": "row_cast",
        "return": {
          "type": "widget_t*",
          "desc": "row对象。"
        }
      }
    ],
    "events": [],
    "properties": [],
    "header": "widgets/row.h",
    "desc": " row。一个简单的容器控件，用于水平排列其子控件。\r\n\r\n 它本身不提供布局功能，仅提供具有语义的标签，让xml更具有可读性。\r\n 子控件的布局可用layout\\_children属性指定。\r\n 请参考[布局参数](https://github.com/zlgopen/awtk/blob/master/docs/layout.md)。\r\n\r\n row\\_t是[widget\\_t](widget_t.md)的子类控件，widget\\_t的函数均适用于row\\_t控件。\r\n\r\n 在xml中使用\"row\"标签创建row。如：\r\n\r\n ```xml\r\n  <row x=\"0\" y=\"0\" w=\"100%\" h=\"100%\" children_layout=\"default(c=0,r=1)\">\r\n     <button name=\"open:basic\" text=\"Basic\"/>\r\n     <button name=\"open:button\" text=\"Buttons\"/>\r\n     <button name=\"open:edit\" text=\"Edits\"/>\r\n     <button name=\"open:keyboard\" text=\"KeyBoard\"/>\r\n   </row>\r\n ```\r\n\r\n 可用通过style来设置控件的显示风格，如背景颜色等。如：\r\n\r\n ```xml\r\n <style name=\"default\" border_color=\"#a0a0a0\">\r\n   <normal     bg_color=\"#f0f0f0\" />\r\n </style>\r\n ```\r\n",
    "name": "row_t",
    "parent": "widget_t",
    "annotation": {
      "scriptable": true
    },
    "level": 2
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "parent",
            "desc": "父控件"
          },
          {
            "type": "xy_t",
            "name": "x",
            "desc": "x坐标"
          },
          {
            "type": "xy_t",
            "name": "y",
            "desc": "y坐标"
          },
          {
            "type": "wh_t",
            "name": "w",
            "desc": "宽度"
          },
          {
            "type": "wh_t",
            "name": "h",
            "desc": "高度"
          }
        ],
        "annotation": {
          "constructor": true,
          "scriptable": true
        },
        "desc": " 创建label对象\r\n\r\n",
        "name": "label_create",
        "return": {
          "type": "widget_t*",
          "desc": "对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "int32_t",
            "name": "length",
            "desc": "最大可显示字符个数。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 设置最大可显示字符个数。\r\n\r\n",
        "name": "label_set_length",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      }
    ],
    "events": [],
    "properties": [
      {
        "name": "length",
        "desc": " 显示字符的长度(小余0时全部显示)。\r\n 主要用于动态改变显示字符的个数，来实现类似[拨号中...]的动画效果。\r\n",
        "type": "int32_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      }
    ],
    "header": "widgets/label.h",
    "desc": "\r\n 文本控件。用于显示一行或多行文本。\r\n\r\n 文本控件不会根据文本的长度自动换行，只有文本内容包含换行符时才会换行。\r\n\r\n 如需自动换行请使用[rich\\_text\\_t](rich_text_t.md)控件。\r\n\r\n label\\_t是[widget\\_t](widget_t.md)的子类控件，widget\\_t的函数均适用于label\\_t控件。\r\n\r\n 在xml中使用\"label\"标签创建文本控件。如：\r\n\r\n ```xml\r\n <label style=\"center\" text=\"center\"/>\r\n ```\r\n\r\n > 更多用法请参考：[label.xml](\r\nhttps://github.com/zlgopen/awtk/blob/master/demos/assets/raw/ui/label.xml)\r\n\r\n 在c代码中使用函数label\\_create创建文本控件。如：\r\n\r\n ```c\r\n  widget_t* label = label_create(win, 10, 10, 128, 30);\r\n  widget_set_text(label, L\"hello awtk!\");\r\n ```\r\n\r\n > 创建之后，需要用widget\\_set\\_text或widget\\_set\\_text\\_utf8设置文本内容。\r\n\r\n > 完整示例请参考：[label demo](\r\nhttps://github.com/zlgopen/awtk-c-demos/blob/master/demos/label.c)\r\n\r\n 可用通过style来设置控件的显示风格，如字体的大小和颜色等等。如：\r\n\r\n ```xml\r\n  <style name=\"left\">\r\n   <normal text_color=\"red\" text_align_h=\"left\" border_color=\"#a0a0a0\" margin=\"4\" />\r\n  </style>\r\n ```\r\n\r\n > 更多用法请参考：\r\n [theme default](\r\nhttps://github.com/zlgopen/awtk/blob/master/demos/assets/raw/styles/default.xml#L144)\r\n\r\n",
    "name": "label_t",
    "parent": "widget_t",
    "annotation": {
      "scriptable": true
    },
    "level": 2
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "parent",
            "desc": "父控件"
          },
          {
            "type": "xy_t",
            "name": "x",
            "desc": "x坐标"
          },
          {
            "type": "xy_t",
            "name": "y",
            "desc": "y坐标"
          },
          {
            "type": "wh_t",
            "name": "w",
            "desc": "宽度"
          },
          {
            "type": "wh_t",
            "name": "h",
            "desc": "高度"
          }
        ],
        "annotation": {
          "constructor": true,
          "scriptable": true
        },
        "desc": " 创建pages对象\r\n\r\n",
        "name": "pages_create",
        "return": {
          "type": "widget_t*",
          "desc": "对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "pages对象。"
          }
        ],
        "annotation": {
          "cast": true,
          "scriptable": true
        },
        "desc": " 转换为pages对象(供脚本语言使用)。\r\n\r\n",
        "name": "pages_cast",
        "return": {
          "type": "widget_t*",
          "desc": "pages对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "uint32_t",
            "name": "index",
            "desc": "当前Page的序号。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 设置当前的Page。\r\n\r\n",
        "name": "pages_set_active",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "char*",
            "name": "name",
            "desc": "当前Page的名字。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 通过页面的名字设置当前的Page。\r\n\r\n",
        "name": "pages_set_active_by_name",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      }
    ],
    "events": [
      {
        "name": "EVT_VALUE_WILL_CHANGE",
        "desc": " 值(当前页)即将改变事件。\r\n",
        "type": "event_t"
      },
      {
        "name": "EVT_VALUE_CHANGED",
        "desc": " 值(当前页)改变事件。\r\n",
        "type": "event_t"
      }
    ],
    "properties": [
      {
        "name": "active",
        "desc": " 当前活跃的page。\r\n",
        "type": "uint32_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      }
    ],
    "header": "widgets/pages.h",
    "desc": " 页面管理控件。\r\n\r\n 只有一个Page处于active状态，处于active状态的Page才能显示并接收事件。\r\n 常用于实现标签控件中的页面管理。\r\n\r\n pages\\_t是[widget\\_t](widget_t.md)的子类控件，\r\n widget\\_t的函数均适用于pages\\_t控件。\r\n\r\n 在xml中使用\"pages\"标签创建页面管理控件。如：\r\n\r\n ```xml\r\n <tab_control x=\"0\" y=\"0\" w=\"100%\" h=\"100%\" >\r\n   <pages x=\"c\" y=\"20\" w=\"90%\" h=\"-60\" value=\"1\">\r\n   ...\r\n   </pages>\r\n   <tab_button_group>\r\n   ...\r\n   </tab_button_group>\r\n </tab_control>\r\n ```\r\n\r\n > 更多用法请参考：\r\n [tab control](https://github.com/zlgopen/awtk/blob/master/demos/assets/raw/ui/)\r\n\r\n",
    "name": "pages_t",
    "parent": "widget_t",
    "annotation": {
      "scriptable": true
    },
    "level": 2
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "parent",
            "desc": "父控件"
          },
          {
            "type": "xy_t",
            "name": "x",
            "desc": "x坐标"
          },
          {
            "type": "xy_t",
            "name": "y",
            "desc": "y坐标"
          },
          {
            "type": "wh_t",
            "name": "w",
            "desc": "宽度"
          },
          {
            "type": "wh_t",
            "name": "h",
            "desc": "高度"
          }
        ],
        "annotation": {
          "constructor": true,
          "scriptable": true
        },
        "desc": " 创建popup对象。\r\n\r\n",
        "name": "popup_create",
        "return": {
          "type": "widget_t*",
          "desc": "popup对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "popup对象。"
          }
        ],
        "annotation": {
          "cast": true,
          "scriptable": true
        },
        "desc": " 转换为popup对象(供脚本语言使用)。\r\n\r\n",
        "name": "popup_cast",
        "return": {
          "type": "widget_t*",
          "desc": "popup对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "bool_t",
            "name": "close_when_click",
            "desc": "点击时是否关闭窗口。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 设置点击时是否关闭窗口。\r\n\r\n",
        "name": "popup_set_close_when_click",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "bool_t",
            "name": "close_when_click_outside",
            "desc": "点击窗口外部时是否关闭窗口。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 设置点击窗口外部时是否关闭窗口。\r\n\r\n",
        "name": "popup_set_close_when_click_outside",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      }
    ],
    "events": [],
    "properties": [
      {
        "name": "close_when_click",
        "desc": " 点击时是否关闭窗口。\r\n",
        "type": "bool_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "close_when_click_outside",
        "desc": " 点击到窗口外时是否关闭窗口。\r\n",
        "type": "bool_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      }
    ],
    "header": "widgets/popup.h",
    "desc": " 弹出窗口。\r\n\r\n 弹出窗口是一种特殊的窗口，大小和位置可以自由设置，主要用来实现右键菜单和combo\\_box的下列列表等功能。\r\n\r\n popup\\_t是[window\\_base\\_t](window_base_t.md)的子类控件，window\\_base\\_t的函数均适用于popup\\_t控件。\r\n\r\n 在xml中使用\"popup\"标签创建弹出窗口。如：\r\n\r\n ```xml\r\n <popup close_when_click_outside=\"true\" x=\"c\" y=\"m\" w=\"80%\" h=\"80\" >\r\n <list_view x=\"0\"  y=\"0\" w=\"100%\" h=\"100%\" item_height=\"30\">\r\n   <scroll_view name=\"view\" x=\"0\"  y=\"0\" w=\"-12\" h=\"100%\">\r\n     <combo_box_item tr_text=\"english\"/>\r\n     <combo_box_item tr_text=\"chinese\" />\r\n   </scroll_view>\r\n   <scroll_bar_d name=\"bar\" x=\"right\" y=\"0\" w=\"12\" h=\"100%\" value=\"0\"/>\r\n </list_view>\r\n </popup>\r\n ```\r\n\r\n >\r\n 更多用法请参考：[popup](https://github.com/zlgopen/awtk/blob/master/demos/assets/raw/ui/)\r\n\r\n 在c代码中使用函数popup\\_create创建弹出窗口。如：\r\n\r\n ```c\r\n widget_t* win = popup_create(NULL, 0, 0, w, h);\r\n popup_set_close_when_click_outside(win, TRUE);\r\n ```\r\n\r\n > 创建之后，和使用普通窗口是一样的。\r\n\r\n > 完整示例请参考：[combo_box.c](https://github.com/zlgopen/awtk/src/widgets/combo_box.c)\r\n\r\n 可用通过style来设置控件的显示风格，如字体的大小和颜色等等。如：\r\n\r\n ```xml\r\n <popup>\r\n  <style name=\"default\" border_color=\"#a0a0a0\">\r\n    <normal bg_color=\"#f0f0f0\"/>\r\n  </style>\r\n </popup>\r\n ```\r\n\r\n > 更多用法请参考：[theme\r\n default](https://github.com/zlgopen/awtk/blob/master/demos/assets/raw/styles/default.xml#L324)\r\n",
    "name": "popup_t",
    "parent": "widget_t",
    "annotation": {
      "scriptable": true
    },
    "level": 2
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "parent",
            "desc": "父控件"
          },
          {
            "type": "xy_t",
            "name": "x",
            "desc": "x坐标"
          },
          {
            "type": "xy_t",
            "name": "y",
            "desc": "y坐标"
          },
          {
            "type": "wh_t",
            "name": "w",
            "desc": "宽度"
          },
          {
            "type": "wh_t",
            "name": "h",
            "desc": "高度"
          }
        ],
        "annotation": {
          "constructor": true,
          "scriptable": true
        },
        "desc": " 创建progress_bar对象\r\n\r\n",
        "name": "progress_bar_create",
        "return": {
          "type": "widget_t*",
          "desc": "对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "progress_bar对象。"
          }
        ],
        "annotation": {
          "cast": true,
          "scriptable": true
        },
        "desc": " 转换为progress_bar对象(供脚本语言使用)。\r\n\r\n",
        "name": "progress_bar_cast",
        "return": {
          "type": "widget_t*",
          "desc": "progress_bar对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "uint8_t",
            "name": "value",
            "desc": "进度"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 设置进度条的进度。\r\n\r\n",
        "name": "progress_bar_set_value",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "bool_t",
            "name": "vertical",
            "desc": "是否为垂直方向。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 设置进度条的方向。\r\n\r\n",
        "name": "progress_bar_set_vertical",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "bool_t",
            "name": "show_text",
            "desc": "是否显示文本。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 设置进度条的是否显示文本。\r\n\r\n",
        "name": "progress_bar_set_show_text",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      }
    ],
    "events": [
      {
        "name": "EVT_VALUE_WILL_CHANGE",
        "desc": " 值即将改变事件。\r\n",
        "type": "event_t"
      },
      {
        "name": "EVT_VALUE_CHANGED",
        "desc": " 值改变事件。\r\n",
        "type": "event_t"
      }
    ],
    "properties": [
      {
        "name": "value",
        "desc": " 进度条的值[0-100]。\r\n",
        "type": "uint8_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "vertical",
        "desc": " 进度条的是否为垂直方向。\r\n",
        "type": "bool_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "show_text",
        "desc": " 是否显示文本。\r\n",
        "type": "bool_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      }
    ],
    "header": "widgets/progress_bar.h",
    "desc": " 进度条控件。\r\n\r\n 进度条控件可以水平显示也可以垂直显示，由vertical属性决定。\r\n\r\n progress\\_bar\\_t是[widget\\_t](widget_t.md)的子类控件，widget\\_t的函数均适用于progress\\_bar\\_t控件。\r\n\r\n 在xml中使用\"progress\\_bar\"标签创建进度条控件。如：\r\n\r\n ```xml\r\n  <progress_bar name=\"bar1\" x=\"10\" y=\"128\" w=\"240\" h=\"30\" value=\"40\"/>\r\n  <progress_bar name=\"bar2\" x=\"280\" y=\"128\" w=\"30\" h=\"118\" value=\"20\" vertical=\"true\"/>\r\n ```\r\n\r\n > 更多用法请参考：\r\n [basic demo](https://github.com/zlgopen/awtk/blob/master/demos/assets/raw/ui/basic.xml)\r\n\r\n 在c代码中使用函数progress\\_bar\\_create创建进度条控件。如：\r\n\r\n ```c\r\n  widget_t* progress_bar = progress_bar_create(win, 10, 10, 128, 30);\r\n ```\r\n\r\n > 完整示例请参考：\r\n [progress_bar demo](https://github.com/zlgopen/awtk-c-demos/blob/master/demos/progress_bar.c)\r\n\r\n 可用通过style来设置控件的显示风格，如字体的大小和颜色等等。如：\r\n\r\n ```xml\r\n <style>\r\n   <normal bg_color=\"#f0f0f0\" text_color=\"gold\" fg_color=\"#c0c0c0\" border_color=\"#a0a0a0\" />\r\n </style>\r\n ```\r\n\r\n > 更多用法请参考：\r\n [theme\r\n default](https://github.com/zlgopen/awtk/blob/master/demos/assets/raw/styles/default.xml#L183)\r\n\r\n",
    "name": "progress_bar_t",
    "parent": "widget_t",
    "annotation": {
      "scriptable": true
    },
    "level": 2
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "parent",
            "desc": "父控件"
          },
          {
            "type": "xy_t",
            "name": "x",
            "desc": "x坐标"
          },
          {
            "type": "xy_t",
            "name": "y",
            "desc": "y坐标"
          },
          {
            "type": "wh_t",
            "name": "w",
            "desc": "宽度"
          },
          {
            "type": "wh_t",
            "name": "h",
            "desc": "高度"
          }
        ],
        "annotation": {
          "constructor": true
        },
        "desc": " 创建keyboard对象\r\n\r\n",
        "name": "keyboard_create",
        "return": {
          "type": "widget_t*",
          "desc": "对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "parent",
            "desc": "keyboard对象。"
          }
        ],
        "annotation": {
          "deconstructor": true
        },
        "desc": " 关闭keyboard窗口。\r\n\r\n",
        "name": "keyboard_close",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      }
    ],
    "events": [],
    "properties": [],
    "header": "keyboard/keyboard.h",
    "desc": " 软键盘。\r\n\r\n 软键盘是一个特殊的窗口，由编辑器通过输入法自动打开和关闭。\r\n\r\n 这里介绍一下定制软键盘的方法：\r\n\r\n  编辑器输入类型和软键盘UI资源文件的对应关系:\r\n\r\n| 输入类型       | 软键盘UI资源文件|\r\n|----------------|:---------------:|\r\n| INPUT\\_PHONE    | kb\\_phone.xml    |\r\n| INPUT\\_INT      | kb\\_int.xml      |\r\n| INPUT\\_FLOAT    | kb\\_float.xml    |\r\n| INPUT\\_UINT     | kb\\_uint.xml     |\r\n| INPUT\\_UFLOAT   | kb\\_ufloat.xml   |\r\n| INPUT\\_HEX      | kb\\_hex.xml      |\r\n| INPUT\\_EMAIL    | kb\\_ascii.xml    |\r\n| INPUT\\_PASSWORD | kb\\_ascii.xml    |\r\n| INPUT\\_CUSTOM   | 使用自定义的键盘 |\r\n| 其它            | kb\\_default.xml  |\r\n\r\n keyboard中按钮子控件的名称有些特殊要求：\r\n\r\n|  名称          | 功能            |\r\n|----------------|:---------------:|\r\n| return         | 回车键          |\r\n| action         | 定制按钮        |\r\n| backspace      | 删除键          |\r\n| space          | 空格键          |\r\n| close          | 关闭软键盘      |\r\n| 前缀key:       | 键值            |\r\n| 前缀page:      | 切换到页面      |\r\n\r\n\r\n > 更多用法请参考：\r\n [kb_default](https://github.com/zlgopen/awtk/blob/master/demos/assets/raw/ui/kb_default.xml)\r\n\r\n",
    "name": "keyboard_t",
    "parent": "widget_t",
    "level": 2
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "parent",
            "desc": "父控件"
          },
          {
            "type": "xy_t",
            "name": "x",
            "desc": "x坐标"
          },
          {
            "type": "xy_t",
            "name": "y",
            "desc": "y坐标"
          },
          {
            "type": "wh_t",
            "name": "w",
            "desc": "宽度"
          },
          {
            "type": "wh_t",
            "name": "h",
            "desc": "高度"
          }
        ],
        "annotation": {
          "constructor": true,
          "scriptable": true
        },
        "desc": " 创建image对象\r\n\r\n",
        "name": "image_create",
        "return": {
          "type": "widget_t*",
          "desc": "对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "image对象。"
          },
          {
            "type": "image_draw_type_t",
            "name": "draw_type",
            "desc": "绘制方式(仅在没有旋转和缩放时生效)。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": " 设置图片的绘制方式。\r\n\r\n",
        "name": "image_set_draw_type",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "image对象。"
          }
        ],
        "annotation": {
          "cast": true,
          "scriptable": true
        },
        "desc": " 转换为image对象(供脚本语言使用)。\r\n\r\n",
        "name": "image_cast",
        "return": {
          "type": "widget_t*",
          "desc": "image对象。"
        }
      }
    ],
    "events": [],
    "properties": [
      {
        "name": "draw_type",
        "desc": " 图片的绘制方式(仅在没有旋转和缩放时生效)。\r\n",
        "type": "image_draw_type_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      }
    ],
    "header": "widgets/image.h",
    "desc": " 图片控件。\r\n\r\n 用来显示一张静态图片，目前支持bmp/png/jpg等格式。\r\n\r\n 如果要显示gif文件，请用[gif\\_image](gif_image_t.md)。\r\n\r\n 如果要显示svg文件，请用[svg\\_image](svg_image_t.md)。\r\n\r\n 如果需要支持勾选效果，请设置**selectable**属性。\r\n\r\n 如果需要支持点击效果，请设置**clickable**属性。\r\n\r\n image\\_t是[image\\_base\\_t](image_base_t.md)的子类控件，image\\_base\\_t的函数均适用于image\\_t控件。\r\n\r\n 在xml中使用\"image\"标签创建图片控件。如：\r\n\r\n ```xml\r\n <image style=\"border\" image=\"earth\" draw_type=\"icon\" />\r\n ```\r\n\r\n > 更多用法请参考：\r\n [image.xml](https://github.com/zlgopen/awtk/blob/master/demos/assets/raw/ui/images.xml)\r\n\r\n 在c代码中使用函数image\\_create创建图片控件。如：\r\n\r\n ```c\r\n  widget_t* image = image_create(win, 10, 10, 128, 30);\r\n  image_set_image(image, \"earth\");\r\n ```\r\n\r\n > 创建之后:\r\n >\r\n > 需要用widget\\_set\\_image设置图片名称。\r\n >\r\n > 可以用image\\_set\\_draw\\_type设置图片的绘制方式。\r\n\r\n > 绘制方式请参考[image\\_draw\\_type\\_t](image_draw_type_t.md)\r\n\r\n > 绘制方式的属性值和枚举值:\r\n [image\\_draw\\_type\\_name\\_value](https://github.com/zlgopen/awtk/blob/master/src/base/enums.c#L98)\r\n\r\n > 完整示例请参考：\r\n [image demo](https://github.com/zlgopen/awtk-c-demos/blob/master/demos/image.c)\r\n\r\n 可用通过style来设置控件的显示风格，如背景和边框等。如：\r\n\r\n ```xml\r\n <image>\r\n  <style name=\"border\">\r\n   <normal border_color=\"#000000\" bg_color=\"#e0e0e0\" text_color=\"black\"/>\r\n  </style>\r\n </image>\r\n ```\r\n\r\n > 更多用法请参考：\r\n [theme\r\n default](https://github.com/zlgopen/awtk/blob/master/demos/assets/raw/styles/default.xml#L313)\r\n\r\n",
    "name": "image_t",
    "parent": "image_base_t",
    "annotation": {
      "scriptable": true
    },
    "level": 3
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [],
        "annotation": {
          "constructor": true,
          "scriptable": true
        },
        "desc": "\n 创建对象。\n\n\n\n\n",
        "name": "object_default_create",
        "return": {
          "type": "object_t*",
          "desc": "返回object对象。"
        }
      }
    ],
    "events": [],
    "properties": [
      {
        "name": "props_size",
        "desc": " 属性个数。\n\n\n",
        "type": "uint32_t",
        "annotation": {
          "readable": true,
          "scriptable": true
        }
      },
      {
        "name": "props_capacity",
        "desc": " 属性数组的容量。\n\n\n",
        "type": "uint32_t",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "props",
        "desc": " 属性数组。\n\n\n",
        "type": "named_value_t",
        "annotation": {
          "readable": true
        }
      }
    ],
    "header": "tkc/object_default.h",
    "desc": "\n 对象接口的缺省实现。\n\n 内部使用有序数组保存所有属性，可以快速查找指定名称的属性。\n\n\n",
    "name": "object_default_t",
    "parent": "object_t",
    "annotation": {
      "scriptable": true
    },
    "level": 3
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "parent",
            "desc": "父控件"
          },
          {
            "type": "xy_t",
            "name": "x",
            "desc": "x坐标"
          },
          {
            "type": "xy_t",
            "name": "y",
            "desc": "y坐标"
          },
          {
            "type": "wh_t",
            "name": "w",
            "desc": "宽度"
          },
          {
            "type": "wh_t",
            "name": "h",
            "desc": "高度"
          }
        ],
        "annotation": {
          "constructor": true,
          "scriptable": true
        },
        "desc": " 创建spin_box对象\r\n\r\n",
        "name": "spin_box_create",
        "return": {
          "type": "widget_t*",
          "desc": "对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "spin_box对象。"
          }
        ],
        "annotation": {
          "cast": true,
          "scriptable": true
        },
        "desc": " 转换为spin_box对象(供脚本语言使用)。\r\n\r\n",
        "name": "spin_box_cast",
        "return": {
          "type": "widget_t*",
          "desc": "spin_box对象。"
        }
      }
    ],
    "events": [],
    "properties": [],
    "header": "widgets/spin_box.h",
    "desc": " spinbox控件。\r\n\r\n 一个特殊的数值编辑器，将edit\\_t和button\\_t进行组合，方便编辑数值。\r\n\r\n 点击向上的按钮将数值增加一个step，点击向下的按钮将数值减小一个step。\r\n step的值可以通过step属性进行设置。\r\n\r\n spin_box\\_t是[edit\\_t](edit_t.md)的子类控件，edit\\_t的函数均适用于spin\\_box\\_t控件。\r\n\r\n 在xml中使用\"spin_box\"标签创建spinbox控件。如：\r\n\r\n ```xml\r\n <spin_box w=\"70%\" input_type=\"int\" min=\"-100\" max=\"100\" step=\"5\">\r\n ```\r\n\r\n >\r\n 更多用法请参考：[spin_box.xml](https://github.com/zlgopen/awtk/blob/master/demos/assets/raw/ui/spinbox.xml)\r\n\r\n 在c代码中使用函数spin_box\\_create创建spinbox控件。如：\r\n\r\n ```c\r\n  widget_t* spin_box = spin_box_create(win, 10, 10, 128, 30);\r\n  edit_set_input_type(spin_box, type);\r\n ```\r\n\r\n > 创建之后:\r\n >\r\n > 可以用edit相关函数去设置它的各种属性。\r\n\r\n > 完整示例请参考：[spin_box\r\n demo](https://github.com/zlgopen/awtk-c-demos/blob/master/demos/spin_box.c)\r\n\r\n 可用通过style来设置控件的显示风格，如背景和边框等。如：\r\n\r\n ```xml\r\n <spin_box>\r\n <style name=\"default\" border_color=\"#a0a0a0\"  text_color=\"black\" text_align_h=\"left\">\r\n   <normal     bg_color=\"#f0f0f0\" />\r\n   <focused    bg_color=\"#f0f0f0\" border_color=\"black\"/>\r\n   <disable    bg_color=\"gray\" text_color=\"#d0d0d0\" />\r\n   <error      bg_color=\"#f0f0f0\" text_color=\"red\" />\r\n   <empty      bg_color=\"#f0f0f0\" text_color=\"#a0a0a0\" />\r\n </style>\r\n </spin_box>\r\n ```\r\n\r\n > 更多用法请参考：[theme\r\n default](https://github.com/zlgopen/awtk/blob/master/demos/assets/raw/styles/default.xml#L128)\r\n\r\n",
    "name": "spin_box_t",
    "parent": "edit_t",
    "annotation": {
      "scriptable": true
    },
    "level": 3
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "parent",
            "desc": "父控件"
          },
          {
            "type": "xy_t",
            "name": "x",
            "desc": "x坐标"
          },
          {
            "type": "xy_t",
            "name": "y",
            "desc": "y坐标"
          },
          {
            "type": "wh_t",
            "name": "w",
            "desc": "宽度"
          },
          {
            "type": "wh_t",
            "name": "h",
            "desc": "高度"
          }
        ],
        "annotation": {
          "constructor": true,
          "scriptable": true
        },
        "desc": " 创建system_bar对象。\r\n\r\n",
        "name": "system_bar_create",
        "return": {
          "type": "widget_t*",
          "desc": "system_bar对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "system_bar对象。"
          }
        ],
        "annotation": {
          "cast": true,
          "scriptable": true
        },
        "desc": " 转换为system_bar对象(供脚本语言使用)。\r\n\r\n",
        "name": "system_bar_cast",
        "return": {
          "type": "widget_t*",
          "desc": "system_bar对象。"
        }
      }
    ],
    "events": [],
    "properties": [],
    "header": "widgets/system_bar.h",
    "desc": " system\\_bar窗口。\r\n\r\n system\\_bar窗口是一种特殊的窗口，独占LCD顶部区域，用来显示当前窗口的标题和关闭按钮等内容。\r\n\r\n> system\\_bar窗口需要在打开第一个应用程序窗口之前打开。\r\n\r\n system_bar对两个子控件会做特殊处理：\r\n\r\n * 1.名为\"title\"的label控件，自动显示当前主窗口的name或text。\r\n * 2.名为\"close\"的button控件，点击之后向当前主窗口发送EVT\\_REQUEST\\_CLOSE\\_WINDOW消息。\r\n\r\nsystem\\_bar\\_t是[window\\_base\\_t](window_base_t.md)的子类控件，\r\n window\\_base\\_t的函数均适用于system\\_bar\\_t控件。\r\n\r\n 在xml中使用\"system\\_bar\"标签创建system\\_bar窗口。如：\r\n\r\n ```xml\r\n <system_bar h=\"30\">\r\n <column x=\"0\" y=\"0\" w=\"-40\" h=\"100%\">\r\n   <label style=\"title\" x=\"10\" y=\"m\" w=\"55%\" h=\"100%\" name=\"title\"/>\r\n   <digit_clock style=\"time\" x=\"r\" y=\"m\" w=\"40%\" h=\"100%\" format=\"hh:mm\"/>\r\n </column>\r\n <button style=\"close\" x=\"r:5\" y=\"m\" w=\"26\" h=\"26\" name=\"close\" text=\"x\"/>\r\n </system_bar>\r\n ```\r\n\r\n > 更多用法请参考：\r\n [system_bar](https://github.com/zlgopen/awtk/blob/master/demos/assets/raw/ui/system_bar.xml)\r\n\r\n 在c代码中使用函数system\\_bar\\_create创建system\\_bar窗口。如：\r\n\r\n ```c\r\n widget_t* win = system_bar_create(NULL, 0, 0, 320, 30);\r\n ```\r\n\r\n > 创建之后，和使用普通窗口是一样的。\r\n\r\n 可用通过style来设置控件的显示风格，如背景颜色等等。如：\r\n\r\n ```xml\r\n <system_bar>\r\n  <style name=\"default\">\r\n    <normal bg_color=\"#a0a0a0\"/>\r\n  </style>\r\n </system_bar>\r\n ```\r\n\r\n> 更多用法请参考：\r\n [system_bar.xml](https://github.com/zlgopen/awtk/blob/master/demos/assets/raw/styles/system_bar.xml)\r\n\r\n",
    "name": "system_bar_t",
    "parent": "window_base_t",
    "annotation": {
      "scriptable": true
    },
    "level": 3
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "parent",
            "desc": "父控件"
          },
          {
            "type": "xy_t",
            "name": "x",
            "desc": "x坐标"
          },
          {
            "type": "xy_t",
            "name": "y",
            "desc": "y坐标"
          },
          {
            "type": "wh_t",
            "name": "w",
            "desc": "宽度"
          },
          {
            "type": "wh_t",
            "name": "h",
            "desc": "高度"
          }
        ],
        "annotation": {
          "constructor": true,
          "scriptable": true
        },
        "desc": " 创建svg_image对象\r\n\r\n",
        "name": "svg_image_create",
        "return": {
          "type": "widget_t*",
          "desc": "对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "svg_image对象。"
          }
        ],
        "annotation": {
          "cast": true,
          "scriptable": true
        },
        "desc": " 转换为svg_image对象(供脚本语言使用)。\r\n\r\n",
        "name": "svg_image_cast",
        "return": {
          "type": "widget_t*",
          "desc": "svg_image对象。"
        }
      }
    ],
    "events": [],
    "properties": [],
    "header": "svg_image/svg_image.h",
    "desc": " SVG图片控件。\r\n\r\n svg\\_image\\_t是[image\\_base\\_t](image_base_t.md)的子类控件，image\\_base\\_t的函数均适用于svg\\_image\\_t控件。\r\n\r\n 在xml中使用\"svg\\_image\"标签创建SVG图片控件。如：\r\n\r\n ```xml\r\n <svg_image image=\"girl\"/>\r\n ```\r\n\r\n >更多用法请参考：[svg image](\r\n https://github.com/zlgopen/awtk/blob/master/demos/assets/raw/ui/svg_image.xml)\r\n\r\n 在c代码中使用函数svg\\_image\\_create创建SVG图片控件。如：\r\n\r\n ```c\r\n  widget_t* image = svg_image_create(win, 10, 10, 200, 200);\r\n  image_set_image(image, \"girl\");\r\n ```\r\n\r\n > 创建之后: 需要用widget\\_set\\_image设置图片名称。\r\n\r\n > 完整示例请参考：[svg image demo](\r\n https://github.com/zlgopen/awtk-c-demos/blob/master/demos/svg_image.c)\r\n\r\n 可用通过style来设置控件的显示风格，如背景和边框等。如：\r\n\r\n ```xml\r\n <style name=\"default\">\r\n   <normal border_color=\"green\" fg_color=\"red\" />\r\n </style>\r\n ```\r\n\r\n > 更多用法请参考：[theme default](\r\n https://github.com/zlgopen/awtk/blob/master/demos/assets/raw/styles/default.xml)\r\n\r\n",
    "name": "svg_image_t",
    "parent": "image_base_t",
    "annotation": {
      "scriptable": true
    },
    "level": 3
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "parent",
            "desc": "父控件"
          },
          {
            "type": "xy_t",
            "name": "x",
            "desc": "x坐标"
          },
          {
            "type": "xy_t",
            "name": "y",
            "desc": "y坐标"
          },
          {
            "type": "wh_t",
            "name": "w",
            "desc": "宽度"
          },
          {
            "type": "wh_t",
            "name": "h",
            "desc": "高度"
          }
        ],
        "annotation": {
          "constructor": true,
          "scriptable": true
        },
        "desc": " 创建gif_image对象\r\n\r\n",
        "name": "gif_image_create",
        "return": {
          "type": "widget_t*",
          "desc": "对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "gif_image对象。"
          }
        ],
        "annotation": {
          "cast": true,
          "scriptable": true
        },
        "desc": " 转换为gif_image对象(供脚本语言使用)。\r\n\r\n",
        "name": "gif_image_cast",
        "return": {
          "type": "widget_t*",
          "desc": "gif_image对象。"
        }
      }
    ],
    "events": [],
    "properties": [],
    "header": "gif_image/gif_image.h",
    "desc": " GIF图片控件。\r\n\r\n > 注意：GIF图片的尺寸大于控件大小时会自动缩小图片，但一般的嵌入式系统的硬件加速都不支持图片缩放，\r\n 所以缩放图片会导致性能明显下降。如果性能不满意时，请确认一下GIF图片的尺寸是否小余控件大小。\r\n\r\n gif\\_image\\_t是[image\\_base\\_t](image_base_t.md)的子类控件，image\\_base\\_t的函数均适用于gif\\_image\\_t控件。\r\n\r\n 在xml中使用\"gif\\_image\"标签创建GIF图片控件。如：\r\n\r\n ```xml\r\n <gif_image image=\"bee\"/>\r\n ```\r\n\r\n >更多用法请参考：\r\n [gif image](https://github.com/zlgopen/awtk/blob/master/demos/assets/raw/ui/gif_image.xml)\r\n\r\n 在c代码中使用函数gif\\_image\\_create创建GIF图片控件。如：\r\n\r\n ```c\r\n  widget_t* image = gif_image_create(win, 10, 10, 200, 200);\r\n  image_set_image(image, \"bee\");\r\n ```\r\n\r\n > 创建之后:\r\n >\r\n > 需要用widget\\_set\\_image设置图片名称。\r\n\r\n > 完整示例请参考：[gif image demo](\r\n https://github.com/zlgopen/awtk-c-demos/blob/master/demos/gif_image.c)\r\n\r\n 可用通过style来设置控件的显示风格，如背景和边框等。如：\r\n\r\n ```xml\r\n <gif_image>\r\n  <style name=\"border\">\r\n   <normal border_color=\"#000000\" bg_color=\"#e0e0e0\" text_color=\"black\"/>\r\n  </style>\r\n </gif_image>\r\n ```\r\n\r\n > 更多用法请参考：[theme default](\r\n https://github.com/zlgopen/awtk/blob/master/demos/assets/raw/styles/default.xml)\r\n\r\n",
    "name": "gif_image_t",
    "parent": "image_base_t",
    "annotation": {
      "scriptable": true
    },
    "level": 3
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "timer_info_t*",
            "name": "timer",
            "desc": "timer_info对象。"
          }
        ],
        "annotation": {
          "cast": true,
          "scriptable": true
        },
        "desc": " 转换为timer_info对象(供脚本语言使用)。\n\n\n",
        "name": "timer_info_cast",
        "return": {
          "type": "timer_info_t*",
          "desc": "timer_info对象。"
        }
      }
    ],
    "events": [],
    "properties": [
      {
        "name": "on_timer",
        "desc": " 定时器回调函数。\n\n",
        "type": "timer_func_t",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "ctx",
        "desc": " 定时器回调函数的上下文\n\n\n",
        "type": "void*",
        "annotation": {
          "readable": true,
          "scriptable": true
        }
      },
      {
        "name": "id",
        "desc": " 定时器的ID\n\n > 为TK\\_INVALID\\_ID时表示无效定时器。\n\n",
        "type": "uint32_t",
        "annotation": {
          "readable": true,
          "scriptable": true
        }
      },
      {
        "name": "now",
        "desc": " 当前时间(相对时间，单位为毫秒)。\n\n\n",
        "type": "uint32_t",
        "annotation": {
          "readable": true,
          "scriptable": true
        }
      },
      {
        "name": "start",
        "desc": " 起始时间(相对时间，单位为毫秒)。\n\n\n",
        "type": "uint32_t",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "duration",
        "desc": " 时间间隔(单位为毫秒)。\n\n\n",
        "type": "uint32_t",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "on_destroy",
        "desc": " 定时器销毁时的回调函数。\n\n",
        "type": "tk_destroy_t",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "on_destroy_ctx",
        "desc": " 定时器销毁时的回调函数上下文。\n\n",
        "type": "void*",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "user_changed_time",
        "desc": " 用户是否修改了系统时间。\n\n",
        "type": "bool_t",
        "annotation": {
          "readable": true,
          "scriptable": true
        }
      }
    ],
    "header": "base/timer_info.h",
    "desc": " 单个定时器的信息。\n\n\n",
    "name": "timer_info_t",
    "parent": "object_t",
    "annotation": {
      "scriptable": true
    },
    "level": 3
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "idle_info_t*",
            "name": "idle",
            "desc": "idle_info对象。"
          }
        ],
        "annotation": {
          "cast": true,
          "scriptable": true
        },
        "desc": " 转换为idle_info对象(供脚本语言使用)。\n\n\n",
        "name": "idle_info_cast",
        "return": {
          "type": "idle_info_t*",
          "desc": "idle_info对象。"
        }
      }
    ],
    "events": [],
    "properties": [
      {
        "name": "on_idle",
        "desc": " idle回调函数。\n\n",
        "type": "idle_func_t",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "ctx",
        "desc": " idle回调函数上下文。\n\n",
        "type": "void*",
        "annotation": {
          "readable": true,
          "scriptable": true
        }
      },
      {
        "name": "id",
        "desc": " idle的ID\n\n > 为TK\\_INVALID\\_ID时表示无效idle。\n\n",
        "type": "uint32_t",
        "annotation": {
          "readable": true,
          "scriptable": true
        }
      },
      {
        "name": "on_destroy_ctx",
        "desc": " idle销毁时的回调函数的上下文。\n\n",
        "type": "tk_destroy_t",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "on_destroy",
        "desc": " idle销毁时的回调函数。\n\n",
        "type": "tk_destroy_t",
        "annotation": {
          "readable": true
        }
      }
    ],
    "header": "base/idle_info.h",
    "desc": "\n 单个idle的信息。\n\n",
    "name": "idle_info_t",
    "parent": "object_t",
    "annotation": {
      "scriptable": true
    },
    "level": 3
  }
]